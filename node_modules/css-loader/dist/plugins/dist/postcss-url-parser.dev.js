"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _postcssValueParser = _interopRequireDefault(require("postcss-value-parser"));

var _utils = require("../utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var pluginName = 'postcss-url-parser';
var isUrlFunc = /url/i;
var isImageSetFunc = /^(?:-webkit-)?image-set$/i;
var needParseDecl = /(?:url|(?:-webkit-)?image-set)\(/i;

function getNodeFromUrlFunc(node) {
  return node.nodes && node.nodes[0];
}

function walkUrls(parsed, callback) {
  parsed.walk(function (node) {
    if (node.type !== 'function') {
      return;
    }

    if (isUrlFunc.test(node.value)) {
      var nodes = node.nodes;
      var isStringValue = nodes.length !== 0 && nodes[0].type === 'string';
      var url = isStringValue ? nodes[0].value : _postcssValueParser["default"].stringify(nodes);
      callback(getNodeFromUrlFunc(node), url, false, isStringValue); // Do not traverse inside `url`
      // eslint-disable-next-line consistent-return

      return false;
    }

    if (isImageSetFunc.test(node.value)) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = node.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var nNode = _step.value;
          var type = nNode.type,
              value = nNode.value;

          if (type === 'function' && isUrlFunc.test(value)) {
            var _nodes = nNode.nodes;

            var _isStringValue = _nodes.length !== 0 && _nodes[0].type === 'string';

            var _url = _isStringValue ? _nodes[0].value : _postcssValueParser["default"].stringify(_nodes);

            callback(getNodeFromUrlFunc(nNode), _url, false, _isStringValue);
          }

          if (type === 'string') {
            callback(nNode, value, true, true);
          }
        } // Do not traverse inside `image-set`
        // eslint-disable-next-line consistent-return

      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
  });
}

var _default = _postcss["default"].plugin(pluginName, function (options) {
  return function (css, result) {
    var importsMap = new Map();
    var replacementsMap = new Map();
    var hasHelper = false;
    css.walkDecls(function (decl) {
      if (!needParseDecl.test(decl.value)) {
        return;
      }

      var parsed = (0, _postcssValueParser["default"])(decl.value);
      walkUrls(parsed, function (node, url, needQuotes, isStringValue) {
        // https://www.w3.org/TR/css-syntax-3/#typedef-url-token
        if (url.replace(/^[\s]+|[\s]+$/g, '').length === 0) {
          result.warn("Unable to find uri in '".concat(decl ? decl.toString() : decl.value, "'"), {
            node: decl
          });
          return;
        }

        if (options.filter && !options.filter(url)) {
          return;
        }

        var splittedUrl = url.split(/(\?)?#/);

        var _splittedUrl = _slicedToArray(splittedUrl, 3),
            urlWithoutHash = _splittedUrl[0],
            singleQuery = _splittedUrl[1],
            hashValue = _splittedUrl[2];

        var hash = singleQuery || hashValue ? "".concat(singleQuery ? '?' : '').concat(hashValue ? "#".concat(hashValue) : '') : '';
        var normalizedUrl = (0, _utils.normalizeUrl)(urlWithoutHash, isStringValue);
        var importKey = normalizedUrl;
        var importName = importsMap.get(importKey);

        if (!importName) {
          importName = "___CSS_LOADER_URL_IMPORT_".concat(importsMap.size, "___");
          importsMap.set(importKey, importName);

          if (!hasHelper) {
            var urlToHelper = require.resolve('../runtime/getUrl.js');

            result.messages.push({
              pluginName: pluginName,
              type: 'import',
              value: {
                importName: '___CSS_LOADER_GET_URL_IMPORT___',
                url: options.urlHandler ? options.urlHandler(urlToHelper) : urlToHelper
              }
            });
            hasHelper = true;
          }

          result.messages.push({
            pluginName: pluginName,
            type: 'import',
            value: {
              importName: importName,
              url: options.urlHandler ? options.urlHandler(normalizedUrl) : normalizedUrl
            }
          });
        }

        var replacementKey = JSON.stringify({
          importKey: importKey,
          hash: hash,
          needQuotes: needQuotes
        });
        var replacementName = replacementsMap.get(replacementKey);

        if (!replacementName) {
          replacementName = "___CSS_LOADER_URL_REPLACEMENT_".concat(replacementsMap.size, "___");
          replacementsMap.set(replacementKey, replacementName);
          result.messages.push({
            pluginName: pluginName,
            type: 'url-replacement',
            value: {
              replacementName: replacementName,
              importName: importName,
              hash: hash,
              needQuotes: needQuotes
            }
          });
        } // eslint-disable-next-line no-param-reassign


        node.type = 'word'; // eslint-disable-next-line no-param-reassign

        node.value = replacementName;
      }); // eslint-disable-next-line no-param-reassign

      decl.value = parsed.toString();
    });
  };
});

exports["default"] = _default;