"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

var _icssUtils = require("icss-utils");

var _loaderUtils = require("loader-utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function makeRequestableIcssImports(icssImports) {
  return Object.keys(icssImports).reduce(function (accumulator, url) {
    var tokensMap = icssImports[url];
    var tokens = Object.keys(tokensMap);

    if (tokens.length === 0) {
      return accumulator;
    }

    var normalizedUrl = (0, _loaderUtils.urlToRequest)(url);

    if (!accumulator[normalizedUrl]) {
      // eslint-disable-next-line no-param-reassign
      accumulator[normalizedUrl] = tokensMap;
    } else {
      // eslint-disable-next-line no-param-reassign
      accumulator[normalizedUrl] = _objectSpread({}, accumulator[normalizedUrl], {}, tokensMap);
    }

    return accumulator;
  }, {});
}

var _default = _postcss["default"].plugin('postcss-icss-parser', function (options) {
  return function (css, result) {
    var importReplacements = Object.create(null);
    var extractedICSS = (0, _icssUtils.extractICSS)(css);
    var icssImports = makeRequestableIcssImports(extractedICSS.icssImports);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.keys(icssImports).entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2),
            importIndex = _step$value[0],
            url = _step$value[1];

        var importName = "___CSS_LOADER_ICSS_IMPORT_".concat(importIndex, "___");
        result.messages.push({
          type: 'import',
          value: {
            importName: importName,
            url: options.urlHandler ? options.urlHandler(url) : url
          }
        }, {
          type: 'api-import',
          value: {
            type: 'internal',
            importName: importName,
            dedupe: true
          }
        });
        var tokenMap = icssImports[url];
        var tokens = Object.keys(tokenMap);
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = tokens.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = _slicedToArray(_step2.value, 2),
                replacementIndex = _step2$value[0],
                token = _step2$value[1];

            var replacementName = "___CSS_LOADER_ICSS_IMPORT_".concat(importIndex, "_REPLACEMENT_").concat(replacementIndex, "___");
            var localName = tokenMap[token];
            importReplacements[token] = replacementName;
            result.messages.push({
              type: 'icss-replacement',
              value: {
                replacementName: replacementName,
                importName: importName,
                localName: localName
              }
            });
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (Object.keys(importReplacements).length > 0) {
      (0, _icssUtils.replaceSymbols)(css, importReplacements);
    }

    var icssExports = extractedICSS.icssExports;

    for (var _i = 0, _Object$keys = Object.keys(icssExports); _i < _Object$keys.length; _i++) {
      var name = _Object$keys[_i];
      var value = (0, _icssUtils.replaceValueSymbols)(icssExports[name], importReplacements);
      result.messages.push({
        type: 'export',
        value: {
          name: name,
          value: value
        }
      });
    }
  };
});

exports["default"] = _default;