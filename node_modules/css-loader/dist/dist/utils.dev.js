"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeUrl = normalizeUrl;
exports.getFilter = getFilter;
exports.getModulesPlugins = getModulesPlugins;
exports.normalizeSourceMap = normalizeSourceMap;
exports.getPreRequester = getPreRequester;
exports.getImportCode = getImportCode;
exports.getModuleCode = getModuleCode;
exports.getExportCode = getExportCode;
exports.shouldUseModulesPlugins = shouldUseModulesPlugins;

var _path = _interopRequireDefault(require("path"));

var _loaderUtils = require("loader-utils");

var _normalizePath = _interopRequireDefault(require("normalize-path"));

var _cssesc = _interopRequireDefault(require("cssesc"));

var _postcssModulesValues = _interopRequireDefault(require("postcss-modules-values"));

var _postcssModulesLocalByDefault = _interopRequireDefault(require("postcss-modules-local-by-default"));

var _postcssModulesExtractImports = _interopRequireDefault(require("postcss-modules-extract-imports"));

var _postcssModulesScope = _interopRequireDefault(require("postcss-modules-scope"));

var _camelcase = _interopRequireDefault(require("camelcase"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/


var whitespace = '[\\x20\\t\\r\\n\\f]';
var unescapeRegExp = new RegExp("\\\\([\\da-f]{1,6}".concat(whitespace, "?|(").concat(whitespace, ")|.)"), 'ig');

function unescape(str) {
  return str.replace(unescapeRegExp, function (_, escaped, escapedWhitespace) {
    var high = "0x".concat(escaped) - 0x10000;
    /* eslint-disable line-comment-position */
    // NaN means non-codepoint
    // Workaround erroneous numeric interpretation of +"0x"
    // eslint-disable-next-line no-self-compare

    return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
    String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
    // eslint-disable-next-line no-bitwise
    String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);
    /* eslint-enable line-comment-position */
  });
} // eslint-disable-next-line no-control-regex


var filenameReservedRegex = /[<>:"/\\|?*\x00-\x1F]/g; // eslint-disable-next-line no-control-regex

var reControlChars = /[\u0000-\u001f\u0080-\u009f]/g;
var reRelativePath = /^\.+/;

function getLocalIdent(loaderContext, localIdentName, localName, options) {
  if (!options.context) {
    // eslint-disable-next-line no-param-reassign
    options.context = loaderContext.rootContext;
  }

  var request = (0, _normalizePath["default"])(_path["default"].relative(options.context || '', loaderContext.resourcePath)); // eslint-disable-next-line no-param-reassign

  options.content = "".concat(options.hashPrefix + request, "+").concat(unescape(localName)); // Using `[path]` placeholder outputs `/` we need escape their
  // Also directories can contains invalid characters for css we need escape their too

  return (0, _cssesc["default"])((0, _loaderUtils.interpolateName)(loaderContext, localIdentName, options) // For `[hash]` placeholder
  .replace(/^((-?[0-9])|--)/, '_$1').replace(filenameReservedRegex, '-').replace(reControlChars, '-').replace(reRelativePath, '-').replace(/\./g, '-'), {
    isIdentifier: true
  }).replace(/\\\[local\\\]/gi, localName);
}

function normalizeUrl(url, isStringValue) {
  var normalizedUrl = url;

  if (isStringValue && /\\[\n]/.test(normalizedUrl)) {
    normalizedUrl = normalizedUrl.replace(/\\[\n]/g, '');
  }

  return (0, _loaderUtils.urlToRequest)(decodeURIComponent(unescape(normalizedUrl)));
}

function getFilter(filter, resourcePath) {
  var defaultFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return function (item) {
    if (defaultFilter && !defaultFilter(item)) {
      return false;
    }

    if (typeof filter === 'function') {
      return filter(item, resourcePath);
    }

    return true;
  };
}

function shouldUseModulesPlugins(modules, resourcePath) {
  if (typeof modules === 'undefined') {
    return false;
  }

  if (typeof modules === 'boolean') {
    return modules;
  }

  if (typeof modules === 'string') {
    return true;
  }

  if (typeof modules.auto === 'boolean') {
    return modules.auto ? /\.module\.\w+$/i.test(resourcePath) : false;
  }

  if (modules.auto instanceof RegExp) {
    return modules.auto.test(resourcePath);
  }

  if (typeof modules.auto === 'function') {
    return modules.auto(resourcePath);
  }

  return true;
}

function getModulesPlugins(options, loaderContext) {
  var modulesOptions = {
    mode: 'local',
    exportGlobals: false,
    localIdentName: '[hash:base64]',
    getLocalIdent: getLocalIdent,
    hashPrefix: '',
    localIdentRegExp: null
  };

  if (typeof options.modules === 'boolean' || typeof options.modules === 'string') {
    modulesOptions.mode = typeof options.modules === 'string' ? options.modules : 'local';
  } else {
    modulesOptions = Object.assign({}, modulesOptions, options.modules);
  }

  if (typeof modulesOptions.mode === 'function') {
    modulesOptions.mode = modulesOptions.mode(loaderContext.resourcePath);
  }

  var plugins = [];

  try {
    plugins = [_postcssModulesValues["default"], (0, _postcssModulesLocalByDefault["default"])({
      mode: modulesOptions.mode
    }), (0, _postcssModulesExtractImports["default"])(), (0, _postcssModulesScope["default"])({
      generateScopedName: function generateScopedName(exportName) {
        var localIdent = modulesOptions.getLocalIdent(loaderContext, modulesOptions.localIdentName, exportName, {
          context: modulesOptions.context,
          hashPrefix: modulesOptions.hashPrefix,
          regExp: modulesOptions.localIdentRegExp
        });

        if (!localIdent) {
          localIdent = getLocalIdent(loaderContext, modulesOptions.localIdentName, exportName, {
            context: modulesOptions.context,
            hashPrefix: modulesOptions.hashPrefix,
            regExp: modulesOptions.localIdentRegExp
          });
        }

        return localIdent;
      },
      exportGlobals: modulesOptions.exportGlobals
    })];
  } catch (error) {
    loaderContext.emitError(error);
  }

  return plugins;
}

function normalizeSourceMap(map) {
  var newMap = map; // Some loader emit source map as string
  // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.

  if (typeof newMap === 'string') {
    newMap = JSON.parse(newMap);
  } // Source maps should use forward slash because it is URLs (https://github.com/mozilla/source-map/issues/91)
  // We should normalize path because previous loaders like `sass-loader` using backslash when generate source map


  if (newMap.file) {
    newMap.file = (0, _normalizePath["default"])(newMap.file);
  }

  if (newMap.sourceRoot) {
    newMap.sourceRoot = (0, _normalizePath["default"])(newMap.sourceRoot);
  }

  if (newMap.sources) {
    newMap.sources = newMap.sources.map(function (source) {
      return (0, _normalizePath["default"])(source);
    });
  }

  return newMap;
}

function getPreRequester(_ref) {
  var loaders = _ref.loaders,
      loaderIndex = _ref.loaderIndex;
  var cache = Object.create(null);
  return function (number) {
    if (cache[number]) {
      return cache[number];
    }

    if (number === false) {
      cache[number] = '';
    } else {
      var loadersRequest = loaders.slice(loaderIndex, loaderIndex + 1 + (typeof number !== 'number' ? 0 : number)).map(function (x) {
        return x.request;
      }).join('!');
      cache[number] = "-!".concat(loadersRequest, "!");
    }

    return cache[number];
  };
}

function getImportCode(loaderContext, exportType, imports, esModule) {
  var code = '';

  if (exportType === 'full') {
    var apiUrl = (0, _loaderUtils.stringifyRequest)(loaderContext, require.resolve('./runtime/api'));
    code += esModule ? "import ___CSS_LOADER_API_IMPORT___ from ".concat(apiUrl, ";\n") : "var ___CSS_LOADER_API_IMPORT___ = require(".concat(apiUrl, ");\n");
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = imports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;
      var importName = item.importName,
          url = item.url;
      code += esModule ? "import ".concat(importName, " from ").concat(url, ";\n") : "var ".concat(importName, " = require(").concat(url, ");\n");
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return code ? "// Imports\n".concat(code) : '';
}

function getModuleCode(result, exportType, sourceMap, apiImports, urlReplacements, icssReplacements, esModule) {
  if (exportType !== 'full') {
    return '';
  }

  var css = result.css,
      map = result.map;
  var sourceMapValue = sourceMap && map ? ",".concat(map) : '';
  var code = JSON.stringify(css);
  var beforeCode = '';
  beforeCode += esModule ? "var exports = ___CSS_LOADER_API_IMPORT___(".concat(sourceMap, ");\n") : "exports = ___CSS_LOADER_API_IMPORT___(".concat(sourceMap, ");\n");
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = apiImports[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var item = _step2.value;
      var type = item.type,
          media = item.media,
          dedupe = item.dedupe;
      beforeCode += type === 'internal' ? "exports.i(".concat(item.importName).concat(media ? ", ".concat(JSON.stringify(media)) : dedupe ? ', ""' : '').concat(dedupe ? ', true' : '', ");\n") : "exports.push([module.id, ".concat(JSON.stringify("@import url(".concat(item.url, ");"))).concat(media ? ", ".concat(JSON.stringify(media)) : '', "]);\n");
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    var _loop = function _loop() {
      var item = _step3.value;
      var replacementName = item.replacementName,
          importName = item.importName,
          hash = item.hash,
          needQuotes = item.needQuotes;
      var getUrlOptions = [].concat(hash ? ["hash: ".concat(JSON.stringify(hash))] : []).concat(needQuotes ? 'needQuotes: true' : []);
      var preparedOptions = getUrlOptions.length > 0 ? ", { ".concat(getUrlOptions.join(', '), " }") : '';
      beforeCode += "var ".concat(replacementName, " = ___CSS_LOADER_GET_URL_IMPORT___(").concat(importName).concat(preparedOptions, ");\n");
      code = code.replace(new RegExp(replacementName, 'g'), function () {
        return "\" + ".concat(replacementName, " + \"");
      });
    };

    for (var _iterator3 = urlReplacements[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    var _loop2 = function _loop2() {
      var replacement = _step4.value;
      var replacementName = replacement.replacementName,
          importName = replacement.importName,
          localName = replacement.localName;
      code = code.replace(new RegExp(replacementName, 'g'), function () {
        return "\" + ".concat(importName, ".locals[").concat(JSON.stringify(localName), "] + \"");
      });
    };

    for (var _iterator4 = icssReplacements[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      _loop2();
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
        _iterator4["return"]();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  return "".concat(beforeCode, "// Module\nexports.push([module.id, ").concat(code, ", \"\"").concat(sourceMapValue, "]);\n");
}

function dashesCamelCase(str) {
  return str.replace(/-+(\w)/g, function (match, firstLetter) {
    return firstLetter.toUpperCase();
  });
}

function getExportCode(exports, exportType, localsConvention, icssReplacements, esModule) {
  var code = '';
  var localsCode = '';

  var addExportToLocalsCode = function addExportToLocalsCode(name, value) {
    if (localsCode) {
      localsCode += ",\n";
    }

    localsCode += "\t".concat(JSON.stringify(name), ": ").concat(JSON.stringify(value));
  };

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = exports[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var _step5$value = _step5.value,
          name = _step5$value.name,
          value = _step5$value.value;

      switch (localsConvention) {
        case 'camelCase':
          {
            addExportToLocalsCode(name, value);
            var modifiedName = (0, _camelcase["default"])(name);

            if (modifiedName !== name) {
              addExportToLocalsCode(modifiedName, value);
            }

            break;
          }

        case 'camelCaseOnly':
          {
            addExportToLocalsCode((0, _camelcase["default"])(name), value);
            break;
          }

        case 'dashes':
          {
            addExportToLocalsCode(name, value);

            var _modifiedName = dashesCamelCase(name);

            if (_modifiedName !== name) {
              addExportToLocalsCode(_modifiedName, value);
            }

            break;
          }

        case 'dashesOnly':
          {
            addExportToLocalsCode(dashesCamelCase(name), value);
            break;
          }

        case 'asIs':
        default:
          addExportToLocalsCode(name, value);
          break;
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    var _loop3 = function _loop3() {
      var replacement = _step6.value;
      var replacementName = replacement.replacementName,
          importName = replacement.importName,
          localName = replacement.localName;
      localsCode = localsCode.replace(new RegExp(replacementName, 'g'), function () {
        return exportType === 'locals' ? "\" + ".concat(importName, "[").concat(JSON.stringify(localName), "] + \"") : "\" + ".concat(importName, ".locals[").concat(JSON.stringify(localName), "] + \"");
      });
    };

    for (var _iterator6 = icssReplacements[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      _loop3();
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
        _iterator6["return"]();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  if (exportType === 'locals') {
    code += "".concat(esModule ? 'export default' : 'module.exports =', " ").concat(localsCode ? "{\n".concat(localsCode, "\n}") : '{}', ";\n");
  } else {
    if (localsCode) {
      code += "exports.locals = {\n".concat(localsCode, "\n};\n");
    }

    code += "".concat(esModule ? 'export default' : 'module.exports =', " exports;\n");
  }

  return "// Exports\n".concat(code);
}