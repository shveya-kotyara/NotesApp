'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('util'),
    promisify = _require.promisify;

var fs = require('fs');

var path = require('path');

var parseJson = require('parse-json');

var readFileAsync = promisify(fs.readFile);

module.exports = function _callee(options) {
  var filePath, json;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = _objectSpread({
            cwd: process.cwd(),
            normalize: true
          }, options);
          filePath = path.resolve(options.cwd, 'package.json');
          _context.t0 = parseJson;
          _context.next = 5;
          return regeneratorRuntime.awrap(readFileAsync(filePath, 'utf8'));

        case 5:
          _context.t1 = _context.sent;
          json = (0, _context.t0)(_context.t1);

          if (options.normalize) {
            require('normalize-package-data')(json);
          }

          return _context.abrupt("return", json);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  });
};

module.exports.sync = function (options) {
  options = _objectSpread({
    cwd: process.cwd(),
    normalize: true
  }, options);
  var filePath = path.resolve(options.cwd, 'package.json');
  var json = parseJson(fs.readFileSync(filePath, 'utf8'));

  if (options.normalize) {
    require('normalize-package-data')(json);
  }

  return json;
};