'use strict';

var path = require('path'); // add bash completions to your
//  yargs-powered applications.


module.exports = function completion(yargs, usage, command) {
  var self = {
    completionKey: 'get-yargs-completions'
  };
  var zshShell = process.env.SHELL && process.env.SHELL.indexOf('zsh') !== -1; // get a list of completion commands.
  // 'args' is the array of strings from the line to be completed

  self.getCompletion = function getCompletion(args, done) {
    var completions = [];
    var current = args.length ? args[args.length - 1] : '';
    var argv = yargs.parse(args, true);
    var aliases = yargs.parsed.aliases;
    var parentCommands = yargs.getContext().commands; // a custom completion function can be provided
    // to completion().

    if (completionFunction) {
      if (completionFunction.length < 3) {
        var result = completionFunction(current, argv); // promise based completion function.

        if (typeof result.then === 'function') {
          return result.then(function (list) {
            process.nextTick(function () {
              done(list);
            });
          })["catch"](function (err) {
            process.nextTick(function () {
              throw err;
            });
          });
        } // synchronous completion function.


        return done(result);
      } else {
        // asynchronous completion function
        return completionFunction(current, argv, function (completions) {
          done(completions);
        });
      }
    }

    var handlers = command.getCommandHandlers();

    for (var i = 0, ii = args.length; i < ii; ++i) {
      if (handlers[args[i]] && handlers[args[i]].builder) {
        var builder = handlers[args[i]].builder;

        if (typeof builder === 'function') {
          var y = yargs.reset();
          builder(y);
          return y.argv;
        }
      }
    }

    if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {
      usage.getCommands().forEach(function (usageCommand) {
        var commandName = command.parseCommand(usageCommand[0]).cmd;

        if (args.indexOf(commandName) === -1) {
          if (!zshShell) {
            completions.push(commandName);
          } else {
            var desc = usageCommand[1] || '';
            completions.push(commandName.replace(/:/g, '\\:') + ':' + desc);
          }
        }
      });
    }

    if (current.match(/^-/) || current === '' && completions.length === 0) {
      var descs = usage.getDescriptions();
      Object.keys(yargs.getOptions().key).forEach(function (key) {
        // If the key and its aliases aren't in 'args', add the key to 'completions'
        var keyAndAliases = [key].concat(aliases[key] || []);
        var notInArgs = keyAndAliases.every(function (val) {
          return args.indexOf("--".concat(val)) === -1;
        });

        if (notInArgs) {
          if (!zshShell) {
            completions.push("--".concat(key));
          } else {
            var desc = descs[key] || '';
            completions.push("--".concat(key.replace(/:/g, '\\:'), ":").concat(desc.replace('__yargsString__:', '')));
          }
        }
      });
    }

    done(completions);
  }; // generate the completion script to add to your .bashrc.


  self.generateCompletionScript = function generateCompletionScript($0, cmd) {
    var templates = require('./completion-templates');

    var script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate;
    var name = path.basename($0); // add ./to applications not yet installed as bin.

    if ($0.match(/\.js$/)) $0 = "./".concat($0);
    script = script.replace(/{{app_name}}/g, name);
    script = script.replace(/{{completion_command}}/g, cmd);
    return script.replace(/{{app_path}}/g, $0);
  }; // register a function to perform your own custom
  // completions., this function can be either
  // synchrnous or asynchronous.


  var completionFunction = null;

  self.registerFunction = function (fn) {
    completionFunction = fn;
  };

  return self;
};