'use strict';

var path = require('path');

var execa = require('execa');

var xsel = 'xsel';
var xselFallback = path.join(__dirname, '../fallbacks/linux/xsel');
var copyArguments = ['--clipboard', '--input'];
var pasteArguments = ['--clipboard', '--output'];

var makeError = function makeError(xselError, fallbackError) {
  var error;

  if (xselError.code === 'ENOENT') {
    error = new Error('Couldn\'t find the `xsel` binary and fallback didn\'t work. On Debian/Ubuntu you can install xsel with: sudo apt install xsel');
  } else {
    error = new Error('Both xsel and fallback failed');
    error.xselError = xselError;
  }

  error.fallbackError = fallbackError;
  return error;
};

var xselWithFallback = function xselWithFallback(argumentList, options) {
  return regeneratorRuntime.async(function xselWithFallback$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return regeneratorRuntime.awrap(execa.stdout(xsel, argumentList, options));

        case 3:
          return _context.abrupt("return", _context.sent);

        case 6:
          _context.prev = 6;
          _context.t0 = _context["catch"](0);
          _context.prev = 8;
          _context.next = 11;
          return regeneratorRuntime.awrap(execa.stdout(xselFallback, argumentList, options));

        case 11:
          return _context.abrupt("return", _context.sent);

        case 14:
          _context.prev = 14;
          _context.t1 = _context["catch"](8);
          throw makeError(_context.t0, _context.t1);

        case 17:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[0, 6], [8, 14]]);
};

var xselWithFallbackSync = function xselWithFallbackSync(argumentList, options) {
  try {
    return execa.sync(xsel, argumentList, options);
  } catch (xselError) {
    try {
      return execa.sync(xselFallback, argumentList, options);
    } catch (fallbackError) {
      throw makeError(xselError, fallbackError);
    }
  }
};

module.exports = {
  copy: function copy(options) {
    return regeneratorRuntime.async(function copy$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(xselWithFallback(copyArguments, options));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    });
  },
  copySync: function copySync(options) {
    xselWithFallbackSync(copyArguments, options);
  },
  paste: function paste(options) {
    return xselWithFallback(pasteArguments, options);
  },
  pasteSync: function pasteSync(options) {
    return xselWithFallbackSync(pasteArguments, options);
  }
};