'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var execa = require('execa');

var env = _objectSpread({}, process.env, {
  LC_CTYPE: 'UTF-8'
});

module.exports = {
  copy: function copy(options) {
    return regeneratorRuntime.async(function copy$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", execa('pbcopy', _objectSpread({}, options, {
              env: env
            })));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    });
  },
  paste: function paste(options) {
    return regeneratorRuntime.async(function paste$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", execa.stdout('pbpaste', _objectSpread({}, options, {
              env: env
            })));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    });
  },
  copySync: function copySync(options) {
    return execa.sync('pbcopy', _objectSpread({}, options, {
      env: env
    }));
  },
  pasteSync: function pasteSync(options) {
    return execa.sync('pbpaste', _objectSpread({}, options, {
      env: env
    }));
  }
};