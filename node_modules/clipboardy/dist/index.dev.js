'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isWSL = require('is-wsl');

var termux = require('./lib/termux.js');

var linux = require('./lib/linux.js');

var macos = require('./lib/macos.js');

var windows = require('./lib/windows.js');

var platformLib = function () {
  switch (process.platform) {
    case 'darwin':
      return macos;

    case 'win32':
      return windows;

    case 'android':
      if (process.env.PREFIX !== '/data/data/com.termux/files/usr') {
        throw new Error('You need to install Termux for this module to work on Android: https://termux.com');
      }

      return termux;

    default:
      // `process.platform === 'linux'` for WSL.
      if (isWSL) {
        return windows;
      }

      return linux;
  }
}();

exports.write = function _callee(text) {
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(typeof text !== 'string')) {
            _context.next = 2;
            break;
          }

          throw new TypeError("Expected a string, got ".concat(_typeof(text)));

        case 2:
          _context.next = 4;
          return regeneratorRuntime.awrap(platformLib.copy({
            input: text
          }));

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
};

exports.read = function _callee2() {
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt("return", platformLib.paste({
            stripEof: false
          }));

        case 1:
        case "end":
          return _context2.stop();
      }
    }
  });
};

exports.writeSync = function (text) {
  if (typeof text !== 'string') {
    throw new TypeError("Expected a string, got ".concat(_typeof(text)));
  }

  platformLib.copySync({
    input: text
  });
};

exports.readSync = function () {
  return platformLib.pasteSync({
    stripEof: false
  }).stdout;
};