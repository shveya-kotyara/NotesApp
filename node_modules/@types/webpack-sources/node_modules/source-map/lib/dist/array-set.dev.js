"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* -*- Mode: js; js-indent-level: 2; -*- */

/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
var ArraySet =
/*#__PURE__*/
function () {
  function ArraySet() {
    _classCallCheck(this, ArraySet);

    this._array = [];
    this._set = new Map();
  }
  /**
   * Static method for creating ArraySet instances from an existing array.
   */


  _createClass(ArraySet, [{
    key: "size",

    /**
     * Return how many unique items are in this ArraySet. If duplicates have been
     * added, than those do not count towards the size.
     *
     * @returns Number
     */
    value: function size() {
      return this._set.size;
    }
    /**
     * Add the given string to this set.
     *
     * @param String aStr
     */

  }, {
    key: "add",
    value: function add(aStr, aAllowDuplicates) {
      var isDuplicate = this.has(aStr);
      var idx = this._array.length;

      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }

      if (!isDuplicate) {
        this._set.set(aStr, idx);
      }
    }
    /**
     * Is the given string a member of this set?
     *
     * @param String aStr
     */

  }, {
    key: "has",
    value: function has(aStr) {
      return this._set.has(aStr);
    }
    /**
     * What is the index of the given string in the array?
     *
     * @param String aStr
     */

  }, {
    key: "indexOf",
    value: function indexOf(aStr) {
      var idx = this._set.get(aStr);

      if (idx >= 0) {
        return idx;
      }

      throw new Error('"' + aStr + '" is not in the set.');
    }
    /**
     * What is the element at the given index?
     *
     * @param Number aIdx
     */

  }, {
    key: "at",
    value: function at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }

      throw new Error("No element indexed by " + aIdx);
    }
    /**
     * Returns the array representation of this set (which has the proper indices
     * indicated by indexOf). Note that this is a copy of the internal array used
     * for storing the members so that no one can mess with internal state.
     */

  }, {
    key: "toArray",
    value: function toArray() {
      return this._array.slice();
    }
  }], [{
    key: "fromArray",
    value: function fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();

      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }

      return set;
    }
  }]);

  return ArraySet;
}();

exports.ArraySet = ArraySet;