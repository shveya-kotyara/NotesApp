"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require("path");

var PnpWebpackPlugin = require("./index");

function makeResolver(resolverPlugins) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _require = require('enhanced-resolve'),
      NodeJsInputFileSystem = _require.NodeJsInputFileSystem,
      CachedInputFileSystem = _require.CachedInputFileSystem,
      ResolverFactory = _require.ResolverFactory;

  var resolver = ResolverFactory.createResolver(_objectSpread({
    fileSystem: new CachedInputFileSystem(new NodeJsInputFileSystem(), 4000),
    extensions: ['.js', '.json']
  }, options));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = resolverPlugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var apply = _step.value.apply;
      apply(resolver);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return resolver;
}

function makeRequest(resolver, request, issuer) {
  return new Promise(function (resolve, reject) {
    resolver.resolve({}, issuer, request, {}, function (err, filepath) {
      if (err) {
        reject(err);
      } else {
        resolve(filepath);
      }
    });
  });
}

describe("Regular Plugin", function () {
  it("should correctly resolve a relative require", function _callee() {
    var resolver, resolution;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            resolver = makeResolver([PnpWebpackPlugin]);
            _context.next = 3;
            return regeneratorRuntime.awrap(makeRequest(resolver, "./index.js", __dirname));

          case 3:
            resolution = _context.sent;
            expect(resolution).toEqual(path.normalize("".concat(__dirname, "/index.js")));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it("shouldn't prevent the 'extensions' option from working", function _callee2() {
    var resolver, resolution;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            resolver = makeResolver([PnpWebpackPlugin]);
            _context2.next = 3;
            return regeneratorRuntime.awrap(makeRequest(resolver, "./index", __dirname));

          case 3:
            resolution = _context2.sent;
            expect(resolution).toEqual(path.normalize("".concat(__dirname, "/index.js")));

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it("shouldn't prevent the 'alias' option from working", function _callee3() {
    var resolver, resolution;
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            resolver = makeResolver([PnpWebpackPlugin], {
              alias: _defineProperty({}, "foo", "./fixtures/index.js")
            });
            _context3.next = 3;
            return regeneratorRuntime.awrap(makeRequest(resolver, "foo", __dirname));

          case 3:
            resolution = _context3.sent;
            expect(resolution).toEqual(path.normalize("".concat(__dirname, "/fixtures/index.js")));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it("shouldn't prevent the 'modules' option from working", function _callee4() {
    var resolver, resolution;
    return regeneratorRuntime.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            resolver = makeResolver([PnpWebpackPlugin], {
              modules: ["./fixtures"]
            });
            _context4.next = 3;
            return regeneratorRuntime.awrap(makeRequest(resolver, "file", __dirname));

          case 3:
            resolution = _context4.sent;
            expect(resolution).toEqual(path.normalize("".concat(__dirname, "/fixtures/file.js")));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
});