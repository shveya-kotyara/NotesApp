'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var req = require('import-cwd');
/**
 * Plugin Loader
 *
 * @private
 * @method load
 *
 * @param  {String} plugin PostCSS Plugin Name
 * @param  {Object} options PostCSS Plugin Options
 *
 * @return {Function} PostCSS Plugin
 */


var load = function load(plugin, options, file) {
  try {
    if (options === null || options === undefined || Object.keys(options).length === 0) {
      return req(plugin);
    } else {
      return req(plugin)(options);
    }
  } catch (err) {
    throw new Error("Loading PostCSS Plugin failed: ".concat(err.message, "\n\n(@").concat(file, ")"));
  }
};
/**
 * Load Plugins
 *
 * @private
 * @method plugins
 *
 * @param {Object} config PostCSS Config Plugins
 *
 * @return {Array} plugins PostCSS Plugins
 */


var plugins = function plugins(config, file) {
  var plugins = [];

  if (Array.isArray(config.plugins)) {
    plugins = config.plugins.filter(Boolean);
  } else {
    plugins = Object.keys(config.plugins).filter(function (plugin) {
      return config.plugins[plugin] !== false ? plugin : '';
    }).map(function (plugin) {
      return load(plugin, config.plugins[plugin], file);
    });
  }

  if (plugins.length && plugins.length > 0) {
    plugins.forEach(function (plugin, i) {
      if (plugin["default"]) {
        plugin = plugin["default"];
      }

      if (plugin.postcss === true) {
        plugin = plugin();
      } else if (plugin.postcss) {
        plugin = plugin.postcss;
      }

      if ( // eslint-disable-next-line
      !(_typeof(plugin) === 'object' && Array.isArray(plugin.plugins) || _typeof(plugin) === 'object' && plugin.postcssPlugin || typeof plugin === 'function')) {
        throw new TypeError("Invalid PostCSS Plugin found at: plugins[".concat(i, "]\n\n(@").concat(file, ")"));
      }
    });
  }

  return plugins;
};

module.exports = plugins;