"use strict";

var _addStylesClient = _interopRequireDefault(require("../lib/addStylesClient"));

var _addStylesServer = _interopRequireDefault(require("../lib/addStylesServer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var mockedList = [[1, 'h1 { color: red; }', ''], [1, 'p { color: green; }', ''], [2, 'span { color: blue; }', ''], [2, 'span { color: blue; }', 'print']];
test('addStylesClient (dev)', function () {
  var update = (0, _addStylesClient["default"])('foo', mockedList, false);
  assertStylesMatch(mockedList);
  var mockedList2 = mockedList.slice(1, 3);
  update(mockedList2);
  assertStylesMatch(mockedList2);
  update();
  expect(document.querySelectorAll('style').length).toBe(0);
});
test('addStylesClient (prod)', function () {
  var update = (0, _addStylesClient["default"])('foo', mockedList, true);
  assertStylesMatch(mockedList);
  var mockedList2 = mockedList.slice(2);
  update(mockedList2);
  assertStylesMatch(mockedList2);
  update();
  expect(document.querySelectorAll('style').length).toBe(0);
});
test('addStylesClient (dev + ssr)', function () {
  mockSSRTags(mockedList, 'foo');
  var update = (0, _addStylesClient["default"])('foo', mockedList, false);
  assertStylesMatch(mockedList);
  update();
  expect(document.querySelectorAll('style').length).toBe(0);
});
test('addStylesClient (prod + ssr)', function () {
  mockProdSSRTags(mockedList, 'foo');
  var update = (0, _addStylesClient["default"])('foo', mockedList, true);
  expect(document.querySelectorAll('style').length).toBe(1);
});
test('addStylesServer (dev)', function () {
  var context = global.__VUE_SSR_CONTEXT__ = {};
  (0, _addStylesServer["default"])('foo', mockedList, false);
  expect(context.styles).toBe("<style data-vue-ssr-id=\"foo:0\">h1 { color: red; }</style>" + "<style data-vue-ssr-id=\"foo:1\">p { color: green; }</style>" + "<style data-vue-ssr-id=\"foo:2\">span { color: blue; }</style>" + "<style data-vue-ssr-id=\"foo:3\" media=\"print\">span { color: blue; }</style>");
});
test('addStylesServer (prod)', function () {
  var context = global.__VUE_SSR_CONTEXT__ = {};
  (0, _addStylesServer["default"])('foo', mockedList, true);
  expect(context.styles).toBe("<style data-vue-ssr-id=\"foo:0 foo:1 foo:2\">" + "h1 { color: red; }\np { color: green; }\nspan { color: blue; }" + "</style>" + "<style data-vue-ssr-id=\"foo:3\" media=\"print\">span { color: blue; }</style>");
}); // --- helpers ---

function assertStylesMatch(list) {
  var styles = document.querySelectorAll('style');
  expect(styles.length).toBe(list.length);
  [].forEach.call(styles, function (style, i) {
    expect(style.textContent.indexOf(list[i][1]) > -1).toBe(true);
  });
}

function mockSSRTags(list, parentId) {
  list.forEach(function (item, i) {
    var style = document.createElement('style');
    style.setAttribute('data-vue-ssr-id', "".concat(parentId, ":").concat(i));
    style.textContent = item[1];

    if (item[2]) {
      style.setAttribute('media', item[2]);
    }

    document.head.appendChild(style);
  });
}

function mockProdSSRTags(list, parentId) {
  var style = document.createElement('style');
  style.setAttribute('data-vue-ssr-id', list.map(function (item, i) {
    return "".concat(parentId, ":").concat(i);
  }).join(' '));
  style.textContent = list.map(function (item) {
    return item[1];
  }).join('\n');
  document.head.appendChild(style);
}