"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright 2014 Simon Lydell
// X11 (“MIT”) Licensed. (See LICENSE.)
var path = require("path");

var assert = require("assert");

var urix = require("../");

"use stict";

function test(testPath, expected) {
  path.sep = "\\";
  assert.equal(urix(testPath), expected);
  path.sep = "/";
  assert.equal(urix(testPath), testPath);
}

describe("urix", function () {
  it("is a function", function () {
    assert.equal(_typeof(urix), "function");
  });
  it("converts backslashes to slashes", function () {
    test("a\\b\\c", "a/b/c");
    test("\\a\\b\\c", "/a/b/c");
    test("a/b\\c", "a/b/c");
    test("\\\\a\\\\\\b///c", "//a///b///c");
  });
  it("changes the drive letter to a slash", function () {
    test("c:\\a", "/a");
    test("C:\\a", "/a");
    test("z:\\a", "/a");
    test("c:a", "/a");
    test("c:/a", "/a");
    test("c:\\\\a", "//a");
    test("c://a", "//a");
    test("c:\\//a", "///a");
  });
});