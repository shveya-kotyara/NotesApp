"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _path = _interopRequireDefault(require("path"));

var _schemaUtils = require("schema-utils");

var _loaderUtils = require("loader-utils");

var _options = _interopRequireDefault(require("./options.json"));

var _utils = require("./utils");

var _SassError = _interopRequireDefault(require("./SassError"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/**
 * The sass-loader makes node-sass and dart-sass available to webpack modules.
 *
 * @this {object}
 * @param {string} content
 */


function loader(content) {
  var _this = this;

  var options, callback, implementation, useSourceMap, sassOptions, shouldUseWebpackImporter, includePaths, render;
  return regeneratorRuntime.async(function loader$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = (0, _loaderUtils.getOptions)(this);
          (0, _schemaUtils.validate)(_options["default"], options, {
            name: "Sass Loader",
            baseDataPath: "options"
          });
          callback = this.async();
          implementation = (0, _utils.getSassImplementation)(this, options.implementation);

          if (implementation) {
            _context.next = 7;
            break;
          }

          callback();
          return _context.abrupt("return");

        case 7:
          useSourceMap = typeof options.sourceMap === "boolean" ? options.sourceMap : this.sourceMap;
          _context.next = 10;
          return regeneratorRuntime.awrap((0, _utils.getSassOptions)(this, options, content, implementation, useSourceMap));

        case 10:
          sassOptions = _context.sent;
          shouldUseWebpackImporter = typeof options.webpackImporter === "boolean" ? options.webpackImporter : true;

          if (shouldUseWebpackImporter) {
            includePaths = sassOptions.includePaths;
            sassOptions.importer.push((0, _utils.getWebpackImporter)(this, implementation, includePaths));
          }

          render = (0, _utils.getRenderFunctionFromSassImplementation)(implementation);
          render(sassOptions, function (error, result) {
            if (error) {
              // There are situations when the `file` property do not exist
              if (error.file) {
                // `node-sass` returns POSIX paths
                _this.addDependency(_path["default"].normalize(error.file));
              }

              callback(new _SassError["default"](error));
              return;
            }

            var map = result.map ? JSON.parse(result.map) : null; // Modify source paths only for webpack, otherwise we do nothing

            if (map && useSourceMap) {
              map = (0, _utils.normalizeSourceMap)(map, _this.rootContext);
            }

            result.stats.includedFiles.forEach(function (includedFile) {
              _this.addDependency(_path["default"].normalize(includedFile));
            });
            callback(null, result.css.toString(), map);
          });

        case 15:
        case "end":
          return _context.stop();
      }
    }
  }, null, this);
}

var _default = loader;
exports["default"] = _default;