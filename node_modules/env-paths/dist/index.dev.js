'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var path = require('path');

var os = require('os');

var homedir = os.homedir();
var tmpdir = os.tmpdir();
var _process = process,
    env = _process.env;

var macos = function macos(name) {
  var library = path.join(homedir, 'Library');
  return {
    data: path.join(library, 'Application Support', name),
    config: path.join(library, 'Preferences', name),
    cache: path.join(library, 'Caches', name),
    log: path.join(library, 'Logs', name),
    temp: path.join(tmpdir, name)
  };
};

var windows = function windows(name) {
  var appData = env.APPDATA || path.join(homedir, 'AppData', 'Roaming');
  var localAppData = env.LOCALAPPDATA || path.join(homedir, 'AppData', 'Local');
  return {
    // Data/config/cache/log are invented by me as Windows isn't opinionated about this
    data: path.join(localAppData, name, 'Data'),
    config: path.join(appData, name, 'Config'),
    cache: path.join(localAppData, name, 'Cache'),
    log: path.join(localAppData, name, 'Log'),
    temp: path.join(tmpdir, name)
  };
}; // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html


var linux = function linux(name) {
  var username = path.basename(homedir);
  return {
    data: path.join(env.XDG_DATA_HOME || path.join(homedir, '.local', 'share'), name),
    config: path.join(env.XDG_CONFIG_HOME || path.join(homedir, '.config'), name),
    cache: path.join(env.XDG_CACHE_HOME || path.join(homedir, '.cache'), name),
    // https://wiki.debian.org/XDGBaseDirectorySpecification#state
    log: path.join(env.XDG_STATE_HOME || path.join(homedir, '.local', 'state'), name),
    temp: path.join(tmpdir, username, name)
  };
};

var envPaths = function envPaths(name, options) {
  if (typeof name !== 'string') {
    throw new TypeError("Expected string, got ".concat(_typeof(name)));
  }

  options = Object.assign({
    suffix: 'nodejs'
  }, options);

  if (options.suffix) {
    // Add suffix to prevent possible conflict with native apps
    name += "-".concat(options.suffix);
  }

  if (process.platform === 'darwin') {
    return macos(name);
  }

  if (process.platform === 'win32') {
    return windows(name);
  }

  return linux(name);
};

module.exports = envPaths; // TODO: Remove this for the next major release

module.exports["default"] = envPaths;