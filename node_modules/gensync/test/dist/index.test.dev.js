"use strict";

var promisify = require("util.promisify");

var gensync = require("../");

var TEST_ERROR = new Error("TEST_ERROR");
var DID_ERROR = new Error("DID_ERROR");
var doSuccess = gensync({
  sync: function sync() {
    return 42;
  },
  async: function async() {
    return Promise.resolve(42);
  }
});
var doError = gensync({
  sync: function sync() {
    throw DID_ERROR;
  },
  async: function async() {
    return Promise.reject(DID_ERROR);
  }
});

function throwTestError() {
  throw TEST_ERROR;
}

function expectResult(fn, arg, _ref) {
  var error, value, _ref$expectSync, expectSync, _ref$syncErrback, syncErrback;

  return regeneratorRuntime.async(function expectResult$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          error = _ref.error, value = _ref.value, _ref$expectSync = _ref.expectSync, expectSync = _ref$expectSync === void 0 ? false : _ref$expectSync, _ref$syncErrback = _ref.syncErrback, syncErrback = _ref$syncErrback === void 0 ? expectSync : _ref$syncErrback;

          if (!expectSync) {
            expect(function () {
              return fn.sync(arg);
            }).toThrow(TEST_ERROR);
          } else if (error) {
            expect(function () {
              return fn.sync(arg);
            }).toThrow(error);
          } else {
            expect(fn.sync(arg)).toBe(value);
          }

          if (!error) {
            _context.next = 7;
            break;
          }

          _context.next = 5;
          return regeneratorRuntime.awrap(expect(fn.async(arg)).rejects.toBe(error));

        case 5:
          _context.next = 9;
          break;

        case 7:
          _context.next = 9;
          return regeneratorRuntime.awrap(expect(fn.async(arg)).resolves.toBe(value));

        case 9:
          _context.next = 11;
          return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
            var sync = true;
            fn.errback(arg, function (err, val) {
              try {
                expect(err).toBe(error);
                expect(val).toBe(value);
                expect(sync).toBe(syncErrback);
                resolve();
              } catch (e) {
                reject(e);
              }
            });
            sync = false;
          }));

        case 11:
        case "end":
          return _context.stop();
      }
    }
  });
}

describe("gensync({})", function () {
  describe("option validation", function () {
    test("disallow async and errback handler together", function () {
      try {
        gensync({
          sync: throwTestError,
          async: throwTestError,
          errback: throwTestError
        });
        throwTestError();
      } catch (err) {
        expect(err.message).toMatch(/Expected one of either opts.async or opts.errback, but got _both_\./);
        expect(err.code).toBe("GENSYNC_OPTIONS_ERROR");
      }
    });
    test("disallow missing sync handler", function () {
      try {
        gensync({
          async: throwTestError
        });
        throwTestError();
      } catch (err) {
        expect(err.message).toMatch(/Expected opts.sync to be a function./);
        expect(err.code).toBe("GENSYNC_OPTIONS_ERROR");
      }
    });
    test("errback callback required", function () {
      var fn = gensync({
        sync: throwTestError,
        async: throwTestError
      });

      try {
        fn.errback();
        throwTestError();
      } catch (err) {
        expect(err.message).toMatch(/function called without callback/);
        expect(err.code).toBe("GENSYNC_ERRBACK_NO_CALLBACK");
      }
    });
  });
  describe("generator function metadata", function () {
    test("automatic naming", function () {
      expect(gensync({
        sync: function readFileSync() {},
        async: function async() {}
      }).name).toBe("readFile");
      expect(gensync({
        sync: function readFile() {},
        async: function async() {}
      }).name).toBe("readFile");
      expect(gensync({
        sync: function readFileAsync() {},
        async: function async() {}
      }).name).toBe("readFileAsync");
      expect(gensync({
        sync: function sync() {},
        async: function readFileSync() {}
      }).name).toBe("readFileSync");
      expect(gensync({
        sync: function sync() {},
        async: function readFile() {}
      }).name).toBe("readFile");
      expect(gensync({
        sync: function sync() {},
        async: function readFileAsync() {}
      }).name).toBe("readFile");
      expect(gensync({
        sync: function sync() {},
        errback: function readFileSync() {}
      }).name).toBe("readFileSync");
      expect(gensync({
        sync: function sync() {},
        errback: function readFile() {}
      }).name).toBe("readFile");
      expect(gensync({
        sync: function sync() {},
        errback: function readFileAsync() {}
      }).name).toBe("readFileAsync");
    });
    test("explicit naming", function () {
      expect(gensync({
        name: "readFile",
        sync: function sync() {},
        async: function async() {}
      }).name).toBe("readFile");
    });
    test("default arity", function () {
      expect(gensync({
        sync: function sync(a, b, c, d, e, f, g) {
          throwTestError();
        },
        async: throwTestError
      }).length).toBe(7);
    });
    test("explicit arity", function () {
      expect(gensync({
        arity: 3,
        sync: throwTestError,
        async: throwTestError
      }).length).toBe(3);
    });
  });
  describe("'sync' handler", function _callee3() {
    return regeneratorRuntime.async(function _callee3$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            test("success", function _callee() {
              var fn;
              return regeneratorRuntime.async(function _callee$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      fn = gensync({
                        sync: function sync() {
                          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                          }

                          return JSON.stringify(args);
                        }
                      });
                      _context2.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        value: "[42]",
                        expectSync: true
                      }));

                    case 3:
                    case "end":
                      return _context2.stop();
                  }
                }
              });
            });
            test("failure", function _callee2() {
              var fn;
              return regeneratorRuntime.async(function _callee2$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      fn = gensync({
                        sync: function sync() {
                          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            args[_key2] = arguments[_key2];
                          }

                          throw JSON.stringify(args);
                        }
                      });
                      _context3.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        error: "[42]",
                        expectSync: true
                      }));

                    case 3:
                    case "end":
                      return _context3.stop();
                  }
                }
              });
            });

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  describe("'async' handler", function _callee6() {
    return regeneratorRuntime.async(function _callee6$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            test("success", function _callee4() {
              var fn;
              return regeneratorRuntime.async(function _callee4$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      fn = gensync({
                        sync: throwTestError,
                        async: function async() {
                          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                            args[_key3] = arguments[_key3];
                          }

                          return Promise.resolve(JSON.stringify(args));
                        }
                      });
                      _context5.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        value: "[42]"
                      }));

                    case 3:
                    case "end":
                      return _context5.stop();
                  }
                }
              });
            });
            test("failure", function _callee5() {
              var fn;
              return regeneratorRuntime.async(function _callee5$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      fn = gensync({
                        sync: throwTestError,
                        async: function async() {
                          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            args[_key4] = arguments[_key4];
                          }

                          return Promise.reject(JSON.stringify(args));
                        }
                      });
                      _context6.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        error: "[42]"
                      }));

                    case 3:
                    case "end":
                      return _context6.stop();
                  }
                }
              });
            });

          case 2:
          case "end":
            return _context7.stop();
        }
      }
    });
  });
  describe("'errback' sync handler", function _callee9() {
    return regeneratorRuntime.async(function _callee9$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            test("success", function _callee7() {
              var fn;
              return regeneratorRuntime.async(function _callee7$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      fn = gensync({
                        sync: throwTestError,
                        errback: function errback() {
                          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                            args[_key5] = arguments[_key5];
                          }

                          return args.pop()(null, JSON.stringify(args));
                        }
                      });
                      _context8.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        value: "[42]",
                        syncErrback: true
                      }));

                    case 3:
                    case "end":
                      return _context8.stop();
                  }
                }
              });
            });
            test("failure", function _callee8() {
              var fn;
              return regeneratorRuntime.async(function _callee8$(_context9) {
                while (1) {
                  switch (_context9.prev = _context9.next) {
                    case 0:
                      fn = gensync({
                        sync: throwTestError,
                        errback: function errback() {
                          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                            args[_key6] = arguments[_key6];
                          }

                          return args.pop()(JSON.stringify(args));
                        }
                      });
                      _context9.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        error: "[42]",
                        syncErrback: true
                      }));

                    case 3:
                    case "end":
                      return _context9.stop();
                  }
                }
              });
            });

          case 2:
          case "end":
            return _context10.stop();
        }
      }
    });
  });
  describe("'errback' async handler", function _callee12() {
    return regeneratorRuntime.async(function _callee12$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            test("success", function _callee10() {
              var fn;
              return regeneratorRuntime.async(function _callee10$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      fn = gensync({
                        sync: throwTestError,
                        errback: function errback() {
                          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                            args[_key7] = arguments[_key7];
                          }

                          return process.nextTick(function () {
                            return args.pop()(null, JSON.stringify(args));
                          });
                        }
                      });
                      _context11.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        value: "[42]"
                      }));

                    case 3:
                    case "end":
                      return _context11.stop();
                  }
                }
              });
            });
            test("failure", function _callee11() {
              var fn;
              return regeneratorRuntime.async(function _callee11$(_context12) {
                while (1) {
                  switch (_context12.prev = _context12.next) {
                    case 0:
                      fn = gensync({
                        sync: throwTestError,
                        errback: function errback() {
                          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                            args[_key8] = arguments[_key8];
                          }

                          return process.nextTick(function () {
                            return args.pop()(JSON.stringify(args));
                          });
                        }
                      });
                      _context12.next = 3;
                      return regeneratorRuntime.awrap(expectResult(fn, 42, {
                        error: "[42]"
                      }));

                    case 3:
                    case "end":
                      return _context12.stop();
                  }
                }
              });
            });

          case 2:
          case "end":
            return _context13.stop();
        }
      }
    });
  });
});
describe("gensync(function* () {})", function () {
  test("sync throw before body", function _callee14() {
    var fn;
    return regeneratorRuntime.async(function _callee14$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee13() {
              var arg,
                  _args14 = arguments;
              return regeneratorRuntime.wrap(function _callee13$(_context14) {
                while (1) {
                  switch (_context14.prev = _context14.next) {
                    case 0:
                      arg = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : throwTestError();

                    case 1:
                    case "end":
                      return _context14.stop();
                  }
                }
              }, _callee13);
            }));
            _context15.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              error: TEST_ERROR,
              syncErrback: true
            }));

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    });
  });
  test("sync throw inside body", function _callee16() {
    var fn;
    return regeneratorRuntime.async(function _callee16$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee15() {
              return regeneratorRuntime.wrap(function _callee15$(_context16) {
                while (1) {
                  switch (_context16.prev = _context16.next) {
                    case 0:
                      throwTestError();

                    case 1:
                    case "end":
                      return _context16.stop();
                  }
                }
              }, _callee15);
            }));
            _context17.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              error: TEST_ERROR,
              syncErrback: true
            }));

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    });
  });
  test("async throw inside body", function _callee18() {
    var fn;
    return regeneratorRuntime.async(function _callee18$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee17() {
              var val;
              return regeneratorRuntime.wrap(function _callee17$(_context18) {
                while (1) {
                  switch (_context18.prev = _context18.next) {
                    case 0:
                      return _context18.delegateYield(doSuccess(), "t0", 1);

                    case 1:
                      val = _context18.t0;
                      throwTestError();

                    case 3:
                    case "end":
                      return _context18.stop();
                  }
                }
              }, _callee17);
            }));
            _context19.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              error: TEST_ERROR
            }));

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    });
  });
  test("error inside body", function _callee20() {
    var fn;
    return regeneratorRuntime.async(function _callee20$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee19() {
              return regeneratorRuntime.wrap(function _callee19$(_context20) {
                while (1) {
                  switch (_context20.prev = _context20.next) {
                    case 0:
                      return _context20.delegateYield(doError(), "t0", 1);

                    case 1:
                    case "end":
                      return _context20.stop();
                  }
                }
              }, _callee19);
            }));
            _context21.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              error: DID_ERROR,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    });
  });
  test("successful return value", function _callee22() {
    var fn;
    return regeneratorRuntime.async(function _callee22$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee21() {
              var value;
              return regeneratorRuntime.wrap(function _callee21$(_context22) {
                while (1) {
                  switch (_context22.prev = _context22.next) {
                    case 0:
                      return _context22.delegateYield(doSuccess(), "t0", 1);

                    case 1:
                      value = _context22.t0;
                      expect(value).toBe(42);
                      return _context22.abrupt("return", 84);

                    case 4:
                    case "end":
                      return _context22.stop();
                  }
                }
              }, _callee21);
            }));
            _context23.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              value: 84,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    });
  });
  test("successful final value", function _callee24() {
    var fn;
    return regeneratorRuntime.async(function _callee24$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee23() {
              return regeneratorRuntime.wrap(function _callee23$(_context24) {
                while (1) {
                  switch (_context24.prev = _context24.next) {
                    case 0:
                      return _context24.abrupt("return", 42);

                    case 1:
                    case "end":
                      return _context24.stop();
                  }
                }
              }, _callee23);
            }));
            _context25.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              value: 42,
              expectSync: true
            }));

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    });
  });
  test("yield unexpected object", function _callee26() {
    var fn;
    return regeneratorRuntime.async(function _callee26$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee25() {
              return regeneratorRuntime.wrap(function _callee25$(_context26) {
                while (1) {
                  switch (_context26.prev = _context26.next) {
                    case 0:
                      _context26.next = 2;
                      return {};

                    case 2:
                    case "end":
                      return _context26.stop();
                  }
                }
              }, _callee25);
            }));
            _context27.prev = 1;
            _context27.next = 4;
            return regeneratorRuntime.awrap(fn.async());

          case 4:
            throwTestError();
            _context27.next = 11;
            break;

          case 7:
            _context27.prev = 7;
            _context27.t0 = _context27["catch"](1);
            expect(_context27.t0.message).toMatch(/Got unexpected yielded value in gensync generator/);
            expect(_context27.t0.code).toBe("GENSYNC_EXPECTED_START");

          case 11:
          case "end":
            return _context27.stop();
        }
      }
    }, null, null, [[1, 7]]);
  });
  test("yield suspend yield", function _callee28() {
    var fn;
    return regeneratorRuntime.async(function _callee28$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee27() {
              return regeneratorRuntime.wrap(function _callee27$(_context28) {
                while (1) {
                  switch (_context28.prev = _context28.next) {
                    case 0:
                      _context28.next = 2;
                      return Symbol["for"]("gensync:v1:start");

                    case 2:
                      _context28.next = 4;
                      return {};

                    case 4:
                    case "end":
                      return _context28.stop();
                  }
                }
              }, _callee27);
            }));
            _context29.prev = 1;
            _context29.next = 4;
            return regeneratorRuntime.awrap(fn.async());

          case 4:
            throwTestError();
            _context29.next = 11;
            break;

          case 7:
            _context29.prev = 7;
            _context29.t0 = _context29["catch"](1);
            expect(_context29.t0.message).toMatch(/Expected GENSYNC_SUSPEND, got {}/);
            expect(_context29.t0.code).toBe("GENSYNC_EXPECTED_SUSPEND");

          case 11:
          case "end":
            return _context29.stop();
        }
      }
    }, null, null, [[1, 7]]);
  });
  test("yield suspend return", function _callee30() {
    var fn;
    return regeneratorRuntime.async(function _callee30$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee29() {
              return regeneratorRuntime.wrap(function _callee29$(_context30) {
                while (1) {
                  switch (_context30.prev = _context30.next) {
                    case 0:
                      _context30.next = 2;
                      return Symbol["for"]("gensync:v1:start");

                    case 2:
                      return _context30.abrupt("return", {});

                    case 3:
                    case "end":
                      return _context30.stop();
                  }
                }
              }, _callee29);
            }));
            _context31.prev = 1;
            _context31.next = 4;
            return regeneratorRuntime.awrap(fn.async());

          case 4:
            throwTestError();
            _context31.next = 11;
            break;

          case 7:
            _context31.prev = 7;
            _context31.t0 = _context31["catch"](1);
            expect(_context31.t0.message).toMatch(/Unexpected generator completion/);
            expect(_context31.t0.code).toBe("GENSYNC_EXPECTED_SUSPEND");

          case 11:
          case "end":
            return _context31.stop();
        }
      }
    }, null, null, [[1, 7]]);
  });
});
describe("gensync.all()", function () {
  test("success", function _callee32() {
    var fn;
    return regeneratorRuntime.async(function _callee32$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee31() {
              var result;
              return regeneratorRuntime.wrap(function _callee31$(_context32) {
                while (1) {
                  switch (_context32.prev = _context32.next) {
                    case 0:
                      return _context32.delegateYield(gensync.all([doSuccess(), doSuccess()]), "t0", 1);

                    case 1:
                      result = _context32.t0;
                      expect(result).toEqual([42, 42]);

                    case 3:
                    case "end":
                      return _context32.stop();
                  }
                }
              }, _callee31);
            }));
            _context33.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              value: undefined,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    });
  });
  test("error first", function _callee34() {
    var fn;
    return regeneratorRuntime.async(function _callee34$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee33() {
              return regeneratorRuntime.wrap(function _callee33$(_context34) {
                while (1) {
                  switch (_context34.prev = _context34.next) {
                    case 0:
                      return _context34.delegateYield(gensync.all([doError(), doSuccess()]), "t0", 1);

                    case 1:
                    case "end":
                      return _context34.stop();
                  }
                }
              }, _callee33);
            }));
            _context35.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              error: DID_ERROR,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    });
  });
  test("error last", function _callee36() {
    var fn;
    return regeneratorRuntime.async(function _callee36$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee35() {
              return regeneratorRuntime.wrap(function _callee35$(_context36) {
                while (1) {
                  switch (_context36.prev = _context36.next) {
                    case 0:
                      return _context36.delegateYield(gensync.all([doSuccess(), doError()]), "t0", 1);

                    case 1:
                    case "end":
                      return _context36.stop();
                  }
                }
              }, _callee35);
            }));
            _context37.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              error: DID_ERROR,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    });
  });
  test("empty list", function _callee38() {
    var fn;
    return regeneratorRuntime.async(function _callee38$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee37() {
              return regeneratorRuntime.wrap(function _callee37$(_context38) {
                while (1) {
                  switch (_context38.prev = _context38.next) {
                    case 0:
                      return _context38.delegateYield(gensync.all([]), "t0", 1);

                    case 1:
                    case "end":
                      return _context38.stop();
                  }
                }
              }, _callee37);
            }));
            _context39.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              value: undefined,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    });
  });
});
describe("gensync.race()", function () {
  test("success", function _callee40() {
    var fn;
    return regeneratorRuntime.async(function _callee40$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee39() {
              var result;
              return regeneratorRuntime.wrap(function _callee39$(_context40) {
                while (1) {
                  switch (_context40.prev = _context40.next) {
                    case 0:
                      return _context40.delegateYield(gensync.race([doSuccess(), doError()]), "t0", 1);

                    case 1:
                      result = _context40.t0;
                      expect(result).toEqual(42);

                    case 3:
                    case "end":
                      return _context40.stop();
                  }
                }
              }, _callee39);
            }));
            _context41.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              value: undefined,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context41.stop();
        }
      }
    });
  });
  test("error", function _callee42() {
    var fn;
    return regeneratorRuntime.async(function _callee42$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            fn = gensync(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee41() {
              return regeneratorRuntime.wrap(function _callee41$(_context42) {
                while (1) {
                  switch (_context42.prev = _context42.next) {
                    case 0:
                      return _context42.delegateYield(gensync.race([doError(), doSuccess()]), "t0", 1);

                    case 1:
                    case "end":
                      return _context42.stop();
                  }
                }
              }, _callee41);
            }));
            _context43.next = 3;
            return regeneratorRuntime.awrap(expectResult(fn, undefined, {
              error: DID_ERROR,
              expectSync: true,
              syncErrback: false
            }));

          case 3:
          case "end":
            return _context43.stop();
        }
      }
    });
  });
});