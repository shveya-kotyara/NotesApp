'use strict';
/* global window: true */

/* eslint-disable
  no-shadow,
  no-param-reassign,
  space-before-function-paren
*/

var LogLevel = require('./LogLevel');

var MethodFactory = require('./MethodFactory');

var PrefixFactory = require('./PrefixFactory');

var defaultLogger = new LogLevel({
  name: 'default'
});
var cache = {
  "default": defaultLogger
}; // Grab the current global log variable in case of overwrite

var existing = typeof window !== 'undefined' ? window.log : null;
var loglevel = Object.assign(defaultLogger, {
  get factories() {
    return {
      MethodFactory: MethodFactory,
      PrefixFactory: PrefixFactory
    };
  },

  get loggers() {
    return cache;
  },

  getLogger: function getLogger(options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }

    if (!options.id) {
      options.id = options.name;
    }

    var _options = options,
        name = _options.name,
        id = _options.id;
    var defaults = {
      level: defaultLogger.level
    };

    if (typeof name !== 'string' || !name || !name.length) {
      throw new TypeError('You must supply a name when creating a logger');
    }

    var logger = cache[id];

    if (!logger) {
      logger = new LogLevel(Object.assign({}, defaults, options));
      cache[id] = logger;
    }

    return logger;
  },
  noConflict: function noConflict() {
    if (typeof window !== 'undefined' && window.log === defaultLogger) {
      window.log = existing;
    }

    return defaultLogger;
  }
});
module.exports = loglevel;