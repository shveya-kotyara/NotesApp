'use strict';
/* eslint-disable
  no-param-reassign,
  space-before-function-paren
*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MethodFactory = require('./MethodFactory');

var defaults = {
  name: function name(options) {
    return options.logger.name;
  },
  time: function time() {
    return new Date().toTimeString().split(' ')[0];
  },
  level: function level(options) {
    return "[".concat(options.level, "]");
  },
  template: '{{time}} {{level}} '
};

var PrefixFactory =
/*#__PURE__*/
function (_MethodFactory) {
  _inherits(PrefixFactory, _MethodFactory);

  function PrefixFactory(logger, options) {
    var _this;

    _classCallCheck(this, PrefixFactory);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PrefixFactory).call(this, logger));
    _this.options = Object.assign({}, defaults, options);
    return _this;
  }

  _createClass(PrefixFactory, [{
    key: "interpolate",
    value: function interpolate(level) {
      var _this2 = this;

      return this.options.template.replace(/{{([^{}]*)}}/g, function (stache, prop) {
        var fn = _this2.options[prop];

        if (fn) {
          return fn({
            level: level,
            logger: _this2.logger
          });
        }

        return stache;
      });
    }
  }, {
    key: "make",
    value: function make(method) {
      var _this3 = this;

      var og = _get(_getPrototypeOf(PrefixFactory.prototype), "make", this).call(this, method);

      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var first = args[0];

        var output = _this3.interpolate(method);

        if (typeof first === 'string') {
          args[0] = output + first;
        } else {
          args.unshift(output);
        }

        og.apply(void 0, args);
      };
    }
  }]);

  return PrefixFactory;
}(MethodFactory);

module.exports = PrefixFactory;