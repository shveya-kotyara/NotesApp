'use strict';
/* global window: true */

/* eslint-disable
  multiline-ternary,
  no-param-reassign
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PrefixFactory = require('./PrefixFactory');

var MethodFactory = require('./MethodFactory');

var defaults = {
  name: +new Date(),
  level: 'warn',
  prefix: null,
  factory: null
};

var LogLevel =
/*#__PURE__*/
function () {
  function LogLevel(options) {
    _classCallCheck(this, LogLevel);

    // implement for some _very_ loose type checking. avoids getting into a
    // circular require between MethodFactory and LogLevel
    this.type = 'LogLevel';
    this.options = Object.assign({}, defaults, options);
    this.methodFactory = options.factory;

    if (!this.methodFactory) {
      var factory = options.prefix ? new PrefixFactory(this, options.prefix) : new MethodFactory(this);
      this.methodFactory = factory;
    }

    if (!this.methodFactory.logger) {
      this.methodFactory.logger = this;
    }

    this.name = options.name || '<unknown>'; // this.level is a setter, do this after setting up the factory

    this.level = this.options.level;
  }

  _createClass(LogLevel, [{
    key: "enable",
    value: function enable() {
      this.level = this.levels.TRACE;
    }
  }, {
    key: "disable",
    value: function disable() {
      this.level = this.levels.SILENT;
    }
  }, {
    key: "factory",
    get: function get() {
      return this.methodFactory;
    },
    set: function set(factory) {
      factory.logger = this;
      this.methodFactory = factory;
      this.methodFactory.replaceMethods(this.level);
    }
  }, {
    key: "level",
    get: function get() {
      return this.currentLevel;
    },
    set: function set(logLevel) {
      var level = this.methodFactory.distillLevel(logLevel);

      if (level == null) {
        throw new Error("loglevel: setLevel() called with invalid level: ".concat(logLevel));
      }

      this.currentLevel = level;
      this.methodFactory.replaceMethods(level);

      if (typeof console === 'undefined' && level < this.levels.SILENT) {
        // eslint-disable-next-line no-console
        console.warn('loglevel: console is undefined. The log will produce no output');
      }
    }
  }, {
    key: "levels",
    get: function get() {
      // eslint-disable-line class-methods-use-this
      return this.methodFactory.levels;
    }
  }]);

  return LogLevel;
}();

module.exports = LogLevel;