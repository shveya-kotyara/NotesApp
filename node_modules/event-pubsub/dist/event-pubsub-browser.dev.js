'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

window.EventPubSub =
/*#__PURE__*/
function () {
  function EventPubSub(scope) {
    _classCallCheck(this, EventPubSub);

    this._events_ = {};
    this.publish = this.trigger = this.emit;
    this.subscribe = this.on;
    this.unSubscribe = this.off;
  }

  _createClass(EventPubSub, [{
    key: "on",
    value: function on(type, handler, once) {
      if (!handler) {
        throw new ReferenceError('handler not defined.');
      }

      if (!this._events_[type]) {
        this._events_[type] = [];
      }

      if (once) {
        handler._once_ = once;
      }

      this._events_[type].push(handler);

      return this;
    }
  }, {
    key: "once",
    value: function once(type, handler) {
      return this.on(type, handler, true);
    }
  }, {
    key: "off",
    value: function off(type, handler) {
      if (!this._events_[type]) {
        return this;
      }

      if (!handler) {
        throw new ReferenceError('handler not defined. if you wish to remove all handlers from the event please pass "*" as the handler');
      }

      if (handler == '*') {
        delete this._events_[type];
        return this;
      }

      var handlers = this._events_[type];

      while (handlers.includes(handler)) {
        handlers.splice(handlers.indexOf(handler), 1);
      }

      if (handlers.length < 1) {
        delete this._events_[type];
      }

      return this;
    }
  }, {
    key: "emit",
    value: function emit(type) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (!this._events_[type]) {
        return this.emit$.apply(this, [type].concat(args));
      }

      var handlers = this._events_[type];
      var onceHandled = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var handler = _step.value;
          handler.apply(this, args);

          if (handler._once_) {
            onceHandled.push(handler);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      for (var _i = 0, _onceHandled = onceHandled; _i < _onceHandled.length; _i++) {
        var _handler = _onceHandled[_i];
        this.off(type, _handler);
      }

      return this.emit$.apply(this, [type].concat(args));
    }
  }, {
    key: "emit$",
    value: function emit$(type) {
      if (!this._events_['*']) {
        return this;
      }

      var catchAll = this._events_['*'];

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = catchAll[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var handler = _step2.value;
          handler.call.apply(handler, [this, type].concat(args));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return this;
    }
  }]);

  return EventPubSub;
}();

if (!Array.prototype.includes) {
  Array.prototype.includes = function (searchElement
  /*, fromIndex*/
  ) {
    'use strict';

    if (this == null) {
      throw new TypeError('Array.prototype.includes called on null or undefined');
    }

    var O = Object(this);
    var len = parseInt(O.length, 10) || 0;

    if (len === 0) {
      return false;
    }

    var n = parseInt(arguments[1], 10) || 0;
    var k;

    if (n >= 0) {
      k = n;
    } else {
      k = len + n;

      if (k < 0) {
        k = 0;
      }
    }

    var currentElement;

    while (k < len) {
      currentElement = O[k];

      if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
        // NaN !== NaN
        return true;
      }

      k++;
    }

    return false;
  };
}