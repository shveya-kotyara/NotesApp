'use strict';

var pTry = require('p-try');

var pLimit = function pLimit(concurrency) {
  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
    return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));
  }

  var queue = [];
  var activeCount = 0;

  var next = function next() {
    activeCount--;

    if (queue.length > 0) {
      queue.shift()();
    }
  };

  var run = function run(fn, resolve) {
    activeCount++;

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var result = pTry.apply(void 0, [fn].concat(args));
    resolve(result);
    result.then(next, next);
  };

  var enqueue = function enqueue(fn, resolve) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    if (activeCount < concurrency) {
      run.apply(void 0, [fn, resolve].concat(args));
    } else {
      queue.push(run.bind.apply(run, [null, fn, resolve].concat(args)));
    }
  };

  var generator = function generator(fn) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    return new Promise(function (resolve) {
      return enqueue.apply(void 0, [fn, resolve].concat(args));
    });
  };

  Object.defineProperties(generator, {
    activeCount: {
      get: function get() {
        return activeCount;
      }
    },
    pendingCount: {
      get: function get() {
        return queue.length;
      }
    },
    clearQueue: {
      value: function value() {
        queue.length = 0;
      }
    }
  });
  return generator;
};

module.exports = pLimit;
module.exports["default"] = pLimit;