"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.completion = void 0;

var command_1 = require("./command");

var templates = require("./completion-templates");

var is_promise_1 = require("./is-promise");

var parse_command_1 = require("./parse-command");

var path = require("path");

var common_types_1 = require("./common-types"); // add bash completions to your
//  yargs-powered applications.


function completion(yargs, usage, command) {
  var self = {
    completionKey: 'get-yargs-completions'
  };
  var aliases;

  self.setParsed = function setParsed(parsed) {
    aliases = parsed.aliases;
  };

  var zshShell = process.env.SHELL && process.env.SHELL.indexOf('zsh') !== -1 || process.env.ZSH_NAME && process.env.ZSH_NAME.indexOf('zsh') !== -1; // get a list of completion commands.
  // 'args' is the array of strings from the line to be completed

  self.getCompletion = function getCompletion(args, done) {
    var completions = [];
    var current = args.length ? args[args.length - 1] : '';
    var argv = yargs.parse(args, true);
    var parentCommands = yargs.getContext().commands; // a custom completion function can be provided
    // to completion().

    function runCompletionFunction(argv) {
      common_types_1.assertNotStrictEqual(completionFunction, null);

      if (isSyncCompletionFunction(completionFunction)) {
        var result = completionFunction(current, argv); // promise based completion function.

        if (is_promise_1.isPromise(result)) {
          return result.then(function (list) {
            process.nextTick(function () {
              done(list);
            });
          })["catch"](function (err) {
            process.nextTick(function () {
              throw err;
            });
          });
        } // synchronous completion function.


        return done(result);
      } else {
        // asynchronous completion function
        return completionFunction(current, argv, function (completions) {
          done(completions);
        });
      }
    }

    if (completionFunction) {
      return is_promise_1.isPromise(argv) ? argv.then(runCompletionFunction) : runCompletionFunction(argv);
    }

    var handlers = command.getCommandHandlers();

    for (var i = 0, ii = args.length; i < ii; ++i) {
      if (handlers[args[i]] && handlers[args[i]].builder) {
        var builder = handlers[args[i]].builder;

        if (command_1.isCommandBuilderCallback(builder)) {
          var y = yargs.reset();
          builder(y);
          return y.argv;
        }
      }
    }

    if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {
      usage.getCommands().forEach(function (usageCommand) {
        var commandName = parse_command_1.parseCommand(usageCommand[0]).cmd;

        if (args.indexOf(commandName) === -1) {
          if (!zshShell) {
            completions.push(commandName);
          } else {
            var desc = usageCommand[1] || '';
            completions.push(commandName.replace(/:/g, '\\:') + ':' + desc);
          }
        }
      });
    }

    if (current.match(/^-/) || current === '' && completions.length === 0) {
      var descs = usage.getDescriptions();
      var options = yargs.getOptions();
      Object.keys(options.key).forEach(function (key) {
        var negable = !!options.configuration['boolean-negation'] && options["boolean"].includes(key); // If the key and its aliases aren't in 'args', add the key to 'completions'

        var keyAndAliases = [key].concat(aliases[key] || []);
        if (negable) keyAndAliases = keyAndAliases.concat(keyAndAliases.map(function (key) {
          return "no-".concat(key);
        }));

        function completeOptionKey(key) {
          var notInArgs = keyAndAliases.every(function (val) {
            return args.indexOf("--".concat(val)) === -1;
          });

          if (notInArgs) {
            var startsByTwoDashes = function startsByTwoDashes(s) {
              return /^--/.test(s);
            };

            var isShortOption = function isShortOption(s) {
              return /^[^0-9]$/.test(s);
            };

            var dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';

            if (!zshShell) {
              completions.push(dashes + key);
            } else {
              var desc = descs[key] || '';
              completions.push(dashes + "".concat(key.replace(/:/g, '\\:'), ":").concat(desc.replace('__yargsString__:', '')));
            }
          }
        }

        completeOptionKey(key);
        if (negable && !!options["default"][key]) completeOptionKey("no-".concat(key));
      });
    }

    done(completions);
  }; // generate the completion script to add to your .bashrc.


  self.generateCompletionScript = function generateCompletionScript($0, cmd) {
    var script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate;
    var name = path.basename($0); // add ./to applications not yet installed as bin.

    if ($0.match(/\.js$/)) $0 = "./".concat($0);
    script = script.replace(/{{app_name}}/g, name);
    script = script.replace(/{{completion_command}}/g, cmd);
    return script.replace(/{{app_path}}/g, $0);
  }; // register a function to perform your own custom
  // completions., this function can be either
  // synchrnous or asynchronous.


  var completionFunction = null;

  self.registerFunction = function (fn) {
    completionFunction = fn;
  };

  return self;
}

exports.completion = completion;

function isSyncCompletionFunction(completionFunction) {
  return completionFunction.length < 3;
}