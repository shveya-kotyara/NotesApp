"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyMiddleware = exports.commandMiddlewareFactory = exports.globalMiddlewareFactory = void 0;

var argsert_1 = require("./argsert");

var is_promise_1 = require("./is-promise");

function globalMiddlewareFactory(globalMiddleware, context) {
  return function (callback) {
    var applyBeforeValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    argsert_1.argsert('<array|function> [boolean]', [callback, applyBeforeValidation], arguments.length);

    if (Array.isArray(callback)) {
      for (var i = 0; i < callback.length; i++) {
        if (typeof callback[i] !== 'function') {
          throw Error('middleware must be a function');
        }

        callback[i].applyBeforeValidation = applyBeforeValidation;
      }

      Array.prototype.push.apply(globalMiddleware, callback);
    } else if (typeof callback === 'function') {
      callback.applyBeforeValidation = applyBeforeValidation;
      globalMiddleware.push(callback);
    }

    return context;
  };
}

exports.globalMiddlewareFactory = globalMiddlewareFactory;

function commandMiddlewareFactory(commandMiddleware) {
  if (!commandMiddleware) return [];
  return commandMiddleware.map(function (middleware) {
    middleware.applyBeforeValidation = false;
    return middleware;
  });
}

exports.commandMiddlewareFactory = commandMiddlewareFactory;

function applyMiddleware(argv, yargs, middlewares, beforeValidation) {
  var beforeValidationError = new Error('middleware cannot return a promise when applyBeforeValidation is true');
  return middlewares.reduce(function (acc, middleware) {
    if (middleware.applyBeforeValidation !== beforeValidation) {
      return acc;
    }

    if (is_promise_1.isPromise(acc)) {
      return acc.then(function (initialObj) {
        return Promise.all([initialObj, middleware(initialObj, yargs)]);
      }).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            initialObj = _ref2[0],
            middlewareObj = _ref2[1];

        return Object.assign(initialObj, middlewareObj);
      });
    } else {
      var result = middleware(acc, yargs);
      if (beforeValidation && is_promise_1.isPromise(result)) throw beforeValidationError;
      return is_promise_1.isPromise(result) ? result.then(function (middlewareObj) {
        return Object.assign(acc, middlewareObj);
      }) : Object.assign(acc, result);
    }
  }, argv);
}

exports.applyMiddleware = applyMiddleware;