'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require('path');

var fs = require('fs');

var _require = require('util'),
    promisify = _require.promisify;

var pLocate = require('p-locate');

var fsStat = promisify(fs.stat);
var fsLStat = promisify(fs.lstat);
var typeMappings = {
  directory: 'isDirectory',
  file: 'isFile'
};

function checkType(_ref) {
  var type = _ref.type;

  if (type in typeMappings) {
    return;
  }

  throw new Error("Invalid type specified: ".concat(type));
}

var matchType = function matchType(type, stat) {
  return type === undefined || stat[typeMappings[type]]();
};

module.exports = function _callee2(paths, options) {
  var statFn;
  return regeneratorRuntime.async(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          options = _objectSpread({
            cwd: process.cwd(),
            type: 'file',
            allowSymlinks: true
          }, options);
          checkType(options);
          statFn = options.allowSymlinks ? fsStat : fsLStat;
          return _context2.abrupt("return", pLocate(paths, function _callee(path_) {
            var stat;
            return regeneratorRuntime.async(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    _context.next = 3;
                    return regeneratorRuntime.awrap(statFn(path.resolve(options.cwd, path_)));

                  case 3:
                    stat = _context.sent;
                    return _context.abrupt("return", matchType(options.type, stat));

                  case 7:
                    _context.prev = 7;
                    _context.t0 = _context["catch"](0);
                    return _context.abrupt("return", false);

                  case 10:
                  case "end":
                    return _context.stop();
                }
              }
            }, null, null, [[0, 7]]);
          }, options));

        case 4:
        case "end":
          return _context2.stop();
      }
    }
  });
};

module.exports.sync = function (paths, options) {
  options = _objectSpread({
    cwd: process.cwd(),
    allowSymlinks: true,
    type: 'file'
  }, options);
  checkType(options);
  var statFn = options.allowSymlinks ? fs.statSync : fs.lstatSync;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = paths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var path_ = _step.value;

      try {
        var stat = statFn(path.resolve(options.cwd, path_));

        if (matchType(options.type, stat)) {
          return path_;
        }
      } catch (_) {}
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};