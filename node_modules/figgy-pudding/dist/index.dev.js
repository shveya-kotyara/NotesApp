'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FiggyPudding =
/*#__PURE__*/
function () {
  function FiggyPudding(specs, opts, providers) {
    var _this = this;

    _classCallCheck(this, FiggyPudding);

    this.__specs = specs || {};
    Object.keys(this.__specs).forEach(function (alias) {
      if (typeof _this.__specs[alias] === 'string') {
        var key = _this.__specs[alias];
        var realSpec = _this.__specs[key];

        if (realSpec) {
          var aliasArr = realSpec.aliases || [];
          aliasArr.push(alias, key);
          realSpec.aliases = _toConsumableArray(new Set(aliasArr));
          _this.__specs[alias] = realSpec;
        } else {
          throw new Error("Alias refers to invalid key: ".concat(key, " -> ").concat(alias));
        }
      }
    });
    this.__opts = opts || {};
    this.__providers = reverse(providers.filter(function (x) {
      return x != null && _typeof(x) === 'object';
    }));
    this.__isFiggyPudding = true;
  }

  _createClass(FiggyPudding, [{
    key: "get",
    value: function get(key) {
      return pudGet(this, key, true);
    }
  }, {
    key: "forEach",
    value: function forEach(fn) {
      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              value = _step$value[1];

          fn.call(thisArg, value, key, this);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var obj = {};
      this.forEach(function (val, key) {
        obj[key] = val;
      });
      return obj;
    }
  }, {
    key: "entries",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function entries(_matcher) {
      var _i2, _Object$keys, _key, matcher, seen, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, p, iter, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value, key, val;

      return regeneratorRuntime.wrap(function entries$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _i2 = 0, _Object$keys = Object.keys(this.__specs);

            case 1:
              if (!(_i2 < _Object$keys.length)) {
                _context.next = 8;
                break;
              }

              _key = _Object$keys[_i2];
              _context.next = 5;
              return [_key, this.get(_key)];

            case 5:
              _i2++;
              _context.next = 1;
              break;

            case 8:
              matcher = _matcher || this.__opts.other;

              if (!matcher) {
                _context.next = 64;
                break;
              }

              seen = new Set();
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 14;
              _iterator2 = this.__providers[Symbol.iterator]();

            case 16:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 50;
                break;
              }

              p = _step2.value;
              iter = p.entries ? p.entries(matcher) : _entries(p);
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context.prev = 22;
              _iterator3 = iter[Symbol.iterator]();

            case 24:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context.next = 33;
                break;
              }

              _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], val = _step3$value[1];

              if (!(matcher(key) && !seen.has(key))) {
                _context.next = 30;
                break;
              }

              seen.add(key);
              _context.next = 30;
              return [key, val];

            case 30:
              _iteratorNormalCompletion3 = true;
              _context.next = 24;
              break;

            case 33:
              _context.next = 39;
              break;

            case 35:
              _context.prev = 35;
              _context.t0 = _context["catch"](22);
              _didIteratorError3 = true;
              _iteratorError3 = _context.t0;

            case 39:
              _context.prev = 39;
              _context.prev = 40;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 42:
              _context.prev = 42;

              if (!_didIteratorError3) {
                _context.next = 45;
                break;
              }

              throw _iteratorError3;

            case 45:
              return _context.finish(42);

            case 46:
              return _context.finish(39);

            case 47:
              _iteratorNormalCompletion2 = true;
              _context.next = 16;
              break;

            case 50:
              _context.next = 56;
              break;

            case 52:
              _context.prev = 52;
              _context.t1 = _context["catch"](14);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t1;

            case 56:
              _context.prev = 56;
              _context.prev = 57;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 59:
              _context.prev = 59;

              if (!_didIteratorError2) {
                _context.next = 62;
                break;
              }

              throw _iteratorError2;

            case 62:
              return _context.finish(59);

            case 63:
              return _context.finish(56);

            case 64:
            case "end":
              return _context.stop();
          }
        }
      }, entries, this, [[14, 52, 56, 64], [22, 35, 39, 47], [40,, 42, 46], [57,, 59, 63]]);
    })
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, key, value;

      return regeneratorRuntime.wrap(function value$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context2.prev = 3;
              _iterator4 = this.entries()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context2.next = 12;
                break;
              }

              _step4$value = _slicedToArray(_step4.value, 2), key = _step4$value[0], value = _step4$value[1];
              _context2.next = 9;
              return [key, value];

            case 9:
              _iteratorNormalCompletion4 = true;
              _context2.next = 5;
              break;

            case 12:
              _context2.next = 18;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](3);
              _didIteratorError4 = true;
              _iteratorError4 = _context2.t0;

            case 18:
              _context2.prev = 18;
              _context2.prev = 19;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 21:
              _context2.prev = 21;

              if (!_didIteratorError4) {
                _context2.next = 24;
                break;
              }

              throw _iteratorError4;

            case 24:
              return _context2.finish(21);

            case 25:
              return _context2.finish(18);

            case 26:
            case "end":
              return _context2.stop();
          }
        }
      }, value, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: "keys",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function keys() {
      var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _step5$value, key;

      return regeneratorRuntime.wrap(function keys$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context3.prev = 3;
              _iterator5 = this.entries()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                _context3.next = 12;
                break;
              }

              _step5$value = _slicedToArray(_step5.value, 1), key = _step5$value[0];
              _context3.next = 9;
              return key;

            case 9:
              _iteratorNormalCompletion5 = true;
              _context3.next = 5;
              break;

            case 12:
              _context3.next = 18;
              break;

            case 14:
              _context3.prev = 14;
              _context3.t0 = _context3["catch"](3);
              _didIteratorError5 = true;
              _iteratorError5 = _context3.t0;

            case 18:
              _context3.prev = 18;
              _context3.prev = 19;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 21:
              _context3.prev = 21;

              if (!_didIteratorError5) {
                _context3.next = 24;
                break;
              }

              throw _iteratorError5;

            case 24:
              return _context3.finish(21);

            case 25:
              return _context3.finish(18);

            case 26:
            case "end":
              return _context3.stop();
          }
        }
      }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: "values",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function values() {
      var _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _step6$value, value;

      return regeneratorRuntime.wrap(function values$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iteratorNormalCompletion6 = true;
              _didIteratorError6 = false;
              _iteratorError6 = undefined;
              _context4.prev = 3;
              _iterator6 = this.entries()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
                _context4.next = 12;
                break;
              }

              _step6$value = _slicedToArray(_step6.value, 2), value = _step6$value[1];
              _context4.next = 9;
              return value;

            case 9:
              _iteratorNormalCompletion6 = true;
              _context4.next = 5;
              break;

            case 12:
              _context4.next = 18;
              break;

            case 14:
              _context4.prev = 14;
              _context4.t0 = _context4["catch"](3);
              _didIteratorError6 = true;
              _iteratorError6 = _context4.t0;

            case 18:
              _context4.prev = 18;
              _context4.prev = 19;

              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }

            case 21:
              _context4.prev = 21;

              if (!_didIteratorError6) {
                _context4.next = 24;
                break;
              }

              throw _iteratorError6;

            case 24:
              return _context4.finish(21);

            case 25:
              return _context4.finish(18);

            case 26:
            case "end":
              return _context4.stop();
          }
        }
      }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: "concat",
    value: function concat() {
      for (var _len = arguments.length, moreConfig = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
        moreConfig[_key2] = arguments[_key2];
      }

      return new Proxy(new FiggyPudding(this.__specs, this.__opts, reverse(this.__providers).concat(moreConfig)), proxyHandler);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'FiggyPudding';
    }
  }]);

  return FiggyPudding;
}();

try {
  var util = require('util');

  FiggyPudding.prototype[util.inspect.custom] = function (depth, opts) {
    return this[Symbol.toStringTag] + ' ' + util.inspect(this.toJSON(), opts);
  };
} catch (e) {}

function BadKeyError(key) {
  throw Object.assign(new Error("invalid config key requested: ".concat(key)), {
    code: 'EBADKEY'
  });
}

function pudGet(pud, key, validate) {
  var spec = pud.__specs[key];

  if (validate && !spec && (!pud.__opts.other || !pud.__opts.other(key))) {
    BadKeyError(key);
  } else {
    if (!spec) {
      spec = {};
    }

    var ret;
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = pud.__providers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var p = _step7.value;
        ret = tryGet(key, p);

        if (ret === undefined && spec.aliases && spec.aliases.length) {
          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = spec.aliases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var alias = _step8.value;

              if (alias === key) {
                continue;
              }

              ret = tryGet(alias, p);

              if (ret !== undefined) {
                break;
              }
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }
        }

        if (ret !== undefined) {
          break;
        }
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
          _iterator7["return"]();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    if (ret === undefined && spec["default"] !== undefined) {
      if (typeof spec["default"] === 'function') {
        return spec["default"](pud);
      } else {
        return spec["default"];
      }
    } else {
      return ret;
    }
  }
}

function tryGet(key, p) {
  var ret;

  if (p.__isFiggyPudding) {
    ret = pudGet(p, key, false);
  } else if (typeof p.get === 'function') {
    ret = p.get(key);
  } else {
    ret = p[key];
  }

  return ret;
}

var proxyHandler = {
  has: function has(obj, prop) {
    return prop in obj.__specs && pudGet(obj, prop, false) !== undefined;
  },
  ownKeys: function ownKeys(obj) {
    return Object.keys(obj.__specs);
  },
  get: function get(obj, prop) {
    if (_typeof(prop) === 'symbol' || prop.slice(0, 2) === '__' || prop in FiggyPudding.prototype) {
      return obj[prop];
    }

    return obj.get(prop);
  },
  set: function set(obj, prop, value) {
    if (_typeof(prop) === 'symbol' || prop.slice(0, 2) === '__') {
      obj[prop] = value;
      return true;
    } else {
      throw new Error('figgyPudding options cannot be modified. Use .concat() instead.');
    }
  },
  deleteProperty: function deleteProperty() {
    throw new Error('figgyPudding options cannot be deleted. Use .concat() and shadow them instead.');
  }
};
module.exports = figgyPudding;

function figgyPudding(specs, opts) {
  function factory() {
    for (var _len2 = arguments.length, providers = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
      providers[_key3] = arguments[_key3];
    }

    return new Proxy(new FiggyPudding(specs, opts, providers), proxyHandler);
  }

  return factory;
}

function reverse(arr) {
  var ret = [];
  arr.forEach(function (x) {
    return ret.unshift(x);
  });
  return ret;
}

function _entries(obj) {
  return Object.keys(obj).map(function (k) {
    return [k, obj[k]];
  });
}