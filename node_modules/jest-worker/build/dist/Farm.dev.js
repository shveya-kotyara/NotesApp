'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports["default"] = void 0;

var _types = require('./types');

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var Farm =
/*#__PURE__*/
function () {
  function Farm(numOfWorkers, callback, computeWorkerKey) {
    _classCallCheck(this, Farm);

    _defineProperty(this, '_computeWorkerKey', void 0);

    _defineProperty(this, '_cacheKeys', void 0);

    _defineProperty(this, '_callback', void 0);

    _defineProperty(this, '_last', void 0);

    _defineProperty(this, '_locks', void 0);

    _defineProperty(this, '_numOfWorkers', void 0);

    _defineProperty(this, '_offset', void 0);

    _defineProperty(this, '_queue', void 0);

    this._cacheKeys = Object.create(null);
    this._callback = callback;
    this._last = [];
    this._locks = [];
    this._numOfWorkers = numOfWorkers;
    this._offset = 0;
    this._queue = [];

    if (computeWorkerKey) {
      this._computeWorkerKey = computeWorkerKey;
    }
  }

  _createClass(Farm, [{
    key: "doWork",
    value: function doWork(method) {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        var computeWorkerKey = _this._computeWorkerKey;
        var request = [_types.CHILD_MESSAGE_CALL, false, method, args];
        var worker = null;
        var hash = null;

        if (computeWorkerKey) {
          hash = computeWorkerKey.call.apply(computeWorkerKey, [_this, method].concat(args));
          worker = hash == null ? null : _this._cacheKeys[hash];
        }

        var onStart = function onStart(worker) {
          if (hash != null) {
            _this._cacheKeys[hash] = worker;
          }
        };

        var onEnd = function onEnd(error, result) {
          if (error) {
            reject(error);
          } else {
            resolve(result);
          }
        };

        var task = {
          onEnd: onEnd,
          onStart: onStart,
          request: request
        };

        if (worker) {
          _this._enqueue(task, worker.getWorkerId());
        } else {
          _this._push(task);
        }
      });
    }
  }, {
    key: "_getNextTask",
    value: function _getNextTask(workerId) {
      var queueHead = this._queue[workerId];

      while (queueHead && queueHead.task.request[1]) {
        queueHead = queueHead.next || null;
      }

      this._queue[workerId] = queueHead;
      return queueHead && queueHead.task;
    }
  }, {
    key: "_process",
    value: function _process(workerId) {
      var _this2 = this;

      if (this._isLocked(workerId)) {
        return this;
      }

      var task = this._getNextTask(workerId);

      if (!task) {
        return this;
      }

      var onEnd = function onEnd(error, result) {
        task.onEnd(error, result);

        _this2._unlock(workerId);

        _this2._process(workerId);
      };

      task.request[1] = true;

      this._lock(workerId);

      this._callback(workerId, task.request, task.onStart, onEnd);

      return this;
    }
  }, {
    key: "_enqueue",
    value: function _enqueue(task, workerId) {
      var item = {
        next: null,
        task: task
      };

      if (task.request[1]) {
        return this;
      }

      if (this._queue[workerId]) {
        this._last[workerId].next = item;
      } else {
        this._queue[workerId] = item;
      }

      this._last[workerId] = item;

      this._process(workerId);

      return this;
    }
  }, {
    key: "_push",
    value: function _push(task) {
      for (var i = 0; i < this._numOfWorkers; i++) {
        this._enqueue(task, (this._offset + i) % this._numOfWorkers);
      }

      this._offset++;
      return this;
    }
  }, {
    key: "_lock",
    value: function _lock(workerId) {
      this._locks[workerId] = true;
    }
  }, {
    key: "_unlock",
    value: function _unlock(workerId) {
      this._locks[workerId] = false;
    }
  }, {
    key: "_isLocked",
    value: function _isLocked(workerId) {
      return this._locks[workerId];
    }
  }]);

  return Farm;
}();

exports["default"] = Farm;