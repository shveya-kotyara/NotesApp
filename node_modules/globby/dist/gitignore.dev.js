'use strict';

var fs = require('fs');

var path = require('path');

var fastGlob = require('fast-glob');

var gitIgnore = require('ignore');

var pify = require('pify');

var slash = require('slash');

var DEFAULT_IGNORE = ['**/node_modules/**', '**/bower_components/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];
var readFileP = pify(fs.readFile);

var mapGitIgnorePatternTo = function mapGitIgnorePatternTo(base) {
  return function (ignore) {
    if (ignore.startsWith('!')) {
      return '!' + path.posix.join(base, ignore.slice(1));
    }

    return path.posix.join(base, ignore);
  };
};

var parseGitIgnore = function parseGitIgnore(content, options) {
  var base = slash(path.relative(options.cwd, path.dirname(options.fileName)));
  return content.split(/\r?\n/).filter(Boolean).filter(function (line) {
    return line.charAt(0) !== '#';
  }).map(mapGitIgnorePatternTo(base));
};

var reduceIgnore = function reduceIgnore(files) {
  return files.reduce(function (ignores, file) {
    ignores.add(parseGitIgnore(file.content, {
      cwd: file.cwd,
      fileName: file.filePath
    }));
    return ignores;
  }, gitIgnore());
};

var getIsIgnoredPredecate = function getIsIgnoredPredecate(ignores, cwd) {
  return function (p) {
    return ignores.ignores(slash(path.relative(cwd, p)));
  };
};

var getFile = function getFile(file, cwd) {
  var filePath = path.join(cwd, file);
  return readFileP(filePath, 'utf8').then(function (content) {
    return {
      content: content,
      cwd: cwd,
      filePath: filePath
    };
  });
};

var getFileSync = function getFileSync(file, cwd) {
  var filePath = path.join(cwd, file);
  var content = fs.readFileSync(filePath, 'utf8');
  return {
    content: content,
    cwd: cwd,
    filePath: filePath
  };
};

var normalizeOptions = function normalizeOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ignore = options.ignore || [];
  var cwd = options.cwd || process.cwd();
  return {
    ignore: ignore,
    cwd: cwd
  };
};

module.exports = function (options) {
  options = normalizeOptions(options);
  return fastGlob('**/.gitignore', {
    ignore: DEFAULT_IGNORE.concat(options.ignore),
    cwd: options.cwd
  }).then(function (paths) {
    return Promise.all(paths.map(function (file) {
      return getFile(file, options.cwd);
    }));
  }).then(function (files) {
    return reduceIgnore(files);
  }).then(function (ignores) {
    return getIsIgnoredPredecate(ignores, options.cwd);
  });
};

module.exports.sync = function (options) {
  options = normalizeOptions(options);
  var paths = fastGlob.sync('**/.gitignore', {
    ignore: DEFAULT_IGNORE.concat(options.ignore),
    cwd: options.cwd
  });
  var files = paths.map(function (file) {
    return getFileSync(file, options.cwd);
  });
  var ignores = reduceIgnore(files);
  return getIsIgnoredPredecate(ignores, options.cwd);
};