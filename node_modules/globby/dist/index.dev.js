'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var fs = require('fs');

var arrayUnion = require('array-union');

var glob = require('glob');

var fastGlob = require('fast-glob');

var dirGlob = require('dir-glob');

var gitignore = require('./gitignore');

var DEFAULT_FILTER = function DEFAULT_FILTER() {
  return false;
};

var isNegative = function isNegative(pattern) {
  return pattern[0] === '!';
};

var assertPatternsInput = function assertPatternsInput(patterns) {
  if (!patterns.every(function (x) {
    return typeof x === 'string';
  })) {
    throw new TypeError('Patterns must be a string or an array of strings');
  }
};

var checkCwdOption = function checkCwdOption(options) {
  if (options && options.cwd && !fs.statSync(options.cwd).isDirectory()) {
    throw new Error('The `cwd` option must be a path to a directory');
  }
};

var generateGlobTasks = function generateGlobTasks(patterns, taskOptions) {
  patterns = arrayUnion([].concat(patterns));
  assertPatternsInput(patterns);
  checkCwdOption(taskOptions);
  var globTasks = [];
  taskOptions = Object.assign({
    ignore: [],
    expandDirectories: true
  }, taskOptions);
  patterns.forEach(function (pattern, i) {
    if (isNegative(pattern)) {
      return;
    }

    var ignore = patterns.slice(i).filter(isNegative).map(function (pattern) {
      return pattern.slice(1);
    });
    var options = Object.assign({}, taskOptions, {
      ignore: taskOptions.ignore.concat(ignore)
    });
    globTasks.push({
      pattern: pattern,
      options: options
    });
  });
  return globTasks;
};

var globDirs = function globDirs(task, fn) {
  var options = {};

  if (task.options.cwd) {
    options.cwd = task.options.cwd;
  }

  if (Array.isArray(task.options.expandDirectories)) {
    options = Object.assign(options, {
      files: task.options.expandDirectories
    });
  } else if (_typeof(task.options.expandDirectories) === 'object') {
    options = Object.assign(options, task.options.expandDirectories);
  }

  return fn(task.pattern, options);
};

var getPattern = function getPattern(task, fn) {
  return task.options.expandDirectories ? globDirs(task, fn) : [task.pattern];
};

var globToTask = function globToTask(task) {
  return function (glob) {
    var options = task.options;

    if (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) {
      options.ignore = dirGlob.sync(options.ignore);
    }

    return {
      pattern: glob,
      options: options
    };
  };
};

var globby = function globby(patterns, options) {
  var globTasks;

  try {
    globTasks = generateGlobTasks(patterns, options);
  } catch (error) {
    return Promise.reject(error);
  }

  var getTasks = Promise.all(globTasks.map(function (task) {
    return Promise.resolve(getPattern(task, dirGlob)).then(function (globs) {
      return Promise.all(globs.map(globToTask(task)));
    });
  })).then(function (tasks) {
    return arrayUnion.apply(void 0, _toConsumableArray(tasks));
  });

  var getFilter = function getFilter() {
    return Promise.resolve(options && options.gitignore ? gitignore({
      cwd: options.cwd,
      ignore: options.ignore
    }) : DEFAULT_FILTER);
  };

  return getFilter().then(function (filter) {
    return getTasks.then(function (tasks) {
      return Promise.all(tasks.map(function (task) {
        return fastGlob(task.pattern, task.options);
      }));
    }).then(function (paths) {
      return arrayUnion.apply(void 0, _toConsumableArray(paths));
    }).then(function (paths) {
      return paths.filter(function (p) {
        return !filter(p);
      });
    });
  });
};

module.exports = globby; // TODO: Remove this for the next major release

module.exports["default"] = globby;

module.exports.sync = function (patterns, options) {
  var globTasks = generateGlobTasks(patterns, options);

  var getFilter = function getFilter() {
    return options && options.gitignore ? gitignore.sync({
      cwd: options.cwd,
      ignore: options.ignore
    }) : DEFAULT_FILTER;
  };

  var tasks = globTasks.reduce(function (tasks, task) {
    var newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
    return tasks.concat(newTask);
  }, []);
  var filter = getFilter();
  return tasks.reduce(function (matches, task) {
    return arrayUnion(matches, fastGlob.sync(task.pattern, task.options));
  }, []).filter(function (p) {
    return !filter(p);
  });
};

module.exports.generateGlobTasks = generateGlobTasks;

module.exports.hasMagic = function (patterns, options) {
  return [].concat(patterns).some(function (pattern) {
    return glob.hasMagic(pattern, options);
  });
};

module.exports.gitignore = gitignore;