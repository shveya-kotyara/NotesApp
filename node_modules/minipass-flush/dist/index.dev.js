"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Minipass = require('minipass');

var _flush = Symbol('_flush');

var _flushed = Symbol('_flushed');

var _flushing = Symbol('_flushing');

var Flush =
/*#__PURE__*/
function (_Minipass) {
  _inherits(Flush, _Minipass);

  function Flush() {
    var _this;

    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Flush);

    if (typeof opt === 'function') opt = {
      flush: opt
    };
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Flush).call(this, opt)); // or extend this class and provide a 'flush' method in your subclass

    if (typeof opt.flush !== 'function' && typeof _this.flush !== 'function') throw new TypeError('must provide flush function in options');
    _this[_flush] = opt.flush || _this.flush;
    return _this;
  }

  _createClass(Flush, [{
    key: "emit",
    value: function emit(ev) {
      var _get2,
          _this2 = this;

      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data[_key - 1] = arguments[_key];
      }

      if (ev !== 'end' && ev !== 'finish' || this[_flushed]) return (_get2 = _get(_getPrototypeOf(Flush.prototype), "emit", this)).call.apply(_get2, [this, ev].concat(data));
      if (this[_flushing]) return;
      this[_flushing] = true;

      var afterFlush = function afterFlush(er) {
        _this2[_flushed] = true;
        er ? _get(_getPrototypeOf(Flush.prototype), "emit", _this2).call(_this2, 'error', er) : _get(_getPrototypeOf(Flush.prototype), "emit", _this2).call(_this2, 'end');
      };

      var ret = this[_flush](afterFlush);

      if (ret && ret.then) ret.then(function () {
        return afterFlush();
      }, function (er) {
        return afterFlush(er);
      });
    }
  }]);

  return Flush;
}(Minipass);

module.exports = Flush;