'use strict';

var log = require('npmlog');

var execFile = require('child_process').execFile;

var path = require('path');

function logWithPrefix(log, prefix) {
  function setPrefix(logFunction) {
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return logFunction.apply(null, [prefix].concat(args));
    }; // eslint-disable-line
  }

  return {
    silly: setPrefix(log.silly),
    verbose: setPrefix(log.verbose),
    info: setPrefix(log.info),
    warn: setPrefix(log.warn),
    error: setPrefix(log.error)
  };
}

function regGetValue(key, value, addOpts, cb) {
  var outReValue = value.replace(/\W/g, '.');
  var outRe = new RegExp("^\\s+".concat(outReValue, "\\s+REG_\\w+\\s+(\\S.*)$"), 'im');
  var reg = path.join(process.env.SystemRoot, 'System32', 'reg.exe');
  var regArgs = ['query', key, '/v', value].concat(addOpts);
  log.silly('reg', 'running', reg, regArgs);
  var child = execFile(reg, regArgs, {
    encoding: 'utf8'
  }, function (err, stdout, stderr) {
    log.silly('reg', 'reg.exe stdout = %j', stdout);

    if (err || stderr.trim() !== '') {
      log.silly('reg', 'reg.exe err = %j', err && (err.stack || err));
      log.silly('reg', 'reg.exe stderr = %j', stderr);
      return cb(err, stderr);
    }

    var result = outRe.exec(stdout);

    if (!result) {
      log.silly('reg', 'error parsing stdout');
      return cb(new Error('Could not parse output of reg.exe'));
    }

    log.silly('reg', 'found: %j', result[1]);
    cb(null, result[1]);
  });
  child.stdin.end();
}

function regSearchKeys(keys, value, addOpts, cb) {
  var i = 0;

  var search = function search() {
    log.silly('reg-search', 'looking for %j in %j', value, keys[i]);
    regGetValue(keys[i], value, addOpts, function (err, res) {
      ++i;

      if (err && i < keys.length) {
        return search();
      }

      cb(err, res);
    });
  };

  search();
}

module.exports = {
  logWithPrefix: logWithPrefix,
  regGetValue: regGetValue,
  regSearchKeys: regSearchKeys
};