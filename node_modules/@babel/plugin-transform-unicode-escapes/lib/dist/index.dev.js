"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _helperPluginUtils = require("@babel/helper-plugin-utils");

var _core = require("@babel/core");

var _default = (0, _helperPluginUtils.declare)(function (api) {
  api.assertVersion(7);
  var surrogate = /[\ud800-\udfff]/g;
  var unicodeEscape = /(\\+)u\{([0-9a-fA-F]+)\}/g;

  function escape(code) {
    var str = code.toString(16);

    while (str.length < 4) {
      str = "0" + str;
    }

    return "\\u" + str;
  }

  function replacer(match, backslashes, code) {
    if (backslashes.length % 2 === 0) {
      return match;
    }

    var _char = String.fromCodePoint(parseInt(code, 16));

    var escaped = backslashes.slice(0, -1) + escape(_char.charCodeAt(0));
    return _char.length === 1 ? escaped : escaped + escape(_char.charCodeAt(1));
  }

  function replaceUnicodeEscapes(str) {
    return str.replace(unicodeEscape, replacer);
  }

  function getUnicodeEscape(str) {
    var match;

    while (match = unicodeEscape.exec(str)) {
      if (match[1].length % 2 === 0) continue;
      unicodeEscape.lastIndex = 0;
      return match[0];
    }

    return null;
  }

  return {
    name: "transform-unicode-escapes",
    visitor: {
      Identifier: function Identifier(path) {
        var node = path.node,
            key = path.key;
        var name = node.name;
        var replaced = name.replace(surrogate, function (c) {
          return "_u".concat(c.charCodeAt(0).toString(16));
        });
        if (name === replaced) return;

        var str = _core.types.inherits(_core.types.stringLiteral(name), node);

        if (key === "key") {
          path.replaceWith(str);
          return;
        }

        var parentPath = path.parentPath,
            scope = path.scope;

        if (parentPath.isMemberExpression({
          property: node
        }) || parentPath.isOptionalMemberExpression({
          property: node
        })) {
          parentPath.node.computed = true;
          path.replaceWith(str);
          return;
        }

        var binding = scope.getBinding(name);

        if (binding) {
          scope.rename(name, scope.generateUid(replaced));
          return;
        }

        throw path.buildCodeFrameError("Can't reference '".concat(name, "' as a bare identifier"));
      },
      "StringLiteral|DirectiveLiteral": function StringLiteralDirectiveLiteral(path) {
        var node = path.node;
        var extra = node.extra;
        if (extra == null ? void 0 : extra.raw) extra.raw = replaceUnicodeEscapes(extra.raw);
      },
      TemplateElement: function TemplateElement(path) {
        var node = path.node,
            parentPath = path.parentPath;
        var value = node.value;
        var firstEscape = getUnicodeEscape(value.raw);
        if (!firstEscape) return;
        var grandParent = parentPath.parentPath;

        if (grandParent.isTaggedTemplateExpression()) {
          throw path.buildCodeFrameError("Can't replace Unicode escape '".concat(firstEscape, "' inside tagged template literals. You can enable '@babel/plugin-transform-template-literals' to compile them to classic strings."));
        }

        value.raw = replaceUnicodeEscapes(value.raw);
      }
    }
  };
});

exports["default"] = _default;