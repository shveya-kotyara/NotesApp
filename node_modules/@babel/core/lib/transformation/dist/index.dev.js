"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(run),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(transformFile);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.run = run;

function _traverse() {
  var data = _interopRequireDefault(require("@babel/traverse"));

  _traverse = function _traverse() {
    return data;
  };

  return data;
}

var _pluginPass = _interopRequireDefault(require("./plugin-pass"));

var _blockHoistPlugin = _interopRequireDefault(require("./block-hoist-plugin"));

var _normalizeOpts = _interopRequireDefault(require("./normalize-opts"));

var _normalizeFile = _interopRequireDefault(require("./normalize-file"));

var _generate = _interopRequireDefault(require("./file/generate"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function run(config, code, ast) {
  var file, opts, _opts$filename, outputCode, outputMap, _ref, _opts$filename2;

  return regeneratorRuntime.wrap(function run$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield((0, _normalizeFile["default"])(config.passes, (0, _normalizeOpts["default"])(config), code, ast), "t0", 1);

        case 1:
          file = _context.t0;
          opts = file.opts;
          _context.prev = 3;
          return _context.delegateYield(transformFile(file, config.passes), "t1", 5);

        case 5:
          _context.next = 12;
          break;

        case 7:
          _context.prev = 7;
          _context.t2 = _context["catch"](3);
          _context.t2.message = "".concat((_opts$filename = opts.filename) != null ? _opts$filename : "unknown", ": ").concat(_context.t2.message);

          if (!_context.t2.code) {
            _context.t2.code = "BABEL_TRANSFORM_ERROR";
          }

          throw _context.t2;

        case 12:
          _context.prev = 12;

          if (opts.code !== false) {
            _ref = (0, _generate["default"])(config.passes, file);
            outputCode = _ref.outputCode;
            outputMap = _ref.outputMap;
          }

          _context.next = 21;
          break;

        case 16:
          _context.prev = 16;
          _context.t3 = _context["catch"](12);
          _context.t3.message = "".concat((_opts$filename2 = opts.filename) != null ? _opts$filename2 : "unknown", ": ").concat(_context.t3.message);

          if (!_context.t3.code) {
            _context.t3.code = "BABEL_GENERATE_ERROR";
          }

          throw _context.t3;

        case 21:
          return _context.abrupt("return", {
            metadata: file.metadata,
            options: opts,
            ast: opts.ast === true ? file.ast : null,
            code: outputCode === undefined ? null : outputCode,
            map: outputMap === undefined ? null : outputMap,
            sourceType: file.ast.program.sourceType
          });

        case 22:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[3, 7], [12, 16]]);
}

function transformFile(file, pluginPasses) {
  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, pluginPairs, passPairs, passes, visitors, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, plugin, pass, _i, _passPairs, _passPairs$_i, _plugin, _pass, fn, result, visitor, _i2, _passPairs2, _passPairs2$_i, _plugin2, _pass2, _fn, _result;

  return regeneratorRuntime.wrap(function transformFile$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 3;
          _iterator = pluginPasses[Symbol.iterator]();

        case 5:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 58;
            break;
          }

          pluginPairs = _step.value;
          passPairs = [];
          passes = [];
          visitors = [];
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context2.prev = 13;

          for (_iterator2 = pluginPairs.concat([(0, _blockHoistPlugin["default"])()])[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            plugin = _step2.value;
            pass = new _pluginPass["default"](file, plugin.key, plugin.options);
            passPairs.push([plugin, pass]);
            passes.push(pass);
            visitors.push(plugin.visitor);
          }

          _context2.next = 21;
          break;

        case 17:
          _context2.prev = 17;
          _context2.t0 = _context2["catch"](13);
          _didIteratorError2 = true;
          _iteratorError2 = _context2.t0;

        case 21:
          _context2.prev = 21;
          _context2.prev = 22;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 24:
          _context2.prev = 24;

          if (!_didIteratorError2) {
            _context2.next = 27;
            break;
          }

          throw _iteratorError2;

        case 27:
          return _context2.finish(24);

        case 28:
          return _context2.finish(21);

        case 29:
          _i = 0, _passPairs = passPairs;

        case 30:
          if (!(_i < _passPairs.length)) {
            _context2.next = 41;
            break;
          }

          _passPairs$_i = _slicedToArray(_passPairs[_i], 2), _plugin = _passPairs$_i[0], _pass = _passPairs$_i[1];
          fn = _plugin.pre;

          if (!fn) {
            _context2.next = 38;
            break;
          }

          result = fn.call(_pass, file);
          return _context2.delegateYield([], "t1", 36);

        case 36:
          if (!isThenable(result)) {
            _context2.next = 38;
            break;
          }

          throw new Error("You appear to be using an plugin with an async .pre, " + "which your current version of Babel does not support. " + "If you're using a published plugin, you may need to upgrade " + "your @babel/core version.");

        case 38:
          _i++;
          _context2.next = 30;
          break;

        case 41:
          visitor = _traverse()["default"].visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);
          (0, _traverse()["default"])(file.ast, visitor, file.scope);
          _i2 = 0, _passPairs2 = passPairs;

        case 44:
          if (!(_i2 < _passPairs2.length)) {
            _context2.next = 55;
            break;
          }

          _passPairs2$_i = _slicedToArray(_passPairs2[_i2], 2), _plugin2 = _passPairs2$_i[0], _pass2 = _passPairs2$_i[1];
          _fn = _plugin2.post;

          if (!_fn) {
            _context2.next = 52;
            break;
          }

          _result = _fn.call(_pass2, file);
          return _context2.delegateYield([], "t2", 50);

        case 50:
          if (!isThenable(_result)) {
            _context2.next = 52;
            break;
          }

          throw new Error("You appear to be using an plugin with an async .post, " + "which your current version of Babel does not support. " + "If you're using a published plugin, you may need to upgrade " + "your @babel/core version.");

        case 52:
          _i2++;
          _context2.next = 44;
          break;

        case 55:
          _iteratorNormalCompletion = true;
          _context2.next = 5;
          break;

        case 58:
          _context2.next = 64;
          break;

        case 60:
          _context2.prev = 60;
          _context2.t3 = _context2["catch"](3);
          _didIteratorError = true;
          _iteratorError = _context2.t3;

        case 64:
          _context2.prev = 64;
          _context2.prev = 65;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 67:
          _context2.prev = 67;

          if (!_didIteratorError) {
            _context2.next = 70;
            break;
          }

          throw _iteratorError;

        case 70:
          return _context2.finish(67);

        case 71:
          return _context2.finish(64);

        case 72:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, null, [[3, 60, 64, 72], [13, 17, 21, 29], [22,, 24, 28], [65,, 67, 71]]);
}

function isThenable(val) {
  return !!val && (_typeof(val) === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
}