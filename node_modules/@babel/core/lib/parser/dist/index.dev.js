"use strict";

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(parser);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = parser;

function _parser() {
  var data = require("@babel/parser");

  _parser = function _parser() {
    return data;
  };

  return data;
}

function _codeFrame() {
  var data = require("@babel/code-frame");

  _codeFrame = function _codeFrame() {
    return data;
  };

  return data;
}

var _missingPluginHelper = _interopRequireDefault(require("./util/missing-plugin-helper"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function parser(pluginPasses, _ref, code) {
  var parserOpts, _ref$highlightCode, highlightCode, _ref$filename, filename, results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, plugins, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, plugin, parserOverride, ast, loc, missingPlugin, codeFrame;

  return regeneratorRuntime.wrap(function parser$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          parserOpts = _ref.parserOpts, _ref$highlightCode = _ref.highlightCode, highlightCode = _ref$highlightCode === void 0 ? true : _ref$highlightCode, _ref$filename = _ref.filename, filename = _ref$filename === void 0 ? "unknown" : _ref$filename;
          _context.prev = 1;
          results = [];
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 6;
          _iterator = pluginPasses[Symbol.iterator]();

        case 8:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 32;
            break;
          }

          plugins = _step.value;
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context.prev = 13;

          for (_iterator2 = plugins[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            plugin = _step2.value;
            parserOverride = plugin.parserOverride;

            if (parserOverride) {
              ast = parserOverride(code, parserOpts, _parser().parse);
              if (ast !== undefined) results.push(ast);
            }
          }

          _context.next = 21;
          break;

        case 17:
          _context.prev = 17;
          _context.t0 = _context["catch"](13);
          _didIteratorError2 = true;
          _iteratorError2 = _context.t0;

        case 21:
          _context.prev = 21;
          _context.prev = 22;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 24:
          _context.prev = 24;

          if (!_didIteratorError2) {
            _context.next = 27;
            break;
          }

          throw _iteratorError2;

        case 27:
          return _context.finish(24);

        case 28:
          return _context.finish(21);

        case 29:
          _iteratorNormalCompletion = true;
          _context.next = 8;
          break;

        case 32:
          _context.next = 38;
          break;

        case 34:
          _context.prev = 34;
          _context.t1 = _context["catch"](6);
          _didIteratorError = true;
          _iteratorError = _context.t1;

        case 38:
          _context.prev = 38;
          _context.prev = 39;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 41:
          _context.prev = 41;

          if (!_didIteratorError) {
            _context.next = 44;
            break;
          }

          throw _iteratorError;

        case 44:
          return _context.finish(41);

        case 45:
          return _context.finish(38);

        case 46:
          if (!(results.length === 0)) {
            _context.next = 50;
            break;
          }

          return _context.abrupt("return", (0, _parser().parse)(code, parserOpts));

        case 50:
          if (!(results.length === 1)) {
            _context.next = 55;
            break;
          }

          return _context.delegateYield([], "t2", 52);

        case 52:
          if (!(typeof results[0].then === "function")) {
            _context.next = 54;
            break;
          }

          throw new Error("You appear to be using an async parser plugin, " + "which your current version of Babel does not support. " + "If you're using a published plugin, you may need to upgrade " + "your @babel/core version.");

        case 54:
          return _context.abrupt("return", results[0]);

        case 55:
          throw new Error("More than one plugin attempted to override parsing.");

        case 58:
          _context.prev = 58;
          _context.t3 = _context["catch"](1);

          if (_context.t3.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
            _context.t3.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module " + "or sourceType:unambiguous in your Babel config for this file.";
          }

          loc = _context.t3.loc, missingPlugin = _context.t3.missingPlugin;

          if (loc) {
            codeFrame = (0, _codeFrame().codeFrameColumns)(code, {
              start: {
                line: loc.line,
                column: loc.column + 1
              }
            }, {
              highlightCode: highlightCode
            });

            if (missingPlugin) {
              _context.t3.message = "".concat(filename, ": ") + (0, _missingPluginHelper["default"])(missingPlugin[0], loc, codeFrame);
            } else {
              _context.t3.message = "".concat(filename, ": ").concat(_context.t3.message, "\n\n") + codeFrame;
            }

            _context.t3.code = "BABEL_PARSE_ERROR";
          }

          throw _context.t3;

        case 64:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[1, 58], [6, 34, 38, 46], [13, 17, 21, 29], [22,, 24, 28], [39,, 41, 45]]);
}