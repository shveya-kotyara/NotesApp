"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return _full["default"];
  }
});
exports.loadOptionsAsync = exports.loadOptionsSync = exports.loadOptions = exports.loadPartialConfigAsync = exports.loadPartialConfigSync = exports.loadPartialConfig = void 0;

function _gensync() {
  var data = _interopRequireDefault(require("gensync"));

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var _full = _interopRequireDefault(require("./full"));

var _partial = require("./partial");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var loadOptionsRunner = (0, _gensync()["default"])(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee(opts) {
  var _config$options, config;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield((0, _full["default"])(opts), "t0", 1);

        case 1:
          config = _context.t0;
          return _context.abrupt("return", (_config$options = config == null ? void 0 : config.options) != null ? _config$options : null);

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

var maybeErrback = function maybeErrback(runner) {
  return function (opts, callback) {
    if (callback === undefined && typeof opts === "function") {
      callback = opts;
      opts = undefined;
    }

    return callback ? runner.errback(opts, callback) : runner.sync(opts);
  };
};

var loadPartialConfig = maybeErrback(_partial.loadPartialConfig);
exports.loadPartialConfig = loadPartialConfig;
var loadPartialConfigSync = _partial.loadPartialConfig.sync;
exports.loadPartialConfigSync = loadPartialConfigSync;
var loadPartialConfigAsync = _partial.loadPartialConfig.async;
exports.loadPartialConfigAsync = loadPartialConfigAsync;
var loadOptions = maybeErrback(loadOptionsRunner);
exports.loadOptions = loadOptions;
var loadOptionsSync = loadOptionsRunner.sync;
exports.loadOptionsSync = loadOptionsSync;
var loadOptionsAsync = loadOptionsRunner.async;
exports.loadOptionsAsync = loadOptionsAsync;