"use strict";

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(loadPluginDescriptor),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(loadPresetDescriptor);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _gensync() {
  var data = _interopRequireDefault(require("gensync"));

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var _async = require("../gensync-utils/async");

var _util = require("./util");

var context = _interopRequireWildcard(require("../index"));

var _plugin = _interopRequireDefault(require("./plugin"));

var _item = require("./item");

var _configChain = require("./config-chain");

function _traverse() {
  var data = _interopRequireDefault(require("@babel/traverse"));

  _traverse = function _traverse() {
    return data;
  };

  return data;
}

var _caching = require("./caching");

var _options = require("./validation/options");

var _plugins = require("./validation/plugins");

var _configApi = _interopRequireDefault(require("./helpers/config-api"));

var _partial = _interopRequireDefault(require("./partial"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var _default = (0, _gensync()["default"])(
/*#__PURE__*/
regeneratorRuntime.mark(function loadFullConfig(inputOpts) {
  var result, options, context, fileHandling, optionDefaults, plugins, presets, toDescriptor, presetsDescriptors, initialPluginsDescriptors, pluginDescriptorsByPass, passes, ignored, opts;
  return regeneratorRuntime.wrap(function loadFullConfig$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          return _context3.delegateYield((0, _partial["default"])(inputOpts), "t0", 1);

        case 1:
          result = _context3.t0;

          if (result) {
            _context3.next = 4;
            break;
          }

          return _context3.abrupt("return", null);

        case 4:
          options = result.options, context = result.context, fileHandling = result.fileHandling;

          if (!(fileHandling === "ignored")) {
            _context3.next = 7;
            break;
          }

          return _context3.abrupt("return", null);

        case 7:
          optionDefaults = {};
          plugins = options.plugins, presets = options.presets;

          if (!(!plugins || !presets)) {
            _context3.next = 11;
            break;
          }

          throw new Error("Assertion failure - plugins and presets exist");

        case 11:
          toDescriptor = function toDescriptor(item) {
            var desc = (0, _item.getItemDescriptor)(item);

            if (!desc) {
              throw new Error("Assertion failure - must be config item");
            }

            return desc;
          };

          presetsDescriptors = presets.map(toDescriptor);
          initialPluginsDescriptors = plugins.map(toDescriptor);
          pluginDescriptorsByPass = [[]];
          passes = [];
          return _context3.delegateYield(enhanceError(context,
          /*#__PURE__*/
          regeneratorRuntime.mark(function recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
            var presets, i, descriptor, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, preset, pass, _ignored;

            return regeneratorRuntime.wrap(function recursePresetDescriptors$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    presets = [];
                    i = 0;

                  case 2:
                    if (!(i < rawPresets.length)) {
                      _context.next = 30;
                      break;
                    }

                    descriptor = rawPresets[i];

                    if (!(descriptor.options !== false)) {
                      _context.next = 27;
                      break;
                    }

                    _context.prev = 5;

                    if (!descriptor.ownPass) {
                      _context.next = 15;
                      break;
                    }

                    _context.t0 = presets;
                    return _context.delegateYield(loadPresetDescriptor(descriptor, context), "t1", 9);

                  case 9:
                    _context.t2 = _context.t1;
                    _context.t3 = [];
                    _context.t4 = {
                      preset: _context.t2,
                      pass: _context.t3
                    };

                    _context.t0.push.call(_context.t0, _context.t4);

                    _context.next = 21;
                    break;

                  case 15:
                    _context.t5 = presets;
                    return _context.delegateYield(loadPresetDescriptor(descriptor, context), "t6", 17);

                  case 17:
                    _context.t7 = _context.t6;
                    _context.t8 = pluginDescriptorsPass;
                    _context.t9 = {
                      preset: _context.t7,
                      pass: _context.t8
                    };

                    _context.t5.unshift.call(_context.t5, _context.t9);

                  case 21:
                    _context.next = 27;
                    break;

                  case 23:
                    _context.prev = 23;
                    _context.t10 = _context["catch"](5);

                    if (_context.t10.code === "BABEL_UNKNOWN_OPTION") {
                      (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", _context.t10);
                    }

                    throw _context.t10;

                  case 27:
                    i++;
                    _context.next = 2;
                    break;

                  case 30:
                    if (!(presets.length > 0)) {
                      _context.next = 64;
                      break;
                    }

                    pluginDescriptorsByPass.splice.apply(pluginDescriptorsByPass, [1, 0].concat(_toConsumableArray(presets.map(function (o) {
                      return o.pass;
                    }).filter(function (p) {
                      return p !== pluginDescriptorsPass;
                    }))));
                    _iteratorNormalCompletion = true;
                    _didIteratorError = false;
                    _iteratorError = undefined;
                    _context.prev = 35;
                    _iterator = presets[Symbol.iterator]();

                  case 37:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                      _context.next = 50;
                      break;
                    }

                    _step$value = _step.value, preset = _step$value.preset, pass = _step$value.pass;

                    if (preset) {
                      _context.next = 41;
                      break;
                    }

                    return _context.abrupt("return", true);

                  case 41:
                    pass.push.apply(pass, _toConsumableArray(preset.plugins));
                    return _context.delegateYield(recursePresetDescriptors(preset.presets, pass), "t11", 43);

                  case 43:
                    _ignored = _context.t11;

                    if (!_ignored) {
                      _context.next = 46;
                      break;
                    }

                    return _context.abrupt("return", true);

                  case 46:
                    preset.options.forEach(function (opts) {
                      (0, _util.mergeOptions)(optionDefaults, opts);
                    });

                  case 47:
                    _iteratorNormalCompletion = true;
                    _context.next = 37;
                    break;

                  case 50:
                    _context.next = 56;
                    break;

                  case 52:
                    _context.prev = 52;
                    _context.t12 = _context["catch"](35);
                    _didIteratorError = true;
                    _iteratorError = _context.t12;

                  case 56:
                    _context.prev = 56;
                    _context.prev = 57;

                    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                      _iterator["return"]();
                    }

                  case 59:
                    _context.prev = 59;

                    if (!_didIteratorError) {
                      _context.next = 62;
                      break;
                    }

                    throw _iteratorError;

                  case 62:
                    return _context.finish(59);

                  case 63:
                    return _context.finish(56);

                  case 64:
                  case "end":
                    return _context.stop();
                }
              }
            }, recursePresetDescriptors, null, [[5, 23], [35, 52, 56, 64], [57,, 59, 63]]);
          }))(presetsDescriptors, pluginDescriptorsByPass[0]), "t1", 17);

        case 17:
          ignored = _context3.t1;

          if (!ignored) {
            _context3.next = 20;
            break;
          }

          return _context3.abrupt("return", null);

        case 20:
          opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          return _context3.delegateYield(enhanceError(context,
          /*#__PURE__*/
          regeneratorRuntime.mark(function loadPluginDescriptors() {
            var _pluginDescriptorsByP;

            var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, descs, pass, i, descriptor;

            return regeneratorRuntime.wrap(function loadPluginDescriptors$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    (_pluginDescriptorsByP = pluginDescriptorsByPass[0]).unshift.apply(_pluginDescriptorsByP, _toConsumableArray(initialPluginsDescriptors));

                    _iteratorNormalCompletion2 = true;
                    _didIteratorError2 = false;
                    _iteratorError2 = undefined;
                    _context2.prev = 4;
                    _iterator2 = pluginDescriptorsByPass[Symbol.iterator]();

                  case 6:
                    if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                      _context2.next = 31;
                      break;
                    }

                    descs = _step2.value;
                    pass = [];
                    passes.push(pass);
                    i = 0;

                  case 11:
                    if (!(i < descs.length)) {
                      _context2.next = 28;
                      break;
                    }

                    descriptor = descs[i];

                    if (!(descriptor.options !== false)) {
                      _context2.next = 25;
                      break;
                    }

                    _context2.prev = 14;
                    _context2.t0 = pass;
                    return _context2.delegateYield(loadPluginDescriptor(descriptor, context), "t1", 17);

                  case 17:
                    _context2.t2 = _context2.t1;

                    _context2.t0.push.call(_context2.t0, _context2.t2);

                    _context2.next = 25;
                    break;

                  case 21:
                    _context2.prev = 21;
                    _context2.t3 = _context2["catch"](14);

                    if (_context2.t3.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY") {
                      (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", _context2.t3);
                    }

                    throw _context2.t3;

                  case 25:
                    i++;
                    _context2.next = 11;
                    break;

                  case 28:
                    _iteratorNormalCompletion2 = true;
                    _context2.next = 6;
                    break;

                  case 31:
                    _context2.next = 37;
                    break;

                  case 33:
                    _context2.prev = 33;
                    _context2.t4 = _context2["catch"](4);
                    _didIteratorError2 = true;
                    _iteratorError2 = _context2.t4;

                  case 37:
                    _context2.prev = 37;
                    _context2.prev = 38;

                    if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                      _iterator2["return"]();
                    }

                  case 40:
                    _context2.prev = 40;

                    if (!_didIteratorError2) {
                      _context2.next = 43;
                      break;
                    }

                    throw _iteratorError2;

                  case 43:
                    return _context2.finish(40);

                  case 44:
                    return _context2.finish(37);

                  case 45:
                  case "end":
                    return _context2.stop();
                }
              }
            }, loadPluginDescriptors, null, [[4, 33, 37, 45], [14, 21], [38,, 40, 44]]);
          }))(), "t2", 23);

        case 23:
          opts.plugins = passes[0];
          opts.presets = passes.slice(1).filter(function (plugins) {
            return plugins.length > 0;
          }).map(function (plugins) {
            return {
              plugins: plugins
            };
          });
          opts.passPerPreset = opts.presets.length > 0;
          return _context3.abrupt("return", {
            options: opts,
            passes: passes
          });

        case 27:
        case "end":
          return _context3.stop();
      }
    }
  }, loadFullConfig);
}));

exports["default"] = _default;

function enhanceError(context, fn) {
  return (
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(arg1, arg2) {
      return regeneratorRuntime.wrap(function _callee$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              return _context4.delegateYield(fn(arg1, arg2), "t0", 2);

            case 2:
              return _context4.abrupt("return", _context4.t0);

            case 5:
              _context4.prev = 5;
              _context4.t1 = _context4["catch"](0);

              if (!/^\[BABEL\]/.test(_context4.t1.message)) {
                _context4.t1.message = "[BABEL] ".concat(context.filename || "unknown", ": ").concat(_context4.t1.message);
              }

              throw _context4.t1;

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee, null, [[0, 5]]);
    })
  );
}

var loadDescriptor = (0, _caching.makeWeakCache)(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2(_ref, cache) {
  var value, options, dirname, alias, item, api;
  return regeneratorRuntime.wrap(function _callee2$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          value = _ref.value, options = _ref.options, dirname = _ref.dirname, alias = _ref.alias;

          if (!(options === false)) {
            _context5.next = 3;
            break;
          }

          throw new Error("Assertion failure");

        case 3:
          options = options || {};
          item = value;

          if (!(typeof value === "function")) {
            _context5.next = 15;
            break;
          }

          api = Object.assign({}, context, (0, _configApi["default"])(cache));
          _context5.prev = 7;
          item = value(api, options, dirname);
          _context5.next = 15;
          break;

        case 11:
          _context5.prev = 11;
          _context5.t0 = _context5["catch"](7);

          if (alias) {
            _context5.t0.message += " (While processing: ".concat(JSON.stringify(alias), ")");
          }

          throw _context5.t0;

        case 15:
          if (!(!item || _typeof(item) !== "object")) {
            _context5.next = 17;
            break;
          }

          throw new Error("Plugin/Preset did not return an object.");

        case 17:
          if (!(typeof item.then === "function")) {
            _context5.next = 20;
            break;
          }

          return _context5.delegateYield([], "t1", 19);

        case 19:
          throw new Error("You appear to be using an async plugin, " + "which your current version of Babel does not support. " + "If you're using a published plugin, " + "you may need to upgrade your @babel/core version.");

        case 20:
          return _context5.abrupt("return", {
            value: item,
            options: options,
            dirname: dirname,
            alias: alias
          });

        case 21:
        case "end":
          return _context5.stop();
      }
    }
  }, _callee2, null, [[7, 11]]);
}));

function loadPluginDescriptor(descriptor, context) {
  return regeneratorRuntime.wrap(function loadPluginDescriptor$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!(descriptor.value instanceof _plugin["default"])) {
            _context6.next = 4;
            break;
          }

          if (!descriptor.options) {
            _context6.next = 3;
            break;
          }

          throw new Error("Passed options to an existing Plugin instance will not work.");

        case 3:
          return _context6.abrupt("return", descriptor.value);

        case 4:
          _context6.t0 = instantiatePlugin;
          return _context6.delegateYield(loadDescriptor(descriptor, context), "t1", 6);

        case 6:
          _context6.t2 = _context6.t1;
          _context6.t3 = context;
          return _context6.delegateYield((0, _context6.t0)(_context6.t2, _context6.t3), "t4", 9);

        case 9:
          return _context6.abrupt("return", _context6.t4);

        case 10:
        case "end":
          return _context6.stop();
      }
    }
  }, _marked);
}

var instantiatePlugin = (0, _caching.makeWeakCache)(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3(_ref2, cache) {
  var value, options, dirname, alias, pluginObj, plugin, inheritsDescriptor, inherits;
  return regeneratorRuntime.wrap(function _callee3$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          value = _ref2.value, options = _ref2.options, dirname = _ref2.dirname, alias = _ref2.alias;
          pluginObj = (0, _plugins.validatePluginObject)(value);
          plugin = Object.assign({}, pluginObj);

          if (plugin.visitor) {
            plugin.visitor = _traverse()["default"].explode(Object.assign({}, plugin.visitor));
          }

          if (!plugin.inherits) {
            _context7.next = 12;
            break;
          }

          inheritsDescriptor = {
            name: undefined,
            alias: "".concat(alias, "$inherits"),
            value: plugin.inherits,
            options: options,
            dirname: dirname
          };
          return _context7.delegateYield((0, _async.forwardAsync)(loadPluginDescriptor, function (run) {
            return cache.invalidate(function (data) {
              return run(inheritsDescriptor, data);
            });
          }), "t0", 7);

        case 7:
          inherits = _context7.t0;
          plugin.pre = chain(inherits.pre, plugin.pre);
          plugin.post = chain(inherits.post, plugin.post);
          plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);
          plugin.visitor = _traverse()["default"].visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);

        case 12:
          return _context7.abrupt("return", new _plugin["default"](plugin, options, alias));

        case 13:
        case "end":
          return _context7.stop();
      }
    }
  }, _callee3);
}));

var validateIfOptionNeedsFilename = function validateIfOptionNeedsFilename(options, descriptor) {
  if (options.test || options.include || options.exclude) {
    var formattedPresetName = descriptor.name ? "\"".concat(descriptor.name, "\"") : "/* your preset */";
    throw new Error(["Preset ".concat(formattedPresetName, " requires a filename to be set when babel is called directly,"), "```", "babel.transform(code, { filename: 'file.ts', presets: [".concat(formattedPresetName, "] });"), "```", "See https://babeljs.io/docs/en/options#filename for more information."].join("\n"));
  }
};

var validatePreset = function validatePreset(preset, context, descriptor) {
  if (!context.filename) {
    var options = preset.options;
    validateIfOptionNeedsFilename(options, descriptor);

    if (options.overrides) {
      options.overrides.forEach(function (overrideOptions) {
        return validateIfOptionNeedsFilename(overrideOptions, descriptor);
      });
    }
  }
};

function loadPresetDescriptor(descriptor, context) {
  var preset;
  return regeneratorRuntime.wrap(function loadPresetDescriptor$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          _context8.t0 = instantiatePreset;
          return _context8.delegateYield(loadDescriptor(descriptor, context), "t1", 2);

        case 2:
          _context8.t2 = _context8.t1;
          preset = (0, _context8.t0)(_context8.t2);
          validatePreset(preset, context, descriptor);
          return _context8.delegateYield((0, _configChain.buildPresetChain)(preset, context), "t3", 6);

        case 6:
          return _context8.abrupt("return", _context8.t3);

        case 7:
        case "end":
          return _context8.stop();
      }
    }
  }, _marked2);
}

var instantiatePreset = (0, _caching.makeWeakCacheSync)(function (_ref3) {
  var value = _ref3.value,
      dirname = _ref3.dirname,
      alias = _ref3.alias;
  return {
    options: (0, _options.validate)("preset", value),
    alias: alias,
    dirname: dirname
  };
});

function chain(a, b) {
  var fns = [a, b].filter(Boolean);
  if (fns.length <= 1) return fns[0];
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = fns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var fn = _step3.value;
        fn.apply(this, args);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  };
}