"use strict";

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(findConfigUpwards),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(findPackageData),
    _marked3 =
/*#__PURE__*/
regeneratorRuntime.mark(findRelativeConfig),
    _marked4 =
/*#__PURE__*/
regeneratorRuntime.mark(findRootConfig),
    _marked5 =
/*#__PURE__*/
regeneratorRuntime.mark(loadConfig),
    _marked6 =
/*#__PURE__*/
regeneratorRuntime.mark(resolveShowConfigPath);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findConfigUpwards = findConfigUpwards;
exports.findPackageData = findPackageData;
exports.findRelativeConfig = findRelativeConfig;
exports.findRootConfig = findRootConfig;
exports.loadConfig = loadConfig;
exports.resolveShowConfigPath = resolveShowConfigPath;
exports.resolvePlugin = resolvePlugin;
exports.resolvePreset = resolvePreset;
exports.loadPlugin = loadPlugin;
exports.loadPreset = loadPreset;
exports.ROOT_CONFIG_FILENAMES = void 0;

function findConfigUpwards(rootDir) {
  return regeneratorRuntime.wrap(function findConfigUpwards$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", null);

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function findPackageData(filepath) {
  return regeneratorRuntime.wrap(function findPackageData$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt("return", {
            filepath: filepath,
            directories: [],
            pkg: null,
            isPackage: false
          });

        case 1:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function findRelativeConfig(pkgData, envName, caller) {
  return regeneratorRuntime.wrap(function findRelativeConfig$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          return _context3.abrupt("return", {
            pkg: null,
            config: null,
            ignore: null
          });

        case 1:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3);
}

function findRootConfig(dirname, envName, caller) {
  return regeneratorRuntime.wrap(function findRootConfig$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          return _context4.abrupt("return", null);

        case 1:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4);
}

function loadConfig(name, dirname, envName, caller) {
  return regeneratorRuntime.wrap(function loadConfig$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          throw new Error("Cannot load ".concat(name, " relative to ").concat(dirname, " in a browser"));

        case 1:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked5);
}

function resolveShowConfigPath(dirname) {
  return regeneratorRuntime.wrap(function resolveShowConfigPath$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          return _context6.abrupt("return", null);

        case 1:
        case "end":
          return _context6.stop();
      }
    }
  }, _marked6);
}

var ROOT_CONFIG_FILENAMES = [];
exports.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;

function resolvePlugin(name, dirname) {
  return null;
}

function resolvePreset(name, dirname) {
  return null;
}

function loadPlugin(name, dirname) {
  throw new Error("Cannot load plugin ".concat(name, " relative to ").concat(dirname, " in a browser"));
}

function loadPreset(name, dirname) {
  throw new Error("Cannot load preset ".concat(name, " relative to ").concat(dirname, " in a browser"));
}