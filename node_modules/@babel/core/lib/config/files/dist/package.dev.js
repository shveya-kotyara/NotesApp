"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(findPackageData);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findPackageData = findPackageData;

function _path() {
  var data = _interopRequireDefault(require("path"));

  _path = function _path() {
    return data;
  };

  return data;
}

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var PACKAGE_FILENAME = "package.json";

function findPackageData(filepath) {
  var pkg, directories, isPackage, dirname, nextLoc;
  return regeneratorRuntime.wrap(function findPackageData$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          pkg = null;
          directories = [];
          isPackage = true;
          dirname = _path()["default"].dirname(filepath);

        case 4:
          if (!(!pkg && _path()["default"].basename(dirname) !== "node_modules")) {
            _context.next = 15;
            break;
          }

          directories.push(dirname);
          return _context.delegateYield(readConfigPackage(_path()["default"].join(dirname, PACKAGE_FILENAME)), "t0", 7);

        case 7:
          pkg = _context.t0;
          nextLoc = _path()["default"].dirname(dirname);

          if (!(dirname === nextLoc)) {
            _context.next = 12;
            break;
          }

          isPackage = false;
          return _context.abrupt("break", 15);

        case 12:
          dirname = nextLoc;
          _context.next = 4;
          break;

        case 15:
          return _context.abrupt("return", {
            filepath: filepath,
            directories: directories,
            pkg: pkg,
            isPackage: isPackage
          });

        case 16:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

var readConfigPackage = (0, _utils.makeStaticFileCache)(function (filepath, content) {
  var options;

  try {
    options = JSON.parse(content);
  } catch (err) {
    err.message = "".concat(filepath, ": Error while parsing JSON - ").concat(err.message);
    throw err;
  }

  if (!options) throw new Error("".concat(filepath, ": No config detected"));

  if (_typeof(options) !== "object") {
    throw new Error("".concat(filepath, ": Config returned typeof ").concat(_typeof(options)));
  }

  if (Array.isArray(options)) {
    throw new Error("".concat(filepath, ": Expected config object but found array"));
  }

  return {
    filepath: filepath,
    dirname: _path()["default"].dirname(filepath),
    options: options
  };
});