"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformFileAsync = exports.transformFileSync = exports.transformFile = void 0;

function _gensync() {
  var data = _interopRequireDefault(require("gensync"));

  _gensync = function _gensync() {
    return data;
  };

  return data;
}

var _config = _interopRequireDefault(require("./config"));

var _transformation = require("./transformation");

var fs = _interopRequireWildcard(require("./gensync-utils/fs"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

({});
var transformFileRunner = (0, _gensync()["default"])(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee(filename, opts) {
  var options, config, code;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          options = Object.assign({}, opts, {
            filename: filename
          });
          return _context.delegateYield((0, _config["default"])(options), "t0", 2);

        case 2:
          config = _context.t0;

          if (!(config === null)) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("return", null);

        case 5:
          return _context.delegateYield(fs.readFile(filename, "utf8"), "t1", 6);

        case 6:
          code = _context.t1;
          return _context.delegateYield((0, _transformation.run)(config, code), "t2", 8);

        case 8:
          return _context.abrupt("return", _context.t2);

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));
var transformFile = transformFileRunner.errback;
exports.transformFile = transformFile;
var transformFileSync = transformFileRunner.sync;
exports.transformFileSync = transformFileSync;
var transformFileAsync = transformFileRunner.async;
exports.transformFileAsync = transformFileAsync;