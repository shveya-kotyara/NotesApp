"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SHOULD_SKIP = exports.SHOULD_STOP = exports.REMOVED = void 0;

var virtualTypes = _interopRequireWildcard(require("./lib/virtual-types"));

var _debug = _interopRequireDefault(require("debug"));

var _index = _interopRequireDefault(require("../index"));

var _scope = _interopRequireDefault(require("../scope"));

var t = _interopRequireWildcard(require("@babel/types"));

var _cache = require("../cache");

var _generator = _interopRequireDefault(require("@babel/generator"));

var NodePath_ancestry = _interopRequireWildcard(require("./ancestry"));

var NodePath_inference = _interopRequireWildcard(require("./inference"));

var NodePath_replacement = _interopRequireWildcard(require("./replacement"));

var NodePath_evaluation = _interopRequireWildcard(require("./evaluation"));

var NodePath_conversion = _interopRequireWildcard(require("./conversion"));

var NodePath_introspection = _interopRequireWildcard(require("./introspection"));

var NodePath_context = _interopRequireWildcard(require("./context"));

var NodePath_removal = _interopRequireWildcard(require("./removal"));

var NodePath_modification = _interopRequireWildcard(require("./modification"));

var NodePath_family = _interopRequireWildcard(require("./family"));

var NodePath_comments = _interopRequireWildcard(require("./comments"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var _debug2 = (0, _debug["default"])("babel");

var REMOVED = 1 << 0;
exports.REMOVED = REMOVED;
var SHOULD_STOP = 1 << 1;
exports.SHOULD_STOP = SHOULD_STOP;
var SHOULD_SKIP = 1 << 2;
exports.SHOULD_SKIP = SHOULD_SKIP;

var NodePath =
/*#__PURE__*/
function () {
  function NodePath(hub, parent) {
    _classCallCheck(this, NodePath);

    this.contexts = [];
    this.state = null;
    this.opts = null;
    this._traverseFlags = 0;
    this.skipKeys = null;
    this.parentPath = null;
    this.container = null;
    this.listKey = null;
    this.key = null;
    this.node = null;
    this.type = null;
    this.parent = parent;
    this.hub = hub;
    this.data = null;
    this.context = null;
    this.scope = null;
  }

  _createClass(NodePath, [{
    key: "getScope",
    value: function getScope(scope) {
      return this.isScope() ? new _scope["default"](this) : scope;
    }
  }, {
    key: "setData",
    value: function setData(key, val) {
      if (this.data == null) {
        this.data = Object.create(null);
      }

      return this.data[key] = val;
    }
  }, {
    key: "getData",
    value: function getData(key, def) {
      if (this.data == null) {
        this.data = Object.create(null);
      }

      var val = this.data[key];
      if (val === undefined && def !== undefined) val = this.data[key] = def;
      return val;
    }
  }, {
    key: "buildCodeFrameError",
    value: function buildCodeFrameError(msg) {
      var Error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SyntaxError;
      return this.hub.buildError(this.node, msg, Error);
    }
  }, {
    key: "traverse",
    value: function traverse(visitor, state) {
      (0, _index["default"])(this.node, visitor, this.scope, state, this);
    }
  }, {
    key: "set",
    value: function set(key, node) {
      t.validate(this.node, key, node);
      this.node[key] = node;
    }
  }, {
    key: "getPathLocation",
    value: function getPathLocation() {
      var parts = [];
      var path = this;

      do {
        var key = path.key;
        if (path.inList) key = "".concat(path.listKey, "[").concat(key, "]");
        parts.unshift(key);
      } while (path = path.parentPath);

      return parts.join(".");
    }
  }, {
    key: "debug",
    value: function debug(message) {
      if (!_debug2.enabled) return;

      _debug2("".concat(this.getPathLocation(), " ").concat(this.type, ": ").concat(message));
    }
  }, {
    key: "toString",
    value: function toString() {
      return (0, _generator["default"])(this.node).code;
    }
  }, {
    key: "inList",
    get: function get() {
      return !!this.listKey;
    },
    set: function set(inList) {
      if (!inList) {
        this.listKey = null;
      }
    }
  }, {
    key: "parentKey",
    get: function get() {
      return this.listKey || this.key;
    }
  }, {
    key: "shouldSkip",
    get: function get() {
      return !!(this._traverseFlags & SHOULD_SKIP);
    },
    set: function set(v) {
      if (v) {
        this._traverseFlags |= SHOULD_SKIP;
      } else {
        this._traverseFlags &= ~SHOULD_SKIP;
      }
    }
  }, {
    key: "shouldStop",
    get: function get() {
      return !!(this._traverseFlags & SHOULD_STOP);
    },
    set: function set(v) {
      if (v) {
        this._traverseFlags |= SHOULD_STOP;
      } else {
        this._traverseFlags &= ~SHOULD_STOP;
      }
    }
  }, {
    key: "removed",
    get: function get() {
      return !!(this._traverseFlags & REMOVED);
    },
    set: function set(v) {
      if (v) {
        this._traverseFlags |= REMOVED;
      } else {
        this._traverseFlags &= ~REMOVED;
      }
    }
  }], [{
    key: "get",
    value: function get(_ref) {
      var hub = _ref.hub,
          parentPath = _ref.parentPath,
          parent = _ref.parent,
          container = _ref.container,
          listKey = _ref.listKey,
          key = _ref.key;

      if (!hub && parentPath) {
        hub = parentPath.hub;
      }

      if (!parent) {
        throw new Error("To get a node path the parent needs to exist");
      }

      var targetNode = container[key];
      var paths = _cache.path.get(parent) || [];

      if (!_cache.path.has(parent)) {
        _cache.path.set(parent, paths);
      }

      var path;

      for (var i = 0; i < paths.length; i++) {
        var pathCheck = paths[i];

        if (pathCheck.node === targetNode) {
          path = pathCheck;
          break;
        }
      }

      if (!path) {
        path = new NodePath(hub, parent);
        paths.push(path);
      }

      path.setup(parentPath, container, listKey, key);
      return path;
    }
  }]);

  return NodePath;
}();

exports["default"] = NodePath;
Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments);
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  var _loop = function _loop() {
    var type = _step.value;
    var typeKey = "is".concat(type);
    var fn = t[typeKey];

    NodePath.prototype[typeKey] = function (opts) {
      return fn(this.node, opts);
    };

    NodePath.prototype["assert".concat(type)] = function (opts) {
      if (!fn(this.node, opts)) {
        throw new TypeError("Expected node path of type ".concat(type));
      }
    };
  };

  for (var _iterator = t.TYPES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    _loop();
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
      _iterator["return"]();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _loop2 = function _loop2() {
  var type = _Object$keys[_i];
  if (type[0] === "_") return "continue";
  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);
  var virtualType = virtualTypes[type];

  NodePath.prototype["is".concat(type)] = function (opts) {
    return virtualType.checkPath(this, opts);
  };
};

for (var _i = 0, _Object$keys = Object.keys(virtualTypes); _i < _Object$keys.length; _i++) {
  var _ret = _loop2();

  if (_ret === "continue") continue;
}