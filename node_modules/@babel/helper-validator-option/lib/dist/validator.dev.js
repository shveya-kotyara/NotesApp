"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionValidator = void 0;

var _findSuggestion = require("./find-suggestion.js");

var OptionValidator =
/*#__PURE__*/
function () {
  function OptionValidator(descriptor) {
    _classCallCheck(this, OptionValidator);

    this.descriptor = descriptor;
  }

  _createClass(OptionValidator, [{
    key: "validateTopLevelOptions",
    value: function validateTopLevelOptions(options, TopLevelOptionShape) {
      var validOptionNames = Object.keys(TopLevelOptionShape);

      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {
        var option = _Object$keys[_i];

        if (!validOptionNames.includes(option)) {
          throw new Error(this.formatMessage("'".concat(option, "' is not a valid top-level option.\n- Did you mean '").concat((0, _findSuggestion.findSuggestion)(option, validOptionNames), "'?")));
        }
      }
    }
  }, {
    key: "validateBooleanOption",
    value: function validateBooleanOption(name, value, defaultValue) {
      if (value === undefined) {
        value = defaultValue;
      } else {
        this.invariant(typeof value === "boolean", "'".concat(name, "' option must be a boolean."));
      }

      return value;
    }
  }, {
    key: "validateStringOption",
    value: function validateStringOption(name, value, defaultValue) {
      if (value === undefined) {
        value = defaultValue;
      } else {
        this.invariant(typeof value === "string", "'".concat(name, "' option must be a string."));
      }

      return value;
    }
  }, {
    key: "invariant",
    value: function invariant(condition, message) {
      if (!condition) {
        throw new Error(this.formatMessage(message));
      }
    }
  }, {
    key: "formatMessage",
    value: function formatMessage(message) {
      return "".concat(this.descriptor, ": ").concat(message);
    }
  }]);

  return OptionValidator;
}();

exports.OptionValidator = OptionValidator;