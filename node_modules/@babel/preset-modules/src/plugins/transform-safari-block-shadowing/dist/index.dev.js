"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

/**
 * Fixes block-shadowed let/const bindings in Safari 10/11.
 * https://kangax.github.io/compat-table/es6/#test-let_scope_shadow_resolution
 */
function _default(_ref) {
  var t = _ref.types;
  return {
    name: "transform-safari-block-shadowing",
    visitor: {
      VariableDeclarator: function VariableDeclarator(path) {
        // the issue only affects let and const bindings:
        var kind = path.parent.kind;
        if (kind !== "let" && kind !== "const") return; // ignore non-block-scoped bindings:

        var block = path.scope.block;
        if (t.isFunction(block) || t.isProgram(block)) return;
        var bindings = t.getOuterBindingIdentifiers(path.node.id);

        for (var _i = 0, _Object$keys = Object.keys(bindings); _i < _Object$keys.length; _i++) {
          var name = _Object$keys[_i];
          var scope = path.scope; // ignore parent bindings (note: impossible due to let/const?)

          if (!scope.hasOwnBinding(name)) continue; // check if shadowed within the nearest function/program boundary

          while (scope = scope.parent) {
            if (scope.hasOwnBinding(name)) {
              path.scope.rename(name);
              break;
            }

            if (t.isFunction(scope.block) || t.isProgram(scope.block)) {
              break;
            }
          }
        }
      }
    }
  };
}