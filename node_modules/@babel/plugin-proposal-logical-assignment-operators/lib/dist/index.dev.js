"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _helperPluginUtils = require("@babel/helper-plugin-utils");

var _pluginSyntaxLogicalAssignmentOperators = _interopRequireDefault(require("@babel/plugin-syntax-logical-assignment-operators"));

var _core = require("@babel/core");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var _default = (0, _helperPluginUtils.declare)(function (api) {
  api.assertVersion(7);
  return {
    name: "proposal-logical-assignment-operators",
    inherits: _pluginSyntaxLogicalAssignmentOperators["default"],
    visitor: {
      AssignmentExpression: function AssignmentExpression(path) {
        var node = path.node,
            scope = path.scope;
        var operator = node.operator,
            left = node.left,
            right = node.right;
        var operatorTrunc = operator.slice(0, -1);

        if (!_core.types.LOGICAL_OPERATORS.includes(operatorTrunc)) {
          return;
        }

        var lhs = _core.types.cloneNode(left);

        if (_core.types.isMemberExpression(left)) {
          var object = left.object,
              property = left.property,
              computed = left.computed;
          var memo = scope.maybeGenerateMemoised(object);

          if (memo) {
            left.object = memo;
            lhs.object = _core.types.assignmentExpression("=", _core.types.cloneNode(memo), object);
          }

          if (computed) {
            var _memo = scope.maybeGenerateMemoised(property);

            if (_memo) {
              left.property = _memo;
              lhs.property = _core.types.assignmentExpression("=", _core.types.cloneNode(_memo), property);
            }
          }
        }

        path.replaceWith(_core.types.logicalExpression(operatorTrunc, lhs, _core.types.assignmentExpression("=", left, right)));
      }
    }
  };
});

exports["default"] = _default;