'use strict';

exports.type = 'full';
exports.active = true;
exports.description = 'removes unused IDs and minifies used';
exports.params = {
  remove: true,
  minify: true,
  prefix: '',
  preserve: [],
  preservePrefixes: [],
  force: false
};
var referencesProps = new Set(require('./_collections').referencesProps),
    regReferencesUrl = /\burl\(("|')?#(.+?)\1\)/,
    regReferencesHref = /^#(.+?)$/,
    regReferencesBegin = /(\w+)\./,
    styleOrScript = ['style', 'script'],
    generateIDchars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],
    maxIDindex = generateIDchars.length - 1;
/**
 * Remove unused and minify used IDs
 * (only if there are no any <style> or <script>).
 *
 * @param {Object} item current iteration item
 * @param {Object} params plugin params
 *
 * @author Kir Belevich
 */

exports.fn = function (data, params) {
  var currentID,
      currentIDstring,
      IDs = new Map(),
      referencesIDs = new Map(),
      hasStyleOrScript = false,
      preserveIDs = new Set(Array.isArray(params.preserve) ? params.preserve : params.preserve ? [params.preserve] : []),
      preserveIDPrefixes = new Set(Array.isArray(params.preservePrefixes) ? params.preservePrefixes : params.preservePrefixes ? [params.preservePrefixes] : []),
      idValuePrefix = '#',
      idValuePostfix = '.';
  /**
   * Bananas!
   *
   * @param {Array} items input items
   * @return {Array} output items
   */

  function monkeys(items) {
    for (var i = 0; i < items.content.length && !hasStyleOrScript; i++) {
      var item = items.content[i]; // quit if <style> or <script> present ('force' param prevents quitting)

      if (!params.force) {
        if (item.isElem(styleOrScript)) {
          hasStyleOrScript = true;
          continue;
        } // Don't remove IDs if the whole SVG consists only of defs.


        if (item.isElem('defs') && item.parentNode.isElem('svg')) {
          var hasDefsOnly = true;

          for (var j = i + 1; j < items.content.length; j++) {
            if (items.content[j].isElem()) {
              hasDefsOnly = false;
              break;
            }
          }

          if (hasDefsOnly) {
            break;
          }
        }
      } // â€¦and don't remove any ID if yes


      if (item.isElem()) {
        item.eachAttr(function (attr) {
          var key, match; // save IDs

          if (attr.name === 'id') {
            key = attr.value;

            if (IDs.has(key)) {
              item.removeAttr('id'); // remove repeated id
            } else {
              IDs.set(key, item);
            }

            return;
          } // save references


          if (referencesProps.has(attr.name) && (match = attr.value.match(regReferencesUrl))) {
            key = match[2]; // url() reference
          } else if (attr.local === 'href' && (match = attr.value.match(regReferencesHref)) || attr.name === 'begin' && (match = attr.value.match(regReferencesBegin))) {
            key = match[1]; // href reference
          }

          if (key) {
            var ref = referencesIDs.get(key) || [];
            ref.push(attr);
            referencesIDs.set(key, ref);
          }
        });
      } // go deeper


      if (item.content) {
        monkeys(item);
      }
    }

    return items;
  }

  data = monkeys(data);

  if (hasStyleOrScript) {
    return data;
  }

  var idPreserved = function idPreserved(id) {
    return preserveIDs.has(id) || idMatchesPrefix(preserveIDPrefixes, id);
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = referencesIDs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var ref = _step.value;
      var key = ref[0];

      if (IDs.has(key)) {
        // replace referenced IDs with the minified ones
        if (params.minify && !idPreserved(key)) {
          do {
            currentIDstring = getIDstring(currentID = generateID(currentID), params);
          } while (idPreserved(currentIDstring));

          IDs.get(key).attr('id').value = currentIDstring;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = ref[1][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var attr = _step3.value;
              attr.value = attr.value.includes(idValuePrefix) ? attr.value.replace(idValuePrefix + key, idValuePrefix + currentIDstring) : attr.value.replace(key + idValuePostfix, currentIDstring + idValuePostfix);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        } // don't remove referenced IDs


        IDs["delete"](key);
      }
    } // remove non-referenced IDs attributes from elements

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (params.remove) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = IDs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var keyElem = _step2.value;

        if (!idPreserved(keyElem[0])) {
          keyElem[1].removeAttr('id');
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return data;
};
/**
 * Check if an ID starts with any one of a list of strings.
 *
 * @param {Array} of prefix strings
 * @param {String} current ID
 * @return {Boolean} if currentID starts with one of the strings in prefixArray
 */


function idMatchesPrefix(prefixArray, currentID) {
  if (!currentID) return false;
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = prefixArray[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var prefix = _step4.value;
      if (currentID.startsWith(prefix)) return true;
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
        _iterator4["return"]();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  return false;
}
/**
 * Generate unique minimal ID.
 *
 * @param {Array} [currentID] current ID
 * @return {Array} generated ID array
 */


function generateID(currentID) {
  if (!currentID) return [0];
  currentID[currentID.length - 1]++;

  for (var i = currentID.length - 1; i > 0; i--) {
    if (currentID[i] > maxIDindex) {
      currentID[i] = 0;

      if (currentID[i - 1] !== undefined) {
        currentID[i - 1]++;
      }
    }
  }

  if (currentID[0] > maxIDindex) {
    currentID[0] = 0;
    currentID.unshift(0);
  }

  return currentID;
}
/**
 * Get string from generated ID array.
 *
 * @param {Array} arr input ID array
 * @return {String} output ID string
 */


function getIDstring(arr, params) {
  var str = params.prefix;
  return str + arr.map(function (i) {
    return generateIDchars[i];
  }).join('');
}