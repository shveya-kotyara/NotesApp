"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var quote_1 = require("./quote");

var function_1 = require("./function");

var array_1 = require("./array");
/**
 * Transform an object into a string.
 */


exports.objectToString = function (value, space, next, key) {
  if (typeof Buffer === "function" && Buffer.isBuffer(value)) {
    return "new Buffer(".concat(next(value.toString()), ")");
  } // Use the internal object string to select stringify method.


  var toString = OBJECT_TYPES[Object.prototype.toString.call(value)];
  return toString ? toString(value, space, next, key) : undefined;
};
/**
 * Stringify an object of keys and values.
 */


var rawObjectToString = function rawObjectToString(obj, indent, next) {
  var eol = indent ? "\n" : "";
  var space = indent ? " " : ""; // Iterate over object keys and concat string together.

  var values = Object.keys(obj).reduce(function (values, key) {
    var fn = obj[key];
    var result = next(fn, key); // Omit `undefined` object entries.

    if (result === undefined) return values; // String format the value data.

    var value = result.split("\n").join("\n".concat(indent)); // Skip `key` prefix for function parser.

    if (function_1.USED_METHOD_KEY.has(fn)) {
      values.push("".concat(indent).concat(value));
      return values;
    }

    values.push("".concat(indent).concat(quote_1.quoteKey(key, next), ":").concat(space).concat(value));
    return values;
  }, []).join(",".concat(eol)); // Avoid new lines in an empty object.

  if (values === "") return "{}";
  return "{".concat(eol).concat(values).concat(eol, "}");
};
/**
 * Stringify global variable access.
 */


var globalToString = function globalToString(value, space, next) {
  return "Function(".concat(next("return this"), ")()");
};
/**
 * Convert JavaScript objects into strings.
 */


var OBJECT_TYPES = {
  "[object Array]": array_1.arrayToString,
  "[object Object]": rawObjectToString,
  "[object Error]": function objectError(error, space, next) {
    return "new Error(".concat(next(error.message), ")");
  },
  "[object Date]": function objectDate(date) {
    return "new Date(".concat(date.getTime(), ")");
  },
  "[object String]": function objectString(str, space, next) {
    return "new String(".concat(next(str.toString()), ")");
  },
  "[object Number]": function objectNumber(num) {
    return "new Number(".concat(num, ")");
  },
  "[object Boolean]": function objectBoolean(bool) {
    return "new Boolean(".concat(bool, ")");
  },
  "[object Set]": function objectSet(set, space, next) {
    return "new Set(".concat(next(Array.from(set)), ")");
  },
  "[object Map]": function objectMap(map, space, next) {
    return "new Map(".concat(next(Array.from(map)), ")");
  },
  "[object RegExp]": String,
  "[object global]": globalToString,
  "[object Window]": globalToString
};