/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Source = require("./Source");

var SourceNode = require("source-map").SourceNode;

var REPLACE_REGEX = /\n(?=.|\s)/g;

function cloneAndPrefix(node, prefix, append) {
  if (typeof node === "string") {
    var result = node.replace(REPLACE_REGEX, "\n" + prefix);
    if (append.length > 0) result = append.pop() + result;
    if (/\n$/.test(node)) append.push(prefix);
    return result;
  } else {
    var newNode = new SourceNode(node.line, node.column, node.source, node.children.map(function (node) {
      return cloneAndPrefix(node, prefix, append);
    }), node.name);
    newNode.sourceContents = node.sourceContents;
    return newNode;
  }
}

;

var PrefixSource =
/*#__PURE__*/
function (_Source) {
  _inherits(PrefixSource, _Source);

  function PrefixSource(prefix, source) {
    var _this;

    _classCallCheck(this, PrefixSource);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PrefixSource).call(this));
    _this._source = source;
    _this._prefix = prefix;
    return _this;
  }

  _createClass(PrefixSource, [{
    key: "source",
    value: function source() {
      var node = typeof this._source === "string" ? this._source : this._source.source();
      var prefix = this._prefix;
      return prefix + node.replace(REPLACE_REGEX, "\n" + prefix);
    }
  }, {
    key: "node",
    value: function node(options) {
      var node = this._source.node(options);

      var prefix = this._prefix;
      var output = [];
      var result = new SourceNode();
      node.walkSourceContents(function (source, content) {
        result.setSourceContent(source, content);
      });
      var needPrefix = true;
      node.walk(function (chunk, mapping) {
        var parts = chunk.split(/(\n)/);

        for (var i = 0; i < parts.length; i += 2) {
          var nl = i + 1 < parts.length;
          var part = parts[i] + (nl ? "\n" : "");

          if (part) {
            if (needPrefix) {
              output.push(prefix);
            }

            output.push(new SourceNode(mapping.line, mapping.column, mapping.source, part, mapping.name));
            needPrefix = nl;
          }
        }
      });
      result.add(output);
      return result;
    }
  }, {
    key: "listMap",
    value: function listMap(options) {
      var prefix = this._prefix;

      var map = this._source.listMap(options);

      return map.mapGeneratedCode(function (code) {
        return prefix + code.replace(REPLACE_REGEX, "\n" + prefix);
      });
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      if (typeof this._source === "string") hash.update(this._source);else this._source.updateHash(hash);
      if (typeof this._prefix === "string") hash.update(this._prefix);else this._prefix.updateHash(hash);
    }
  }]);

  return PrefixSource;
}(Source);

require("./SourceAndMapMixin")(PrefixSource.prototype);

module.exports = PrefixSource;