/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SourceNode = require("source-map").SourceNode;

var SourceMapConsumer = require("source-map").SourceMapConsumer;

var Source =
/*#__PURE__*/
function () {
  function Source() {
    _classCallCheck(this, Source);
  }

  _createClass(Source, [{
    key: "source",
    value: function source() {
      throw new Error("Abstract");
    }
  }, {
    key: "size",
    value: function size() {
      if (Buffer.from.length === 1) return new Buffer(this.source()).length;
      return Buffer.byteLength(this.source());
    }
  }, {
    key: "map",
    value: function map(options) {
      return null;
    }
  }, {
    key: "sourceAndMap",
    value: function sourceAndMap(options) {
      return {
        source: this.source(),
        map: this.map()
      };
    }
  }, {
    key: "node",
    value: function node() {
      throw new Error("Abstract");
    }
  }, {
    key: "listNode",
    value: function listNode() {
      throw new Error("Abstract");
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      var source = this.source();
      hash.update(source || "");
    }
  }]);

  return Source;
}();

module.exports = Source;