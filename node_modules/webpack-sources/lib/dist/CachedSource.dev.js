/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Source = require("./Source");

var CachedSource =
/*#__PURE__*/
function (_Source) {
  _inherits(CachedSource, _Source);

  function CachedSource(source) {
    var _this;

    _classCallCheck(this, CachedSource);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CachedSource).call(this));
    _this._source = source;
    _this._cachedSource = undefined;
    _this._cachedSize = undefined;
    _this._cachedMaps = {};
    if (source.node) _this.node = function (options) {
      return this._source.node(options);
    };
    if (source.listMap) _this.listMap = function (options) {
      return this._source.listMap(options);
    };
    return _this;
  }

  _createClass(CachedSource, [{
    key: "source",
    value: function source() {
      if (typeof this._cachedSource !== "undefined") return this._cachedSource;
      return this._cachedSource = this._source.source();
    }
  }, {
    key: "size",
    value: function size() {
      if (typeof this._cachedSize !== "undefined") return this._cachedSize;

      if (typeof this._cachedSource !== "undefined") {
        if (Buffer.from.length === 1) return new Buffer(this._cachedSource).length;
        return this._cachedSize = Buffer.byteLength(this._cachedSource);
      }

      return this._cachedSize = this._source.size();
    }
  }, {
    key: "sourceAndMap",
    value: function sourceAndMap(options) {
      var key = JSON.stringify(options);
      if (typeof this._cachedSource !== "undefined" && key in this._cachedMaps) return {
        source: this._cachedSource,
        map: this._cachedMaps[key]
      };else if (typeof this._cachedSource !== "undefined") {
        return {
          source: this._cachedSource,
          map: this._cachedMaps[key] = this._source.map(options)
        };
      } else if (key in this._cachedMaps) {
        return {
          source: this._cachedSource = this._source.source(),
          map: this._cachedMaps[key]
        };
      }

      var result = this._source.sourceAndMap(options);

      this._cachedSource = result.source;
      this._cachedMaps[key] = result.map;
      return {
        source: this._cachedSource,
        map: this._cachedMaps[key]
      };
    }
  }, {
    key: "map",
    value: function map(options) {
      if (!options) options = {};
      var key = JSON.stringify(options);
      if (key in this._cachedMaps) return this._cachedMaps[key];
      return this._cachedMaps[key] = this._source.map();
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      this._source.updateHash(hash);
    }
  }]);

  return CachedSource;
}(Source);

module.exports = CachedSource;