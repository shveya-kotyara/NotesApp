/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SourceNode = require("source-map").SourceNode;

var SourceListMap = require("source-list-map").SourceListMap;

var Source = require("./Source");

var ConcatSource =
/*#__PURE__*/
function (_Source) {
  _inherits(ConcatSource, _Source);

  function ConcatSource() {
    var _this;

    _classCallCheck(this, ConcatSource);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConcatSource).call(this));
    _this.children = [];

    for (var i = 0; i < arguments.length; i++) {
      var item = arguments[i];

      if (item instanceof ConcatSource) {
        var children = item.children;

        for (var j = 0; j < children.length; j++) {
          _this.children.push(children[j]);
        }
      } else {
        _this.children.push(item);
      }
    }

    return _this;
  }

  _createClass(ConcatSource, [{
    key: "add",
    value: function add(item) {
      if (item instanceof ConcatSource) {
        var children = item.children;

        for (var j = 0; j < children.length; j++) {
          this.children.push(children[j]);
        }
      } else {
        this.children.push(item);
      }
    }
  }, {
    key: "source",
    value: function source() {
      var source = "";
      var children = this.children;

      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        source += typeof child === "string" ? child : child.source();
      }

      return source;
    }
  }, {
    key: "size",
    value: function size() {
      var size = 0;
      var children = this.children;

      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        size += typeof child === "string" ? child.length : child.size();
      }

      return size;
    }
  }, {
    key: "node",
    value: function node(options) {
      var node = new SourceNode(null, null, null, this.children.map(function (item) {
        return typeof item === "string" ? item : item.node(options);
      }));
      return node;
    }
  }, {
    key: "listMap",
    value: function listMap(options) {
      var map = new SourceListMap();
      var children = this.children;

      for (var i = 0; i < children.length; i++) {
        var item = children[i];
        if (typeof item === "string") map.add(item);else map.add(item.listMap(options));
      }

      return map;
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      var children = this.children;

      for (var i = 0; i < children.length; i++) {
        var item = children[i];
        if (typeof item === "string") hash.update(item);else item.updateHash(hash);
      }
    }
  }]);

  return ConcatSource;
}(Source);

require("./SourceAndMapMixin")(ConcatSource.prototype);

module.exports = ConcatSource;