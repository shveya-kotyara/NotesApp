/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SourceNode = require("source-map").SourceNode;

var SourceMapConsumer = require("source-map").SourceMapConsumer;

var SourceListMap = require("source-list-map").SourceListMap;

var Source = require("./Source");

var LineToLineMappedSource =
/*#__PURE__*/
function (_Source) {
  _inherits(LineToLineMappedSource, _Source);

  function LineToLineMappedSource(value, name, originalSource) {
    var _this;

    _classCallCheck(this, LineToLineMappedSource);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LineToLineMappedSource).call(this));
    _this._value = value;
    _this._name = name;
    _this._originalSource = originalSource;
    return _this;
  }

  _createClass(LineToLineMappedSource, [{
    key: "source",
    value: function source() {
      return this._value;
    }
  }, {
    key: "node",
    value: function node(options) {
      var value = this._value;
      var name = this._name;
      var lines = value.split("\n");
      var node = new SourceNode(null, null, null, lines.map(function (line, idx) {
        return new SourceNode(idx + 1, 0, name, line + (idx != lines.length - 1 ? "\n" : ""));
      }));
      node.setSourceContent(name, this._originalSource);
      return node;
    }
  }, {
    key: "listMap",
    value: function listMap(options) {
      return new SourceListMap(this._value, this._name, this._originalSource);
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      hash.update(this._value);
      hash.update(this._originalSource);
    }
  }]);

  return LineToLineMappedSource;
}(Source);

require("./SourceAndMapMixin")(LineToLineMappedSource.prototype);

module.exports = LineToLineMappedSource;