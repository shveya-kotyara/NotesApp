/* eslint-env mocha */

/* eslint-disable max-nested-callbacks */
'use strict';

var _require = require('chai'),
    assert = _require.assert;

var Hoopy = require('.');

test('interface is correct', function () {
  assert.isFunction(Hoopy);
  assert.lengthOf(Hoopy, 1);
  assert["throws"](function () {
    return new Hoopy(0);
  });
  assert.doesNotThrow(function () {
    return new Hoopy(1);
  });
  assert["throws"](function () {
    return new Hoopy(-1);
  });
  assert["throws"](function () {
    return new Hoopy(1).push();
  });
  assert["throws"](function () {
    return new Hoopy(1).pop();
  });
  assert["throws"](function () {
    return new Hoopy(1).shift();
  });
  assert["throws"](function () {
    return new Hoopy(1).unshift();
  });
});
suite('instantiate, size=1:', function () {
  var hoopy;
  setup(function () {
    hoopy = new Hoopy(1);
  });
  test('instance is array', function () {
    assert.isTrue(Array.isArray(hoopy));
  });
  test('length is correct', function () {
    assert.equal(hoopy.length, 1);
  });
  test('[0] is undefined', function () {
    assert.isUndefined(hoopy[0]);
  });
  test('[1] is undefined', function () {
    assert.isUndefined(hoopy[1]);
  });
  test('[-1] is undefined', function () {
    assert.isUndefined(hoopy[-1]);
  });
  test('grow method is implemented', function () {
    assert.isFunction(hoopy.grow);
    assert.lengthOf(hoopy.grow, 1);
  });
  test('grow throws if by=0', function () {
    assert["throws"](function () {
      return hoopy.grow(0);
    });
  });
  suite('assign to [0]:', function () {
    setup(function () {
      hoopy[0] = 'foo';
    });
    test('[0] is set correctly', function () {
      assert.equal(hoopy[0], 'foo');
    });
    test('[1] is set correctly', function () {
      assert.equal(hoopy[1], 'foo');
    });
    test('[-1] is set correctly', function () {
      assert.equal(hoopy[-1], 'foo');
    });
    suite('assign to [1]:', function () {
      setup(function () {
        hoopy[1] = 'bar';
      });
      test('[0] is set correctly', function () {
        assert.equal(hoopy[0], 'bar');
      });
      test('[1] is set correctly', function () {
        assert.equal(hoopy[1], 'bar');
      });
      test('[-1] is set correctly', function () {
        assert.equal(hoopy[-1], 'bar');
      });
    });
    suite('grow, by=1:', function () {
      setup(function () {
        hoopy.grow(1);
      });
      test('length is correct', function () {
        assert.equal(hoopy.length, 2);
      });
      test('[0] is set correctly', function () {
        assert.equal(hoopy[0], 'foo');
      });
      test('[1] is undefined', function () {
        assert.isUndefined(hoopy[1]);
      });
      test('[-1] is undefined', function () {
        assert.isUndefined(hoopy[-1]);
      });
    });
  });
});
suite('instantiate, size=2:', function () {
  var hoopy;
  setup(function () {
    hoopy = new Hoopy(2);
  });
  test('length is correct', function () {
    assert.equal(hoopy.length, 2);
  });
  suite('assign to [0]:', function () {
    setup(function () {
      hoopy[0] = 'foo';
    });
    test('[0] is set correctly', function () {
      assert.equal(hoopy[0], 'foo');
    });
    test('[1] is undefined', function () {
      assert.isUndefined(hoopy[1]);
    });
    test('[2] is set correctly', function () {
      assert.equal(hoopy[2], 'foo');
    });
    test('[3] is undefined', function () {
      assert.isUndefined(hoopy[3]);
    });
    test('[-1] is undefined', function () {
      assert.isUndefined(hoopy[-1]);
    });
    suite('assign to [1]:', function () {
      setup(function () {
        hoopy[1] = 'bar';
      });
      test('[0] is set correctly', function () {
        assert.equal(hoopy[0], 'foo');
      });
      test('[1] is set correctly', function () {
        assert.equal(hoopy[1], 'bar');
      });
      test('[2] is set correctly', function () {
        assert.equal(hoopy[2], 'foo');
      });
      test('[-1] is set correctly', function () {
        assert.equal(hoopy[-1], 'bar');
      });
      suite('assign to [2]:', function () {
        setup(function () {
          hoopy[2] = 'baz';
        });
        test('[0] is set correctly', function () {
          assert.equal(hoopy[0], 'baz');
        });
        test('[1] is set correctly', function () {
          assert.equal(hoopy[1], 'bar');
        });
        test('[2] is set correctly', function () {
          assert.equal(hoopy[2], 'baz');
        });
        test('[-1] is set correctly', function () {
          assert.equal(hoopy[-1], 'bar');
        });
        suite('grow, by=1:', function () {
          setup(function () {
            hoopy.grow(1);
          });
          test('length is correct', function () {
            assert.equal(hoopy.length, 3);
          });
          test('[0] is undefined', function () {
            assert.isUndefined(hoopy[0]);
          });
          test('[1] is set correctly', function () {
            assert.equal(hoopy[1], 'bar');
          });
          test('[2] is set correctly', function () {
            assert.equal(hoopy[2], 'baz');
          });
          test('[3] is undefined', function () {
            assert.isUndefined(hoopy[3]);
          });
        });
        suite('grow, by=2:', function () {
          setup(function () {
            hoopy.grow(2);
          });
          test('length is correct', function () {
            assert.equal(hoopy.length, 4);
          });
          test('[0] is undefined', function () {
            assert.isUndefined(hoopy[0]);
          });
          test('[1] is set correctly', function () {
            assert.equal(hoopy[1], 'bar');
          });
          test('[2] is set correctly', function () {
            assert.equal(hoopy[2], 'baz');
          });
          test('[3] is undefined', function () {
            assert.isUndefined(hoopy[3]);
          });
          test('[4] is undefined', function () {
            assert.isUndefined(hoopy[4]);
          });
          test('[5] is set correctly', function () {
            assert.equal(hoopy[5], 'bar');
          });
        });
      });
    });
  });
});
suite('instantiate and overflow, size=3:', function () {
  var hoopy;
  setup(function () {
    hoopy = new Hoopy(3);
    hoopy[2] = 'foo';
    hoopy[3] = 'bar';
    hoopy[4] = 'baz';
  });
  test('data is correct', function () {
    assert.equal(hoopy.length, 3);
    assert.equal(hoopy[2], 'foo');
    assert.equal(hoopy[3], 'bar');
    assert.equal(hoopy[4], 'baz');
    assert.equal(hoopy[0], hoopy[3]);
    assert.equal(hoopy[1], hoopy[4]);
  });
  test('slice works correctly', function () {
    assert.equal(hoopy.slice(0, 3)[2], hoopy[2]);
  });
  suite('grow, by=1:', function () {
    setup(function () {
      hoopy.grow(1);
    });
    test('data is correct', function () {
      assert.equal(hoopy.length, 4);
      assert.equal(hoopy[2], 'foo');
      assert.equal(hoopy[3], 'bar');
      assert.equal(hoopy[4], 'baz');
      assert.equal(hoopy[0], hoopy[4]);
      assert.isUndefined(hoopy[1]);
    });
  });
  suite('grow, by=2:', function () {
    setup(function () {
      hoopy.grow(2);
    });
    test('data is correct', function () {
      assert.equal(hoopy.length, 5);
      assert.equal(hoopy[2], 'foo');
      assert.equal(hoopy[3], 'bar');
      assert.equal(hoopy[4], 'baz');
      assert.isUndefined(hoopy[0]);
      assert.isUndefined(hoopy[1]);
    });
  });
});