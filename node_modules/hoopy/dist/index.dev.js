'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Hoopy =
/*#__PURE__*/
function (_Array) {
  _inherits(Hoopy, _Array);

  function Hoopy(size) {
    var _this;

    _classCallCheck(this, Hoopy);

    var index, isIndexOverflowed;

    if (!isPositiveInteger(size)) {
      throw new TypeError('Argument `size` must be a positive integer.');
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Hoopy).call(this, size));

    _this.grow = function (by) {
      if (!isPositiveInteger(by)) {
        throw new TypeError('Argument `by` must be a positive integer.');
      }

      var i;
      var newSize = size + by;

      for (i = size; i < newSize; ++i) {
        _this[i] = undefined;
      }

      if (isIndexOverflowed) {
        for (i = 0; i <= index; ++i) {
          var j = size + i;

          if (j >= newSize) {
            j %= newSize;
          }

          _this[j] = _this[i];
          _this[i] = undefined;
        }
      }

      size = newSize;
    };

    return _possibleConstructorReturn(_this, new Proxy(_assertThisInitialized(_this), {
      get: function get(target, key) {
        if (isInteger(key)) {
          return target[getIndex(key, size)];
        }

        return target[key];
      },
      set: function set(target, key, value) {
        if (isInteger(key)) {
          index = getIndex(key, size);
          target[index] = value;

          if (Math.abs(key) >= size) {
            isIndexOverflowed = true;
          } else {
            isIndexOverflowed = false;
          }
        } else {
          target[key] = value;
        }

        return true;
      }
    }));
  }

  return Hoopy;
}(_wrapNativeSuper(Array));

function isPositiveInteger(thing) {
  return isInteger(thing) && thing > 0;
}

function isInteger(thing) {
  try {
    return +thing % 1 === 0;
  } catch (error) {// Coercing symbols to numbers throws an error
  }

  return false;
}

function getIndex(key, size) {
  if (key === 0) {
    return 0;
  }

  if (key < 0) {
    return (size - Math.abs(key)) % size;
  }

  return key % size;
}

function nop() {
  throw new Error('Not implemented');
}

Hoopy.prototype.push = nop;
Hoopy.prototype.pop = nop;
Hoopy.prototype.shift = nop;
Hoopy.prototype.unshift = nop;
module.exports = Hoopy;