'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var shebangRegex = require('shebang-regex');

module.exports = function () {
  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var match = string.match(shebangRegex);

  if (!match) {
    return null;
  }

  var _match$0$replace$spli = match[0].replace(/#! ?/, '').split(' '),
      _match$0$replace$spli2 = _slicedToArray(_match$0$replace$spli, 2),
      path = _match$0$replace$spli2[0],
      argument = _match$0$replace$spli2[1];

  var binary = path.split('/').pop();

  if (binary === 'env') {
    return argument;
  }

  return argument ? "".concat(binary, " ").concat(argument) : binary;
};