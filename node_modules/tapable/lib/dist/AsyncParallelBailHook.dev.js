/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Hook = require("./Hook");

var HookCodeFactory = require("./HookCodeFactory");

var AsyncParallelBailHookCodeFactory =
/*#__PURE__*/
function (_HookCodeFactory) {
  _inherits(AsyncParallelBailHookCodeFactory, _HookCodeFactory);

  function AsyncParallelBailHookCodeFactory() {
    _classCallCheck(this, AsyncParallelBailHookCodeFactory);

    return _possibleConstructorReturn(this, _getPrototypeOf(AsyncParallelBailHookCodeFactory).apply(this, arguments));
  }

  _createClass(AsyncParallelBailHookCodeFactory, [{
    key: "content",
    value: function content(_ref) {
      var onError = _ref.onError,
          onResult = _ref.onResult,
          onDone = _ref.onDone;
      var code = "";
      code += "var _results = new Array(".concat(this.options.taps.length, ");\n");
      code += "var _checkDone = () => {\n";
      code += "for(var i = 0; i < _results.length; i++) {\n";
      code += "var item = _results[i];\n";
      code += "if(item === undefined) return false;\n";
      code += "if(item.result !== undefined) {\n";
      code += onResult("item.result");
      code += "return true;\n";
      code += "}\n";
      code += "if(item.error) {\n";
      code += onError("item.error");
      code += "return true;\n";
      code += "}\n";
      code += "}\n";
      code += "return false;\n";
      code += "}\n";
      code += this.callTapsParallel({
        onError: function onError(i, err, done, doneBreak) {
          var code = "";
          code += "if(".concat(i, " < _results.length && ((_results.length = ").concat(i + 1, "), (_results[").concat(i, "] = { error: ").concat(err, " }), _checkDone())) {\n");
          code += doneBreak(true);
          code += "} else {\n";
          code += done();
          code += "}\n";
          return code;
        },
        onResult: function onResult(i, result, done, doneBreak) {
          var code = "";
          code += "if(".concat(i, " < _results.length && (").concat(result, " !== undefined && (_results.length = ").concat(i + 1, "), (_results[").concat(i, "] = { result: ").concat(result, " }), _checkDone())) {\n");
          code += doneBreak(true);
          code += "} else {\n";
          code += done();
          code += "}\n";
          return code;
        },
        onTap: function onTap(i, run, done, doneBreak) {
          var code = "";

          if (i > 0) {
            code += "if(".concat(i, " >= _results.length) {\n");
            code += done();
            code += "} else {\n";
          }

          code += run();
          if (i > 0) code += "}\n";
          return code;
        },
        onDone: onDone
      });
      return code;
    }
  }]);

  return AsyncParallelBailHookCodeFactory;
}(HookCodeFactory);

var factory = new AsyncParallelBailHookCodeFactory();

var AsyncParallelBailHook =
/*#__PURE__*/
function (_Hook) {
  _inherits(AsyncParallelBailHook, _Hook);

  function AsyncParallelBailHook() {
    _classCallCheck(this, AsyncParallelBailHook);

    return _possibleConstructorReturn(this, _getPrototypeOf(AsyncParallelBailHook).apply(this, arguments));
  }

  _createClass(AsyncParallelBailHook, [{
    key: "compile",
    value: function compile(options) {
      factory.setup(this, options);
      return factory.create(options);
    }
  }]);

  return AsyncParallelBailHook;
}(Hook);

Object.defineProperties(AsyncParallelBailHook.prototype, {
  _call: {
    value: undefined,
    configurable: true,
    writable: true
  }
});
module.exports = AsyncParallelBailHook;