/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HookMap =
/*#__PURE__*/
function () {
  function HookMap(factory) {
    _classCallCheck(this, HookMap);

    this._map = new Map();
    this._factory = factory;
    this._interceptors = [];
  }

  _createClass(HookMap, [{
    key: "get",
    value: function get(key) {
      return this._map.get(key);
    }
  }, {
    key: "for",
    value: function _for(key) {
      var hook = this.get(key);

      if (hook !== undefined) {
        return hook;
      }

      var newHook = this._factory(key);

      var interceptors = this._interceptors;

      for (var i = 0; i < interceptors.length; i++) {
        newHook = interceptors[i].factory(key, newHook);
      }

      this._map.set(key, newHook);

      return newHook;
    }
  }, {
    key: "intercept",
    value: function intercept(interceptor) {
      this._interceptors.push(Object.assign({
        factory: function factory(key, hook) {
          return hook;
        }
      }, interceptor));
    }
  }, {
    key: "tap",
    value: function tap(key, options, fn) {
      return this["for"](key).tap(options, fn);
    }
  }, {
    key: "tapAsync",
    value: function tapAsync(key, options, fn) {
      return this["for"](key).tapAsync(options, fn);
    }
  }, {
    key: "tapPromise",
    value: function tapPromise(key, options, fn) {
      return this["for"](key).tapPromise(options, fn);
    }
  }]);

  return HookMap;
}();

module.exports = HookMap;