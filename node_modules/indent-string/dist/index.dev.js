'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = function (string) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var options = arguments.length > 2 ? arguments[2] : undefined;
  options = _objectSpread({
    indent: ' ',
    includeEmptyLines: false
  }, options);

  if (typeof string !== 'string') {
    throw new TypeError("Expected `input` to be a `string`, got `".concat(_typeof(string), "`"));
  }

  if (typeof count !== 'number') {
    throw new TypeError("Expected `count` to be a `number`, got `".concat(_typeof(count), "`"));
  }

  if (typeof options.indent !== 'string') {
    throw new TypeError("Expected `options.indent` to be a `string`, got `".concat(_typeof(options.indent), "`"));
  }

  if (count === 0) {
    return string;
  }

  var regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
  return string.replace(regex, options.indent.repeat(count));
};