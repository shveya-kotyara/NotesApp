'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = mergeRules;

var _hasAllProps = require('./hasAllProps');

var _hasAllProps2 = _interopRequireDefault(_hasAllProps);

var _getDecls = require('./getDecls');

var _getDecls2 = _interopRequireDefault(_getDecls);

var _getRules = require('./getRules');

var _getRules2 = _interopRequireDefault(_getRules);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function isConflictingProp(propA, propB) {
  if (!propB.prop || propB.important !== propA.important) {
    return;
  }

  var parts = propA.prop.split('-');
  return parts.some(function () {
    parts.pop();
    return parts.join('-') === propB.prop;
  });
}

function hasConflicts(match, nodes) {
  var firstNode = Math.min.apply(null, match.map(function (n) {
    return nodes.indexOf(n);
  }));
  var lastNode = Math.max.apply(null, match.map(function (n) {
    return nodes.indexOf(n);
  }));
  var between = nodes.slice(firstNode + 1, lastNode);
  return match.some(function (a) {
    return between.some(function (b) {
      return isConflictingProp(a, b);
    });
  });
}

function mergeRules(rule, properties, callback) {
  var decls = (0, _getDecls2["default"])(rule, properties);

  var _loop = function _loop() {
    var last = decls[decls.length - 1];
    var props = decls.filter(function (node) {
      return node.important === last.important;
    });
    var rules = (0, _getRules2["default"])(props, properties);

    if ((0, _hasAllProps2["default"]).apply(void 0, [rules].concat(_toConsumableArray(properties))) && !hasConflicts(rules, rule.nodes)) {
      if (callback(rules, last, props)) {
        decls = decls.filter(function (node) {
          return !~rules.indexOf(node);
        });
      }
    }

    decls = decls.filter(function (node) {
      return node !== last;
    });
  };

  while (decls.length) {
    _loop();
  }
}

module.exports = exports['default'];