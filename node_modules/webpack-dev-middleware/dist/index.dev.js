'use strict';

var mime = require('mime');

var createContext = require('./lib/context');

var middleware = require('./lib/middleware');

var reporter = require('./lib/reporter');

var _require = require('./lib/fs'),
    setFs = _require.setFs,
    toDisk = _require.toDisk;

var _require2 = require('./lib/util'),
    getFilenameFromUrl = _require2.getFilenameFromUrl,
    noop = _require2.noop,
    ready = _require2.ready;

var defaults = {
  logLevel: 'info',
  logTime: false,
  logger: null,
  mimeTypes: null,
  reporter: reporter,
  stats: {
    colors: true,
    context: process.cwd()
  },
  watchOptions: {
    aggregateTimeout: 200
  },
  writeToDisk: false
};

module.exports = function wdm(compiler, opts) {
  var options = Object.assign({}, defaults, opts); // defining custom MIME type

  if (options.mimeTypes) {
    var typeMap = options.mimeTypes.typeMap || options.mimeTypes;
    var force = !!options.mimeTypes.force;
    mime.define(typeMap, force);
  }

  var context = createContext(compiler, options); // start watching

  if (!options.lazy) {
    context.watching = compiler.watch(options.watchOptions, function (err) {
      if (err) {
        context.log.error(err.stack || err);

        if (err.details) {
          context.log.error(err.details);
        }
      }
    });
  } else {
    if (typeof options.filename === 'string') {
      var filename = options.filename.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&') // eslint-disable-line no-useless-escape
      .replace(/\\\[[a-z]+\\\]/gi, '.+');
      options.filename = new RegExp("^[/]{0,1}".concat(filename, "$"));
    }

    context.state = true;
  }

  if (options.writeToDisk) {
    toDisk(context);
  }

  setFs(context, compiler);
  return Object.assign(middleware(context), {
    close: function close(callback) {
      // eslint-disable-next-line no-param-reassign
      callback = callback || noop;

      if (context.watching) {
        context.watching.close(callback);
      } else {
        callback();
      }
    },
    context: context,
    fileSystem: context.fs,
    getFilenameFromUrl: getFilenameFromUrl.bind(this, context.options.publicPath, context.compiler),
    invalidate: function invalidate(callback) {
      // eslint-disable-next-line no-param-reassign
      callback = callback || noop;

      if (context.watching) {
        ready(context, callback, {});
        context.watching.invalidate();
      } else {
        callback();
      }
    },
    waitUntilValid: function waitUntilValid(callback) {
      // eslint-disable-next-line no-param-reassign
      callback = callback || noop;
      ready(context, callback, {});
    }
  });
};