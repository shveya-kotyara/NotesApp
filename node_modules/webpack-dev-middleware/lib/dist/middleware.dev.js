'use strict';

var path = require('path');

var mime = require('mime');

var DevMiddlewareError = require('./DevMiddlewareError');

var _require = require('./util'),
    getFilenameFromUrl = _require.getFilenameFromUrl,
    handleRangeHeaders = _require.handleRangeHeaders,
    handleRequest = _require.handleRequest,
    ready = _require.ready; // Do not add a charset to the Content-Type header of these file types
// otherwise the client will fail to render them correctly.


var NonCharsetFileTypes = /\.(wasm|usdz)$/;

module.exports = function wrapper(context) {
  return function middleware(req, res, next) {
    // fixes #282. credit @cexoso. in certain edge situations res.locals is
    // undefined.
    // eslint-disable-next-line no-param-reassign
    res.locals = res.locals || {};

    function goNext() {
      if (!context.options.serverSideRender) {
        return next();
      }

      return new Promise(function (resolve) {
        ready(context, function () {
          // eslint-disable-next-line no-param-reassign
          res.locals.webpackStats = context.webpackStats; // eslint-disable-next-line no-param-reassign

          res.locals.fs = context.fs;
          resolve(next());
        }, req);
      });
    }

    var acceptedMethods = context.options.methods || ['GET', 'HEAD'];

    if (acceptedMethods.indexOf(req.method) === -1) {
      return goNext();
    }

    var filename = getFilenameFromUrl(context.options.publicPath, context.compiler, req.url);

    if (filename === false) {
      return goNext();
    }

    return new Promise(function (resolve) {
      handleRequest(context, filename, processRequest, req); // eslint-disable-next-line consistent-return

      function processRequest() {
        try {
          var stat = context.fs.statSync(filename);

          if (!stat.isFile()) {
            if (stat.isDirectory()) {
              var index = context.options.index; // eslint-disable-next-line no-undefined

              if (index === undefined || index === true) {
                index = 'index.html';
              } else if (!index) {
                throw new DevMiddlewareError('next');
              }

              filename = path.posix.join(filename, index);
              stat = context.fs.statSync(filename);

              if (!stat.isFile()) {
                throw new DevMiddlewareError('next');
              }
            } else {
              throw new DevMiddlewareError('next');
            }
          }
        } catch (e) {
          return resolve(goNext());
        } // server content


        var content = context.fs.readFileSync(filename);
        content = handleRangeHeaders(content, req, res);
        var contentType = mime.getType(filename) || '';

        if (!NonCharsetFileTypes.test(filename)) {
          contentType += '; charset=UTF-8';
        }

        if (!res.getHeader || !res.getHeader('Content-Type')) {
          res.setHeader('Content-Type', contentType);
        }

        res.setHeader('Content-Length', content.length);
        var headers = context.options.headers;

        if (headers) {
          for (var name in headers) {
            if ({}.hasOwnProperty.call(headers, name)) {
              res.setHeader(name, context.options.headers[name]);
            }
          }
        } // Express automatically sets the statusCode to 200, but not all servers do (Koa).
        // eslint-disable-next-line no-param-reassign


        res.statusCode = res.statusCode || 200;

        if (res.send) {
          res.send(content);
        } else {
          res.end(content);
        }

        resolve();
      }
    });
  };
};