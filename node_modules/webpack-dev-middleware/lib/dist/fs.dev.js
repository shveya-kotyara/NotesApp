'use strict';

var fs = require('fs');

var path = require('path');

var MemoryFileSystem = require('memory-fs');

var mkdirp = require('mkdirp');

var _require = require('webpack-log'),
    colors = _require.colors;

var DevMiddlewareError = require('./DevMiddlewareError');

module.exports = {
  toDisk: function toDisk(context) {
    var compilers = context.compiler.compilers || [context.compiler];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var compiler = _step.value;
        compiler.hooks.emit.tap('WebpackDevMiddleware', function (compilation) {
          if (compiler.hasWebpackDevMiddlewareAssetEmittedCallback) {
            return;
          }

          compiler.hooks.assetEmitted.tapAsync('WebpackDevMiddleware', function (file, info, callback) {
            var targetPath = null;
            var content = null; // webpack@5

            if (info.compilation) {
              targetPath = info.targetPath;
              content = info.content;
            } else {
              var targetFile = file;
              var queryStringIdx = targetFile.indexOf('?');

              if (queryStringIdx >= 0) {
                targetFile = targetFile.substr(0, queryStringIdx);
              }

              var outputPath = compiler.outputPath; // TODO Why? Need remove in future major release

              if (outputPath === '/') {
                outputPath = compiler.context;
              }

              outputPath = compilation.getPath(outputPath, {});
              content = info;
              targetPath = path.join(outputPath, targetFile);
            }

            var filter = context.options.writeToDisk;
            var allowWrite = filter && typeof filter === 'function' ? filter(targetPath) : true;

            if (!allowWrite) {
              return callback();
            }

            var log = context.log;
            var dir = path.dirname(targetPath);
            return mkdirp(dir, function (mkdirpError) {
              if (mkdirpError) {
                return callback(mkdirpError);
              }

              return fs.writeFile(targetPath, content, function (writeFileError) {
                if (writeFileError) {
                  return callback(writeFileError);
                }

                log.debug(colors.cyan("Asset written to disk: ".concat(path.relative(process.cwd(), targetPath))));
                return callback();
              });
            });
          });
          compiler.hasWebpackDevMiddlewareAssetEmittedCallback = true;
        });
      };

      for (var _iterator = compilers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  },
  setFs: function setFs(context, compiler) {
    if (typeof compiler.outputPath === 'string' && !path.posix.isAbsolute(compiler.outputPath) && !path.win32.isAbsolute(compiler.outputPath)) {
      throw new DevMiddlewareError('`output.path` needs to be an absolute path or `/`.');
    }

    var fileSystem; // store our files in memory

    var isConfiguredFs = context.options.fs;
    var isMemoryFs = !isConfiguredFs && !compiler.compilers && compiler.outputFileSystem instanceof MemoryFileSystem;

    if (isConfiguredFs) {
      // eslint-disable-next-line no-shadow
      var _fs = context.options.fs;

      if (typeof _fs.join !== 'function') {
        // very shallow check
        throw new Error('Invalid options: options.fs.join() method is expected');
      } // eslint-disable-next-line no-param-reassign


      compiler.outputFileSystem = _fs;
      fileSystem = _fs;
    } else if (isMemoryFs) {
      fileSystem = compiler.outputFileSystem;
    } else {
      fileSystem = new MemoryFileSystem(); // eslint-disable-next-line no-param-reassign

      compiler.outputFileSystem = fileSystem;
    } // eslint-disable-next-line no-param-reassign


    context.fs = fileSystem;
  }
};