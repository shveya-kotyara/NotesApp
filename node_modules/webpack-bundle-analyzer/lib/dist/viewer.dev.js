"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var path = require('path');

var fs = require('fs');

var http = require('http');

var WebSocket = require('ws');

var _ = require('lodash');

var express = require('express');

var ejs = require('ejs');

var opener = require('opener');

var mkdir = require('mkdirp');

var _require = require('chalk'),
    bold = _require.bold;

var Logger = require('./Logger');

var analyzer = require('./analyzer');

var projectRoot = path.resolve(__dirname, '..');
var assetsRoot = path.join(projectRoot, 'public');

function resolveTitle(reportTitle) {
  if (typeof reportTitle === 'function') {
    return reportTitle();
  } else {
    return reportTitle;
  }
}

module.exports = {
  startServer: startServer,
  generateReport: generateReport,
  generateJSONReport: generateJSONReport,
  // deprecated
  start: startServer
};

function startServer(_x, _x2) {
  return _startServer.apply(this, arguments);
}

function _startServer() {
  _startServer = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(bundleStats, opts) {
    var _ref, _ref$port, port, _ref$host, host, _ref$openBrowser, openBrowser, _ref$bundleDir, bundleDir, _ref$logger, logger, _ref$defaultSizes, defaultSizes, _ref$excludeAssets, excludeAssets, reportTitle, analyzerOpts, chartData, app, server, wss, updateChartData;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            updateChartData = function _ref2(bundleStats) {
              var newChartData = getChartData(analyzerOpts, bundleStats, bundleDir);
              if (!newChartData) return;
              chartData = newChartData;
              wss.clients.forEach(function (client) {
                if (client.readyState === WebSocket.OPEN) {
                  client.send(JSON.stringify({
                    event: 'chartDataUpdated',
                    data: newChartData
                  }));
                }
              });
            };

            _ref = opts || {}, _ref$port = _ref.port, port = _ref$port === void 0 ? 8888 : _ref$port, _ref$host = _ref.host, host = _ref$host === void 0 ? '127.0.0.1' : _ref$host, _ref$openBrowser = _ref.openBrowser, openBrowser = _ref$openBrowser === void 0 ? true : _ref$openBrowser, _ref$bundleDir = _ref.bundleDir, bundleDir = _ref$bundleDir === void 0 ? null : _ref$bundleDir, _ref$logger = _ref.logger, logger = _ref$logger === void 0 ? new Logger() : _ref$logger, _ref$defaultSizes = _ref.defaultSizes, defaultSizes = _ref$defaultSizes === void 0 ? 'parsed' : _ref$defaultSizes, _ref$excludeAssets = _ref.excludeAssets, excludeAssets = _ref$excludeAssets === void 0 ? null : _ref$excludeAssets, reportTitle = _ref.reportTitle;
            analyzerOpts = {
              logger: logger,
              excludeAssets: excludeAssets
            };
            chartData = getChartData(analyzerOpts, bundleStats, bundleDir);

            if (chartData) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return");

          case 6:
            app = express(); // Explicitly using our `ejs` dependency to render templates
            // Fixes #17

            app.engine('ejs', require('ejs').renderFile);
            app.set('view engine', 'ejs');
            app.set('views', "".concat(projectRoot, "/views"));
            app.use(express["static"]("".concat(projectRoot, "/public")));
            app.use('/', function (req, res) {
              res.render('viewer', {
                mode: 'server',
                title: resolveTitle(reportTitle),

                get chartData() {
                  return chartData;
                },

                defaultSizes: defaultSizes,
                enableWebSocket: true,
                // Helpers
                escapeJson: escapeJson
              });
            });
            server = http.createServer(app);
            _context.next = 15;
            return new Promise(function (resolve) {
              server.listen(port, host, function () {
                resolve();
                var url = "http://".concat(host, ":").concat(server.address().port);
                logger.info("".concat(bold('Webpack Bundle Analyzer'), " is started at ").concat(bold(url), "\n") + "Use ".concat(bold('Ctrl+C'), " to close it"));

                if (openBrowser) {
                  opener(url);
                }
              });
            });

          case 15:
            wss = new WebSocket.Server({
              server: server
            });
            wss.on('connection', function (ws) {
              ws.on('error', function (err) {
                // Ignore network errors like `ECONNRESET`, `EPIPE`, etc.
                if (err.errno) return;
                logger.info(err.message);
              });
            });
            return _context.abrupt("return", {
              ws: wss,
              http: server,
              updateChartData: updateChartData
            });

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _startServer.apply(this, arguments);
}

function generateReport(_x3, _x4) {
  return _generateReport.apply(this, arguments);
}

function _generateReport() {
  _generateReport = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2(bundleStats, opts) {
    var _ref3, _ref3$openBrowser, openBrowser, reportFilename, reportTitle, _ref3$bundleDir, bundleDir, _ref3$logger, logger, _ref3$defaultSizes, defaultSizes, _ref3$excludeAssets, excludeAssets, chartData;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref3 = opts || {}, _ref3$openBrowser = _ref3.openBrowser, openBrowser = _ref3$openBrowser === void 0 ? true : _ref3$openBrowser, reportFilename = _ref3.reportFilename, reportTitle = _ref3.reportTitle, _ref3$bundleDir = _ref3.bundleDir, bundleDir = _ref3$bundleDir === void 0 ? null : _ref3$bundleDir, _ref3$logger = _ref3.logger, logger = _ref3$logger === void 0 ? new Logger() : _ref3$logger, _ref3$defaultSizes = _ref3.defaultSizes, defaultSizes = _ref3$defaultSizes === void 0 ? 'parsed' : _ref3$defaultSizes, _ref3$excludeAssets = _ref3.excludeAssets, excludeAssets = _ref3$excludeAssets === void 0 ? null : _ref3$excludeAssets;
            chartData = getChartData({
              logger: logger,
              excludeAssets: excludeAssets
            }, bundleStats, bundleDir);

            if (chartData) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return");

          case 4:
            _context2.next = 6;
            return new Promise(function (resolve, reject) {
              ejs.renderFile("".concat(projectRoot, "/views/viewer.ejs"), {
                mode: 'static',
                title: resolveTitle(reportTitle),
                chartData: chartData,
                defaultSizes: defaultSizes,
                enableWebSocket: false,
                // Helpers
                assetContent: getAssetContent,
                escapeJson: escapeJson
              }, function (err, reportHtml) {
                try {
                  if (err) {
                    logger.error(err);
                    reject(err);
                    return;
                  }

                  var reportFilepath = path.resolve(bundleDir || process.cwd(), reportFilename);
                  mkdir.sync(path.dirname(reportFilepath));
                  fs.writeFileSync(reportFilepath, reportHtml);
                  logger.info("".concat(bold('Webpack Bundle Analyzer'), " saved report to ").concat(bold(reportFilepath)));

                  if (openBrowser) {
                    opener("file://".concat(reportFilepath));
                  }

                  resolve();
                } catch (e) {
                  reject(e);
                }
              });
            });

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _generateReport.apply(this, arguments);
}

function generateJSONReport(_x5, _x6) {
  return _generateJSONReport.apply(this, arguments);
}

function _generateJSONReport() {
  _generateJSONReport = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3(bundleStats, opts) {
    var _ref4, reportFilename, _ref4$bundleDir, bundleDir, _ref4$logger, logger, _ref4$excludeAssets, excludeAssets, chartData;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref4 = opts || {}, reportFilename = _ref4.reportFilename, _ref4$bundleDir = _ref4.bundleDir, bundleDir = _ref4$bundleDir === void 0 ? null : _ref4$bundleDir, _ref4$logger = _ref4.logger, logger = _ref4$logger === void 0 ? new Logger() : _ref4$logger, _ref4$excludeAssets = _ref4.excludeAssets, excludeAssets = _ref4$excludeAssets === void 0 ? null : _ref4$excludeAssets;
            chartData = getChartData({
              logger: logger,
              excludeAssets: excludeAssets
            }, bundleStats, bundleDir);

            if (chartData) {
              _context3.next = 4;
              break;
            }

            return _context3.abrupt("return");

          case 4:
            mkdir.sync(path.dirname(reportFilename));
            fs.writeFileSync(reportFilename, JSON.stringify(chartData));
            logger.info("".concat(bold('Webpack Bundle Analyzer'), " saved JSON report to ").concat(bold(reportFilename)));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _generateJSONReport.apply(this, arguments);
}

function getAssetContent(filename) {
  var assetPath = path.join(assetsRoot, filename);

  if (!assetPath.startsWith(assetsRoot)) {
    throw new Error("\"".concat(filename, "\" is outside of the assets root"));
  }

  return fs.readFileSync(assetPath, 'utf8');
}
/**
 * Escapes `<` characters in JSON to safely use it in `<script>` tag.
 */


function escapeJson(json) {
  return JSON.stringify(json).replace(/</g, "\\u003c");
}

function getChartData(analyzerOpts) {
  var chartData;
  var logger = analyzerOpts.logger;

  try {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    chartData = analyzer.getViewerData.apply(analyzer, args.concat([analyzerOpts]));
  } catch (err) {
    logger.error("Could't analyze webpack bundle:\n".concat(err));
    logger.debug(err.stack);
    chartData = null;
  }

  if (_.isPlainObject(chartData) && _.isEmpty(chartData)) {
    logger.error("Could't find any javascript bundles in provided stats file");
    chartData = null;
  }

  return chartData;
}