"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _Node = _interopRequireDefault(require("./Node"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var BaseFolder =
/*#__PURE__*/
function (_Node$default) {
  _inherits(BaseFolder, _Node$default);

  function BaseFolder(name, parent) {
    var _this;

    _classCallCheck(this, BaseFolder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseFolder).call(this, name, parent));
    _this.children = Object.create(null);
    return _this;
  }

  _createClass(BaseFolder, [{
    key: "getChild",
    value: function getChild(name) {
      return this.children[name];
    }
  }, {
    key: "addChildModule",
    value: function addChildModule(module) {
      var name = module.name;
      var currentChild = this.children[name]; // For some reason we already have this node in children and it's a folder.

      if (currentChild && currentChild instanceof BaseFolder) return;

      if (currentChild) {
        // We already have this node in children and it's a module.
        // Merging it's data.
        currentChild.mergeData(module.data);
      } else {
        // Pushing new module
        module.parent = this;
        this.children[name] = module;
      }

      delete this._size;
      delete this._src;
    }
  }, {
    key: "addChildFolder",
    value: function addChildFolder(folder) {
      folder.parent = this;
      this.children[folder.name] = folder;
      delete this._size;
      delete this._src;
      return folder;
    }
  }, {
    key: "walk",
    value: function walk(walker) {
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var stopped = false;

      _lodash["default"].each(this.children, function (child) {
        if (deep && child.walk) {
          state = child.walk(walker, state, stop);
        } else {
          state = walker(child, state, stop);
        }

        if (stopped) return false;
      });

      return state;

      function stop(finalState) {
        stopped = true;
        return finalState;
      }
    }
  }, {
    key: "mergeNestedFolders",
    value: function mergeNestedFolders() {
      var _this2 = this;

      if (!this.isRoot) {
        var childNames;

        while ((childNames = Object.keys(this.children)).length === 1) {
          var childName = childNames[0];
          var onlyChild = this.children[childName];

          if (onlyChild instanceof this.constructor) {
            this.name += "/".concat(onlyChild.name);
            this.children = onlyChild.children;
          } else {
            break;
          }
        }
      }

      this.walk(function (child) {
        child.parent = _this2;

        if (child.mergeNestedFolders) {
          child.mergeNestedFolders();
        }
      }, null, false);
    }
  }, {
    key: "toChartData",
    value: function toChartData() {
      return {
        label: this.name,
        path: this.path,
        statSize: this.size,
        groups: _lodash["default"].invokeMap(this.children, 'toChartData')
      };
    }
  }, {
    key: "src",
    get: function get() {
      if (!_lodash["default"].has(this, '_src')) {
        this._src = this.walk(function (node, src) {
          return src += node.src || '';
        }, '', false);
      }

      return this._src;
    }
  }, {
    key: "size",
    get: function get() {
      if (!_lodash["default"].has(this, '_size')) {
        this._size = this.walk(function (node, size) {
          return size + node.size;
        }, 0, false);
      }

      return this._size;
    }
  }]);

  return BaseFolder;
}(_Node["default"]);

exports["default"] = BaseFolder;
;