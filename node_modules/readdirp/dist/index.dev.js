'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var fs = require('fs');

var _require = require('stream'),
    Readable = _require.Readable;

var sysPath = require('path');

var _require2 = require('util'),
    promisify = _require2.promisify;

var picomatch = require('picomatch');

var readdir = promisify(fs.readdir);
var stat = promisify(fs.stat);
var lstat = promisify(fs.lstat);
var realpath = promisify(fs.realpath);
/**
 * @typedef {Object} EntryInfo
 * @property {String} path
 * @property {String} fullPath
 * @property {fs.Stats=} stats
 * @property {fs.Dirent=} dirent
 * @property {String} basename
 */

var BANG = '!';
var NORMAL_FLOW_ERRORS = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP']);
var FILE_TYPE = 'files';
var DIR_TYPE = 'directories';
var FILE_DIR_TYPE = 'files_directories';
var EVERYTHING_TYPE = 'all';
var ALL_TYPES = [FILE_TYPE, DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE];

var isNormalFlowError = function isNormalFlowError(error) {
  return NORMAL_FLOW_ERRORS.has(error.code);
};

var normalizeFilter = function normalizeFilter(filter) {
  if (filter === undefined) return;
  if (typeof filter === 'function') return filter;

  if (typeof filter === 'string') {
    var glob = picomatch(filter.trim());
    return function (entry) {
      return glob(entry.basename);
    };
  }

  if (Array.isArray(filter)) {
    var positive = [];
    var negative = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = filter[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;
        var trimmed = item.trim();

        if (trimmed.charAt(0) === BANG) {
          negative.push(picomatch(trimmed.slice(1)));
        } else {
          positive.push(picomatch(trimmed));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (negative.length > 0) {
      if (positive.length > 0) {
        return function (entry) {
          return positive.some(function (f) {
            return f(entry.basename);
          }) && !negative.some(function (f) {
            return f(entry.basename);
          });
        };
      }

      return function (entry) {
        return !negative.some(function (f) {
          return f(entry.basename);
        });
      };
    }

    return function (entry) {
      return positive.some(function (f) {
        return f(entry.basename);
      });
    };
  }
};

var ReaddirpStream =
/*#__PURE__*/
function (_Readable) {
  _inherits(ReaddirpStream, _Readable);

  _createClass(ReaddirpStream, null, [{
    key: "defaultOptions",
    get: function get() {
      return {
        root: '.',

        /* eslint-disable no-unused-vars */
        fileFilter: function fileFilter(path) {
          return true;
        },
        directoryFilter: function directoryFilter(path) {
          return true;
        },

        /* eslint-enable no-unused-vars */
        type: FILE_TYPE,
        lstat: false,
        depth: 2147483648,
        alwaysStat: false
      };
    }
  }]);

  function ReaddirpStream() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ReaddirpStream);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReaddirpStream).call(this, {
      objectMode: true,
      autoDestroy: true,
      highWaterMark: options.highWaterMark || 4096
    }));

    var opts = _objectSpread({}, ReaddirpStream.defaultOptions, {}, options);

    var root = opts.root,
        type = opts.type;
    _this._fileFilter = normalizeFilter(opts.fileFilter);
    _this._directoryFilter = normalizeFilter(opts.directoryFilter);
    var statMethod = opts.lstat ? lstat : stat; // Use bigint stats if it's windows and stat() supports options (node 10+).

    if (process.platform === 'win32' && stat.length === 3) {
      _this._stat = function (path) {
        return statMethod(path, {
          bigint: true
        });
      };
    } else {
      _this._stat = statMethod;
    }

    _this._maxDepth = opts.depth;
    _this._wantsDir = [DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);
    _this._wantsFile = [FILE_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);
    _this._wantsEverything = type === EVERYTHING_TYPE;
    _this._root = sysPath.resolve(root);
    _this._isDirent = 'Dirent' in fs && !opts.alwaysStat;
    _this._statsProp = _this._isDirent ? 'dirent' : 'stats';
    _this._rdOptions = {
      encoding: 'utf8',
      withFileTypes: _this._isDirent
    }; // Launch stream with one parent, the root dir.

    _this.parents = [_this._exploreDir(root, 1)];
    _this.reading = false;
    _this.parent = undefined;
    return _this;
  }

  _createClass(ReaddirpStream, [{
    key: "_read",
    value: function _read(batch) {
      var _this2 = this;

      var _loop2, _ret;

      return regeneratorRuntime.async(function _read$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.reading) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              this.reading = true;
              _context2.prev = 3;

              _loop2 = function _loop2() {
                var _ref, path, depth, _ref$files, files, slice, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, entry, entryType, parent;

                return regeneratorRuntime.async(function _loop2$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _ref = _this2.parent || {}, path = _ref.path, depth = _ref.depth, _ref$files = _ref.files, files = _ref$files === void 0 ? [] : _ref$files;

                        if (!(files.length > 0)) {
                          _context.next = 38;
                          break;
                        }

                        slice = files.splice(0, batch).map(function (dirent) {
                          return _this2._formatEntry(dirent, path);
                        });
                        _iteratorNormalCompletion2 = true;
                        _didIteratorError2 = false;
                        _iteratorError2 = undefined;
                        _context.prev = 6;
                        _context.next = 9;
                        return regeneratorRuntime.awrap(Promise.all(slice));

                      case 9:
                        _context.t0 = Symbol.iterator;
                        _iterator2 = _context.sent[_context.t0]();

                      case 11:
                        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                          _context.next = 22;
                          break;
                        }

                        entry = _step2.value;

                        if (!_this2.destroyed) {
                          _context.next = 15;
                          break;
                        }

                        return _context.abrupt("return", {
                          v: void 0
                        });

                      case 15:
                        _context.next = 17;
                        return regeneratorRuntime.awrap(_this2._getEntryType(entry));

                      case 17:
                        entryType = _context.sent;

                        if (entryType === 'directory' && _this2._directoryFilter(entry)) {
                          if (depth <= _this2._maxDepth) {
                            _this2.parents.push(_this2._exploreDir(entry.fullPath, depth + 1));
                          }

                          if (_this2._wantsDir) {
                            _this2.push(entry);

                            batch--;
                          }
                        } else if ((entryType === 'file' || _this2._includeAsFile(entry)) && _this2._fileFilter(entry)) {
                          if (_this2._wantsFile) {
                            _this2.push(entry);

                            batch--;
                          }
                        }

                      case 19:
                        _iteratorNormalCompletion2 = true;
                        _context.next = 11;
                        break;

                      case 22:
                        _context.next = 28;
                        break;

                      case 24:
                        _context.prev = 24;
                        _context.t1 = _context["catch"](6);
                        _didIteratorError2 = true;
                        _iteratorError2 = _context.t1;

                      case 28:
                        _context.prev = 28;
                        _context.prev = 29;

                        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                          _iterator2["return"]();
                        }

                      case 31:
                        _context.prev = 31;

                        if (!_didIteratorError2) {
                          _context.next = 34;
                          break;
                        }

                        throw _iteratorError2;

                      case 34:
                        return _context.finish(31);

                      case 35:
                        return _context.finish(28);

                      case 36:
                        _context.next = 47;
                        break;

                      case 38:
                        parent = _this2.parents.pop();

                        if (parent) {
                          _context.next = 42;
                          break;
                        }

                        _this2.push(null);

                        return _context.abrupt("return", "break");

                      case 42:
                        _context.next = 44;
                        return regeneratorRuntime.awrap(parent);

                      case 44:
                        _this2.parent = _context.sent;

                        if (!_this2.destroyed) {
                          _context.next = 47;
                          break;
                        }

                        return _context.abrupt("return", {
                          v: void 0
                        });

                      case 47:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, null, null, [[6, 24, 28, 36], [29,, 31, 35]]);
              };

            case 5:
              if (!(!this.destroyed && batch > 0)) {
                _context2.next = 17;
                break;
              }

              _context2.next = 8;
              return regeneratorRuntime.awrap(_loop2());

            case 8:
              _ret = _context2.sent;
              _context2.t0 = _ret;
              _context2.next = _context2.t0 === "break" ? 12 : 13;
              break;

            case 12:
              return _context2.abrupt("break", 17);

            case 13:
              if (!(_typeof(_ret) === "object")) {
                _context2.next = 15;
                break;
              }

              return _context2.abrupt("return", _ret.v);

            case 15:
              _context2.next = 5;
              break;

            case 17:
              _context2.next = 22;
              break;

            case 19:
              _context2.prev = 19;
              _context2.t1 = _context2["catch"](3);
              this.destroy(_context2.t1);

            case 22:
              _context2.prev = 22;
              this.reading = false;
              return _context2.finish(22);

            case 25:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[3, 19, 22, 25]]);
    }
  }, {
    key: "_exploreDir",
    value: function _exploreDir(path, depth) {
      var files;
      return regeneratorRuntime.async(function _exploreDir$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return regeneratorRuntime.awrap(readdir(path, this._rdOptions));

            case 3:
              files = _context3.sent;
              _context3.next = 9;
              break;

            case 6:
              _context3.prev = 6;
              _context3.t0 = _context3["catch"](0);

              this._onError(_context3.t0);

            case 9:
              return _context3.abrupt("return", {
                files: files,
                depth: depth,
                path: path
              });

            case 10:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this, [[0, 6]]);
    }
  }, {
    key: "_formatEntry",
    value: function _formatEntry(dirent, path) {
      var entry, basename, fullPath;
      return regeneratorRuntime.async(function _formatEntry$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              basename = this._isDirent ? dirent.name : dirent;
              fullPath = sysPath.resolve(sysPath.join(path, basename));
              entry = {
                path: sysPath.relative(this._root, fullPath),
                fullPath: fullPath,
                basename: basename
              };

              if (!this._isDirent) {
                _context4.next = 8;
                break;
              }

              _context4.t0 = dirent;
              _context4.next = 11;
              break;

            case 8:
              _context4.next = 10;
              return regeneratorRuntime.awrap(this._stat(fullPath));

            case 10:
              _context4.t0 = _context4.sent;

            case 11:
              entry[this._statsProp] = _context4.t0;
              _context4.next = 17;
              break;

            case 14:
              _context4.prev = 14;
              _context4.t1 = _context4["catch"](0);

              this._onError(_context4.t1);

            case 17:
              return _context4.abrupt("return", entry);

            case 18:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this, [[0, 14]]);
    }
  }, {
    key: "_onError",
    value: function _onError(err) {
      if (isNormalFlowError(err) && !this.destroyed) {
        this.emit('warn', err);
      } else {
        this.destroy(err);
      }
    }
  }, {
    key: "_getEntryType",
    value: function _getEntryType(entry) {
      var stats, full, entryRealPath, entryRealPathStats, len;
      return regeneratorRuntime.async(function _getEntryType$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              // entry may be undefined, because a warning or an error were emitted
              // and the statsProp is undefined
              stats = entry && entry[this._statsProp];

              if (stats) {
                _context5.next = 3;
                break;
              }

              return _context5.abrupt("return");

            case 3:
              if (!stats.isFile()) {
                _context5.next = 5;
                break;
              }

              return _context5.abrupt("return", 'file');

            case 5:
              if (!stats.isDirectory()) {
                _context5.next = 7;
                break;
              }

              return _context5.abrupt("return", 'directory');

            case 7:
              if (!(stats && stats.isSymbolicLink())) {
                _context5.next = 28;
                break;
              }

              full = entry.fullPath;
              _context5.prev = 9;
              _context5.next = 12;
              return regeneratorRuntime.awrap(realpath(full));

            case 12:
              entryRealPath = _context5.sent;
              _context5.next = 15;
              return regeneratorRuntime.awrap(lstat(entryRealPath));

            case 15:
              entryRealPathStats = _context5.sent;

              if (!entryRealPathStats.isFile()) {
                _context5.next = 18;
                break;
              }

              return _context5.abrupt("return", 'file');

            case 18:
              if (!entryRealPathStats.isDirectory()) {
                _context5.next = 23;
                break;
              }

              len = entryRealPath.length;

              if (!(full.startsWith(entryRealPath) && full.substr(len, 1) === sysPath.sep)) {
                _context5.next = 22;
                break;
              }

              return _context5.abrupt("return", this._onError(new Error("Circular symlink detected: \"".concat(full, "\" points to \"").concat(entryRealPath, "\""))));

            case 22:
              return _context5.abrupt("return", 'directory');

            case 23:
              _context5.next = 28;
              break;

            case 25:
              _context5.prev = 25;
              _context5.t0 = _context5["catch"](9);

              this._onError(_context5.t0);

            case 28:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this, [[9, 25]]);
    }
  }, {
    key: "_includeAsFile",
    value: function _includeAsFile(entry) {
      var stats = entry && entry[this._statsProp];
      return stats && this._wantsEverything && !stats.isDirectory();
    }
  }]);

  return ReaddirpStream;
}(Readable);
/**
 * @typedef {Object} ReaddirpArguments
 * @property {Function=} fileFilter
 * @property {Function=} directoryFilter
 * @property {String=} type
 * @property {Number=} depth
 * @property {String=} root
 * @property {Boolean=} lstat
 * @property {Boolean=} bigint
 */

/**
 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
 * @param {String} root Root directory
 * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth
 */


var readdirp = function readdirp(root) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var type = options.entryType || options.type;
  if (type === 'both') type = FILE_DIR_TYPE; // backwards-compatibility

  if (type) options.type = type;

  if (!root) {
    throw new Error('readdirp: root argument is required. Usage: readdirp(root, options)');
  } else if (typeof root !== 'string') {
    throw new TypeError('readdirp: root argument must be a string. Usage: readdirp(root, options)');
  } else if (type && !ALL_TYPES.includes(type)) {
    throw new Error("readdirp: Invalid type passed. Use one of ".concat(ALL_TYPES.join(', ')));
  }

  options.root = root;
  return new ReaddirpStream(options);
};

var readdirpPromise = function readdirpPromise(root) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new Promise(function (resolve, reject) {
    var files = [];
    readdirp(root, options).on('data', function (entry) {
      return files.push(entry);
    }).on('end', function () {
      return resolve(files);
    }).on('error', function (error) {
      return reject(error);
    });
  });
};

readdirp.promise = readdirpPromise;
readdirp.ReaddirpStream = ReaddirpStream;
readdirp["default"] = readdirp;
module.exports = readdirp;