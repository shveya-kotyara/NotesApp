/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MappingsContext =
/*#__PURE__*/
function () {
  function MappingsContext() {
    _classCallCheck(this, MappingsContext);

    this.sourcesIndices = new Map();
    this.sourcesContent = new Map();
    this.hasSourceContent = false;
    this.currentOriginalLine = 1;
    this.currentSource = 0;
    this.unfinishedGeneratedLine = false;
  }

  _createClass(MappingsContext, [{
    key: "ensureSource",
    value: function ensureSource(source, originalSource) {
      var idx = this.sourcesIndices.get(source);

      if (typeof idx === "number") {
        return idx;
      }

      idx = this.sourcesIndices.size;
      this.sourcesIndices.set(source, idx);
      this.sourcesContent.set(source, originalSource);
      if (typeof originalSource === "string") this.hasSourceContent = true;
      return idx;
    }
  }, {
    key: "getArrays",
    value: function getArrays() {
      var sources = [];
      var sourcesContent = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.sourcesContent[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pair = _step.value;
          sources.push(pair[0]);
          sourcesContent.push(pair[1]);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return {
        sources: sources,
        sourcesContent: sourcesContent
      };
    }
  }]);

  return MappingsContext;
}();

module.exports = MappingsContext;