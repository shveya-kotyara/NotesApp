/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var getNumberOfLines = require("./helpers").getNumberOfLines;

var getUnfinishedLine = require("./helpers").getUnfinishedLine;

var CodeNode =
/*#__PURE__*/
function () {
  function CodeNode(generatedCode) {
    _classCallCheck(this, CodeNode);

    this.generatedCode = generatedCode;
  }

  _createClass(CodeNode, [{
    key: "clone",
    value: function clone() {
      return new CodeNode(this.generatedCode);
    }
  }, {
    key: "getGeneratedCode",
    value: function getGeneratedCode() {
      return this.generatedCode;
    }
  }, {
    key: "getMappings",
    value: function getMappings(mappingsContext) {
      var lines = getNumberOfLines(this.generatedCode);
      var mapping = Array(lines + 1).join(";");

      if (lines > 0) {
        mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);

        if (mappingsContext.unfinishedGeneratedLine > 0) {
          return mapping + "A";
        } else {
          return mapping;
        }
      } else {
        var prevUnfinished = mappingsContext.unfinishedGeneratedLine;
        mappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);

        if (prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) {
          return "A";
        } else {
          return "";
        }
      }
    }
  }, {
    key: "addGeneratedCode",
    value: function addGeneratedCode(generatedCode) {
      this.generatedCode += generatedCode;
    }
  }, {
    key: "mapGeneratedCode",
    value: function mapGeneratedCode(fn) {
      var generatedCode = fn(this.generatedCode);
      return new CodeNode(generatedCode);
    }
  }, {
    key: "getNormalizedNodes",
    value: function getNormalizedNodes() {
      return [this];
    }
  }, {
    key: "merge",
    value: function merge(otherNode) {
      if (otherNode instanceof CodeNode) {
        this.generatedCode += otherNode.generatedCode;
        return this;
      }

      return false;
    }
  }]);

  return CodeNode;
}();

module.exports = CodeNode;