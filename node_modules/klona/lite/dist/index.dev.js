"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function klona(x) {
  if (_typeof(x) !== 'object') return x;
  var k,
      tmp,
      str = Object.prototype.toString.call(x);

  if (str === '[object Object]') {
    if (x.constructor !== Object && typeof x.constructor === 'function') {
      tmp = new x.constructor();

      for (k in x) {
        if (tmp.hasOwnProperty(k) && tmp[k] !== x[k]) {
          tmp[k] = klona(x[k]);
        }
      }
    } else {
      tmp = {}; // null

      for (k in x) {
        if (k === '__proto__') {
          Object.defineProperty(tmp, k, {
            value: klona(x[k]),
            configurable: true,
            enumerable: true,
            writable: true
          });
        } else {
          tmp[k] = klona(x[k]);
        }
      }
    }

    return tmp;
  }

  if (str === '[object Array]') {
    k = x.length;

    for (tmp = Array(k); k--;) {
      tmp[k] = klona(x[k]);
    }

    return tmp;
  }

  if (str === '[object Date]') {
    return new Date(+x);
  }

  if (str === '[object RegExp]') {
    tmp = new RegExp(x.source, x.flags);
    tmp.lastIndex = x.lastIndex;
    return tmp;
  }

  return x;
}

exports.klona = klona;