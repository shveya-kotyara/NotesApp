"use strict";

var cache = new Map();

var fs = require('fs');

var _require = require('path'),
    dirname = _require.dirname,
    resolve = _require.resolve;

var lstat = function lstat(path) {
  return new Promise(function (res, rej) {
    return fs.lstat(path, function (er, st) {
      return er ? rej(er) : res(st);
    });
  });
};

var inferOwner = function inferOwner(path) {
  path = resolve(path);
  if (cache.has(path)) return Promise.resolve(cache.get(path));

  var statThen = function statThen(st) {
    var uid = st.uid,
        gid = st.gid;
    cache.set(path, {
      uid: uid,
      gid: gid
    });
    return {
      uid: uid,
      gid: gid
    };
  };

  var parent = dirname(path);
  var parentTrap = parent === path ? null : function (er) {
    return inferOwner(parent).then(function (owner) {
      cache.set(path, owner);
      return owner;
    });
  };
  return lstat(path).then(statThen, parentTrap);
};

var inferOwnerSync = function inferOwnerSync(path) {
  path = resolve(path);
  if (cache.has(path)) return cache.get(path);
  var parent = dirname(path); // avoid obscuring call site by re-throwing
  // "catch" the error by returning from a finally,
  // only if we're not at the root, and the parent call works.

  var threw = true;

  try {
    var st = fs.lstatSync(path);
    threw = false;
    var uid = st.uid,
        gid = st.gid;
    cache.set(path, {
      uid: uid,
      gid: gid
    });
    return {
      uid: uid,
      gid: gid
    };
  } finally {
    if (threw && parent !== path) {
      var owner = inferOwnerSync(parent);
      cache.set(path, owner);
      return owner; // eslint-disable-line no-unsafe-finally
    }
  }
};

var inflight = new Map();

module.exports = function (path) {
  path = resolve(path);
  if (inflight.has(path)) return Promise.resolve(inflight.get(path));
  var p = inferOwner(path).then(function (owner) {
    inflight["delete"](path);
    return owner;
  });
  inflight.set(path, p);
  return p;
};

module.exports.sync = inferOwnerSync;

module.exports.clearCache = function () {
  cache.clear();
  inflight.clear();
};