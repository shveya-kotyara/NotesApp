'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Types = require('./types');

var Utils = require('./utils');

var internals = {
  needsProtoHack: new Set([Types.set, Types.map, Types.weakSet, Types.weakMap])
};

module.exports = internals.clone = function (obj) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (_typeof(obj) !== 'object' || obj === null) {
    return obj;
  }

  var clone = internals.clone;
  var seen = _seen;

  if (options.shallow) {
    if (options.shallow !== true) {
      return internals.cloneWithShallow(obj, options);
    }

    clone = function clone(value) {
      return value;
    };
  } else {
    seen = seen || new Map();
    var lookup = seen.get(obj);

    if (lookup) {
      return lookup;
    }
  } // Built-in object types


  var baseProto = Types.getInternalProto(obj);

  if (baseProto === Types.buffer) {
    return Buffer && Buffer.from(obj); // $lab:coverage:ignore$
  }

  if (baseProto === Types.date) {
    return new Date(obj.getTime());
  }

  if (baseProto === Types.regex) {
    return new RegExp(obj);
  } // Generic objects


  var newObj = internals.base(obj, baseProto, options);

  if (newObj === obj) {
    return obj;
  }

  if (seen) {
    seen.set(obj, newObj); // Set seen, since obj could recurse
  }

  if (baseProto === Types.set) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var value = _step.value;
        newObj.add(clone(value, options, seen));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else if (baseProto === Types.map) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = obj[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _step2$value = _slicedToArray(_step2.value, 2),
            key = _step2$value[0],
            _value = _step2$value[1];

        newObj.set(key, clone(_value, options, seen));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  var keys = Utils.keys(obj, options);
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var _key = _step3.value;

      if (_key === '__proto__') {
        continue;
      }

      if (baseProto === Types.array && _key === 'length') {
        newObj.length = obj.length;
        continue;
      }

      var descriptor = Object.getOwnPropertyDescriptor(obj, _key);

      if (descriptor) {
        if (descriptor.get || descriptor.set) {
          Object.defineProperty(newObj, _key, descriptor);
        } else if (descriptor.enumerable) {
          newObj[_key] = clone(obj[_key], options, seen);
        } else {
          Object.defineProperty(newObj, _key, {
            enumerable: false,
            writable: true,
            configurable: true,
            value: clone(obj[_key], options, seen)
          });
        }
      } else {
        Object.defineProperty(newObj, _key, {
          enumerable: true,
          writable: true,
          configurable: true,
          value: clone(obj[_key], options, seen)
        });
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return newObj;
};

internals.cloneWithShallow = function (source, options) {
  var keys = options.shallow;
  options = Object.assign({}, options);
  options.shallow = false;
  var storage = Utils.store(source, keys); // Move shallow copy items to storage

  var copy = internals.clone(source, options); // Deep copy the rest

  Utils.restore(copy, source, storage); // Shallow copy the stored items and restore

  return copy;
};

internals.base = function (obj, baseProto, options) {
  if (baseProto === Types.array) {
    return [];
  }

  if (options.prototype === false) {
    // Defaults to true
    if (internals.needsProtoHack.has(baseProto)) {
      return new baseProto.constructor();
    }

    return {};
  }

  var proto = Object.getPrototypeOf(obj);

  if (proto && proto.isImmutable) {
    return obj;
  }

  if (internals.needsProtoHack.has(baseProto)) {
    var newObj = new proto.constructor();

    if (proto !== baseProto) {
      Object.setPrototypeOf(newObj, proto);
    }

    return newObj;
  }

  return Object.create(proto);
};