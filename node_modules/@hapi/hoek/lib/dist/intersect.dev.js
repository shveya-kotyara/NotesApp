'use strict';

var internals = {};

module.exports = function (array1, array2) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!array1 || !array2) {
    return options.first ? null : [];
  }

  var common = [];
  var hash = Array.isArray(array1) ? new Set(array1) : array1;
  var found = new Set();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = array2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var value = _step.value;

      if (internals.has(hash, value) && !found.has(value)) {
        if (options.first) {
          return value;
        }

        common.push(value);
        found.add(value);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return options.first ? null : common;
};

internals.has = function (ref, key) {
  if (typeof ref.has === 'function') {
    return ref.has(key);
  }

  return ref[key] !== undefined;
};