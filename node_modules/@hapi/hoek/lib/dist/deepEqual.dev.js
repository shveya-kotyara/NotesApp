'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Types = require('./types');

var internals = {
  mismatched: null
};

module.exports = function (obj, ref, options) {
  options = Object.assign({
    prototype: true
  }, options);
  return !!internals.isDeepEqual(obj, ref, options, []);
};

internals.isDeepEqual = function (obj, ref, options, seen) {
  if (obj === ref) {
    // Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
    return obj !== 0 || 1 / obj === 1 / ref;
  }

  var type = _typeof(obj);

  if (type !== _typeof(ref)) {
    return false;
  }

  if (obj === null || ref === null) {
    return false;
  }

  if (type === 'function') {
    if (!options.deepFunction || obj.toString() !== ref.toString()) {
      return false;
    } // Continue as object

  } else if (type !== 'object') {
    return obj !== obj && ref !== ref; // NaN
  }

  var instanceType = internals.getSharedType(obj, ref, !!options.prototype);

  switch (instanceType) {
    case Types.buffer:
      return Buffer && Buffer.prototype.equals.call(obj, ref);
    // $lab:coverage:ignore$

    case Types.promise:
      return obj === ref;

    case Types.regex:
      return obj.toString() === ref.toString();

    case internals.mismatched:
      return false;
  }

  for (var i = seen.length - 1; i >= 0; --i) {
    if (seen[i].isSame(obj, ref)) {
      return true; // If previous comparison failed, it would have stopped execution
    }
  }

  seen.push(new internals.SeenEntry(obj, ref));

  try {
    return !!internals.isDeepEqualObj(instanceType, obj, ref, options, seen);
  } finally {
    seen.pop();
  }
};

internals.getSharedType = function (obj, ref, checkPrototype) {
  if (checkPrototype) {
    if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
      return internals.mismatched;
    }

    return Types.getInternalProto(obj);
  }

  var type = Types.getInternalProto(obj);

  if (type !== Types.getInternalProto(ref)) {
    return internals.mismatched;
  }

  return type;
};

internals.valueOf = function (obj) {
  var objValueOf = obj.valueOf;

  if (objValueOf === undefined) {
    return obj;
  }

  try {
    return objValueOf.call(obj);
  } catch (err) {
    return err;
  }
};

internals.hasOwnEnumerableProperty = function (obj, key) {
  return Object.prototype.propertyIsEnumerable.call(obj, key);
};

internals.isSetSimpleEqual = function (obj, ref) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var entry = _step.value;

      if (!ref.has(entry)) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return true;
};

internals.isDeepEqualObj = function (instanceType, obj, ref, options, seen) {
  var isDeepEqual = internals.isDeepEqual,
      valueOf = internals.valueOf,
      hasOwnEnumerableProperty = internals.hasOwnEnumerableProperty;
  var keys = Object.keys,
      getOwnPropertySymbols = Object.getOwnPropertySymbols;

  if (instanceType === Types.array) {
    if (options.part) {
      // Check if any index match any other index
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = obj[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var objValue = _step2.value;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = ref[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var refValue = _step3.value;

              if (isDeepEqual(objValue, refValue, options, seen)) {
                return true;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    } else {
      if (obj.length !== ref.length) {
        return false;
      }

      for (var i = 0; i < obj.length; ++i) {
        if (!isDeepEqual(obj[i], ref[i], options, seen)) {
          return false;
        }
      }

      return true;
    }
  } else if (instanceType === Types.set) {
    if (obj.size !== ref.size) {
      return false;
    }

    if (!internals.isSetSimpleEqual(obj, ref)) {
      // Check for deep equality
      var ref2 = new Set(ref);
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = obj[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var objEntry = _step4.value;

          if (ref2["delete"](objEntry)) {
            continue;
          }

          var found = false;
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = ref2[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var refEntry = _step5.value;

              if (isDeepEqual(objEntry, refEntry, options, seen)) {
                ref2["delete"](refEntry);
                found = true;
                break;
              }
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }

          if (!found) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  } else if (instanceType === Types.map) {
    if (obj.size !== ref.size) {
      return false;
    }

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = obj[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var _step6$value = _slicedToArray(_step6.value, 2),
            key = _step6$value[0],
            value = _step6$value[1];

        if (value === undefined && !ref.has(key)) {
          return false;
        }

        if (!isDeepEqual(value, ref.get(key), options, seen)) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
          _iterator6["return"]();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  } else if (instanceType === Types.error) {
    // Always check name and message
    if (obj.name !== ref.name || obj.message !== ref.message) {
      return false;
    }
  } // Check .valueOf()


  var valueOfObj = valueOf(obj);
  var valueOfRef = valueOf(ref);

  if ((obj !== valueOfObj || ref !== valueOfRef) && !isDeepEqual(valueOfObj, valueOfRef, options, seen)) {
    return false;
  } // Check properties


  var objKeys = keys(obj);

  if (!options.part && objKeys.length !== keys(ref).length && !options.skip) {
    return false;
  }

  var skipped = 0;
  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = objKeys[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      var _key3 = _step7.value;

      if (options.skip && options.skip.includes(_key3)) {
        if (ref[_key3] === undefined) {
          ++skipped;
        }

        continue;
      }

      if (!hasOwnEnumerableProperty(ref, _key3)) {
        return false;
      }

      if (!isDeepEqual(obj[_key3], ref[_key3], options, seen)) {
        return false;
      }
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
        _iterator7["return"]();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }

  if (!options.part && objKeys.length - skipped !== keys(ref).length) {
    return false;
  } // Check symbols


  if (options.symbols !== false) {
    // Defaults to true
    var objSymbols = getOwnPropertySymbols(obj);
    var refSymbols = new Set(getOwnPropertySymbols(ref));
    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
      for (var _iterator8 = objSymbols[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
        var _key = _step8.value;

        if (!options.skip || !options.skip.includes(_key)) {
          if (hasOwnEnumerableProperty(obj, _key)) {
            if (!hasOwnEnumerableProperty(ref, _key)) {
              return false;
            }

            if (!isDeepEqual(obj[_key], ref[_key], options, seen)) {
              return false;
            }
          } else if (hasOwnEnumerableProperty(ref, _key)) {
            return false;
          }
        }

        refSymbols["delete"](_key);
      }
    } catch (err) {
      _didIteratorError8 = true;
      _iteratorError8 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
          _iterator8["return"]();
        }
      } finally {
        if (_didIteratorError8) {
          throw _iteratorError8;
        }
      }
    }

    var _iteratorNormalCompletion9 = true;
    var _didIteratorError9 = false;
    var _iteratorError9 = undefined;

    try {
      for (var _iterator9 = refSymbols[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
        var _key2 = _step9.value;

        if (hasOwnEnumerableProperty(ref, _key2)) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError9 = true;
      _iteratorError9 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
          _iterator9["return"]();
        }
      } finally {
        if (_didIteratorError9) {
          throw _iteratorError9;
        }
      }
    }
  }

  return true;
};

internals.SeenEntry =
/*#__PURE__*/
function () {
  function _class(obj, ref) {
    _classCallCheck(this, _class);

    this.obj = obj;
    this.ref = ref;
  }

  _createClass(_class, [{
    key: "isSame",
    value: function isSame(obj, ref) {
      return this.obj === obj && this.ref === ref;
    }
  }]);

  return _class;
}();