'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Domain = require('./domain');

var Email = require('./email');

var Tlds = require('./tlds');

var internals = {
  defaultTlds: {
    allow: Tlds,
    deny: null
  }
};
module.exports = {
  domain: {
    analyze: function analyze(domain, options) {
      options = internals.options(options);
      return Domain.analyze(domain, options);
    },
    isValid: function isValid(domain, options) {
      options = internals.options(options);
      return Domain.isValid(domain, options);
    }
  },
  email: {
    analyze: function analyze(email, options) {
      options = internals.options(options);
      return Email.analyze(email, options);
    },
    isValid: function isValid(email, options) {
      options = internals.options(options);
      return Email.isValid(email, options);
    }
  }
};

internals.options = function (options) {
  if (!options) {
    return {
      tlds: internals.defaultTlds
    };
  }

  if (options.tlds === false) {
    // Defaults to true
    return options;
  }

  if (!options.tlds || options.tlds === true) {
    return Object.assign({}, options, {
      tlds: internals.defaultTlds
    });
  }

  if (_typeof(options.tlds) !== 'object') {
    throw new Error('Invalid options: tlds must be a boolean or an object');
  }

  if (options.tlds.deny) {
    if (options.tlds.deny instanceof Set === false) {
      throw new Error('Invalid options: tlds.deny must be a Set object');
    }

    if (options.tlds.allow) {
      throw new Error('Invalid options: cannot specify both tlds.allow and tlds.deny lists');
    }

    return options;
  }

  if (options.tlds.allow === true) {
    return Object.assign({}, options, {
      tlds: internals.defaultTlds
    });
  }

  if (options.tlds.allow instanceof Set === false) {
    throw new Error('Invalid options: tlds.allow must be a Set object or true');
  }

  return options;
};