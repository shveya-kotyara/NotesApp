'use strict';

var Punycode = require('punycode');

var Code = require('@hapi/code');

var Address = require('..');

var Lab = require('@hapi/lab');

var internals = {};

var _exports$lab = exports.lab = Lab.script(),
    describe = _exports$lab.describe,
    it = _exports$lab.it;

var expect = Code.expect;
describe('email', function () {
  it('available as direct require', function () {
    expect(require('../lib/email').isValid('test@example.com')).to.be["true"]();
  });
  describe('analyze()', function () {
    it('identifies error', function () {
      var tests = [['', 'Address must be a non-empty string'], ['êjness@iana.org', 'Address contains forbidden Unicode characters', {
        allowUnicode: false
      }], ['test@test@test', 'Address cannot contain more than one @ character'], ['test', 'Address must contain one @ character'], ['@example.com', 'Address local part cannot be empty'], ['test@', 'Domain must be a non-empty string'], ['1234567890@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz.com', 'Address too long'], ['1234567890123456789012345678901234567890123456789012345678901234567890@example.com', 'Address local part too long'], ['x..y@example.com', 'Address local part contains empty dot-separated segment'], ['x:y@example.com', 'Address local part contains invalid character'], ['ê:y@example.com', 'Address local part contains invalid character'], ['test@com', 'Domain lacks the minimum required number of segments'], ['test@x.no-such-tld', 'Domain uses forbidden TLD'], ['test@example..com', 'Domain contains empty dot-separated segment'], ['test@1234567890123456789012345678901234567890123456789012345678901234567890.com', 'Domain contains dot-separated segment that is too long'], ['test@example+.com', 'Domain contains invalid character', {
        tlds: false
      }], ['test@example.com_', 'Domain contains invalid tld character', {
        tlds: false
      }]];

      for (var i = 0; i < tests.length; ++i) {
        var email = tests[i];
        var output = Address.email.analyze(email[0], email[2]);
        var result = email[1];

        if (!output || output.error !== result) {
          console.log(i, email[0]);
        }

        expect(output.error).to.equal(result);
      }
    });
    it('validates options', function () {
      var tests = [['test@example.com', 'Invalid options: tlds must be a boolean or an object', {
        tlds: 1
      }], ['test@example.com', 'Invalid options: tlds.allow must be a Set object or true', {
        tlds: {
          allow: ['test']
        }
      }], ['test@example.com', 'Invalid options: tlds.deny must be a Set object', {
        tlds: {
          deny: ['test']
        }
      }], ['test@example.com', 'Invalid options: cannot specify both tlds.allow and tlds.deny lists', {
        tlds: {
          allow: new Set(),
          deny: new Set()
        }
      }], [1, 'Invalid input: email must be a string']];

      var _loop = function _loop(i) {
        var email = tests[i];
        expect(function () {
          return Address.email.analyze(email[0], email[2]);
        }).to["throw"](email[1]);
      };

      for (var i = 0; i < tests.length; ++i) {
        _loop(i);
      }
    });
    describe('validated TLD', function () {
      it('applies built-in list', function () {
        expect(Address.email.analyze('test@example.com')).to.not.exist();
        expect(Address.email.analyze('test@example.com', {
          tlds: true
        })).to.not.exist();
        expect(Address.email.analyze('test@example.com', {
          tlds: {
            allow: true
          }
        })).to.not.exist();
      });
      it('ignores built-in list', function () {
        expect(Address.email.analyze('test@example.invalid-top', {
          tlds: false
        })).to.not.exist();
      });
      it('denies listed tls', function () {
        expect(Address.email.analyze('test@example.com', {
          tlds: {
            deny: new Set(['test'])
          }
        })).to.not.exist();
        expect(Address.email.analyze('test@example.com', {
          tlds: {
            deny: new Set(['com'])
          }
        })).to.equal({
          error: 'Domain uses forbidden TLD'
        });
      });
    });
  });
  describe('isValid()', function () {
    it('validates email', function () {
      // Tests adapted from https://github.com/skeggse/isemail
      // Copyright (c) 2008-2019, Eli Skeggs, Dominic Sayers, GlobeSherpa
      var tests = [['\r', false], ['test', false], ['@', false], ['test@', false], ['test@io', false], ['test@io', true, {
        minDomainSegments: 1
      }], ['@io', false], ['@iana.org', false], ['test@iana.org', true], ['test@nominet.org.uk', true], ['test@about.museum', true], ['a@iana.org', true], ['êjness@iana.org', true], ['ñoñó1234@iana.org', true], ['ñoñó1234@something.com', true], ['伊昭傑@郵件.商務', true, {
        tlds: {
          allow: new Set([Punycode.toASCII('商務')])
        }
      }], ["\uD801\uDC37\uD852\uDF62@iana.org", true], ['test.test@iana.org', true], ['.test@iana.org', false], ['test.@iana.org', false], ['test..iana.org', false], ['test_exa-mple.com', false], ['!#$%&`*+/=?^`{|}~@iana.org', true], ['test\\@test@iana.org', false], ['123@iana.org', true], ['test@123.com', true], ['test@iana.123', false], ['test@255.255.255.255', false], ['abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@iana.org', true], ['abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklmn@iana.org', false], ["\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06@iana.org", false], ['test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm', false], ["test@\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06.org", true], ["test@abcdefghijklmnopqrstuvwxyzabcdefghijklmno\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06.org", false], ['test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm.com', false], ['test@mason-dixon.com', true], ['test@-iana.org', false], ['test@iana-.com', false], ['test@.iana.org', false], ['test@iana.org.', false], ['test@iana..com', false], ['abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmno', false], ["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06\uD83D\uDE06", false], ['abcdef@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdef.hijklmnopqrstuv', false], ["abcdef@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghi.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd\uD83D\uDE06", false], ["abcdef@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghi.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\uD83D\uDE06", false], ['a@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijkl.hijk', false], ["a@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijkl.\uD83D\uDE06", false], ['\"\r', false], ['\"test\"@iana.org', false], ['\"\"@iana.org', false], ['\"\"\"@iana.org', false], ['\"\\a\"@iana.org', false], ['\"\\\"\"@iana.org', false], ['\"\\\"@iana.org', false], ['\"\\\\\"@iana.org', false], ['test\"@iana.org', false], ['\"test@iana.org', false], ['\"test\"test@iana.org', false], ['test\"text\"@iana.org', false], ['\"test\"\"test\"@iana.org', false], ['\"test\".\"test\"@iana.org', false], ['\"test\\ test\"@iana.org', false], ['\"test\".test@iana.org', false], ["\"test\0\"@iana.org", false], ["\"test\\\0\"@iana.org", false], ['\"test\r\n test\"@iana.org', false], ['\"abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefghj\"@iana.org', false], ['\"abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefg\\h\"@iana.org', false], ['test@[255.255.255.255]', false], ['test@a[255.255.255.255]', false], ['test@[255.255.255]', false], ['test@[255.255.255.255.255]', false], ['test@[255.255.255.256]', false], ['test@[1111:2222:3333:4444:5555:6666:7777:8888]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666:7777]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888:9999]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666:7777:888G]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666::8888]', false], ['test@[IPv6:1111:2222:3333:4444:5555::8888]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666::7777:8888]', false], ['test@[IPv6::3333:4444:5555:6666:7777:8888]', false], ['test@[IPv6:::3333:4444:5555:6666:7777:8888]', false], ['test@[IPv6:1111::4444:5555::8888]', false], ['test@[IPv6:::]', false], ['test@[IPv6:1111:2222:3333:4444:5555:255.255.255.255]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666:255.255.255.255]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666:7777:255.255.255.255]', false], ['test@[IPv6:1111:2222:3333:4444::255.255.255.255]', false], ['test@[IPv6:1111:2222:3333:4444:5555:6666::255.255.255.255]', false], ['test@[IPv6:1111:2222:3333:4444:::255.255.255.255]', false], ['test@[IPv6::255.255.255.255]', false], ['test@[255.255.255.255].local', false], ['test@local.[255.255.255.255]', false], ['test@local.[255.255.255.255].local', false], ['test@local.(comment)[255.255.255.255].local', false], ['test@local. [255.255.255.255].local', false], ['test@local.[255.255.255.255](comment).local', false], ['test@local.[255.255.255.255] .local', false], [' test @iana.org', false], ['test@ iana .com', false], ['test . test@iana.org', false], ['\r\n test@iana.org', false], ['\r\n \r\n test@iana.org', false], ['(\r', false], ['(comment)test@iana.org', false], ['((comment)test@iana.org', false], ['(comment(comment))test@iana.org', false], ['test@(comment)iana.org', false], ['test(comment)@iana.org', false], ['test(comment)test@iana.org', false], ['test@(comment)[255.255.255.255]', false], ['(comment)abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@iana.org', false], ['test@(comment)abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.com', false], ['(comment)test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.abcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrst', false], ['test@iana.org\n', false], ['xn--test@iana.org', true], ['test@iana.org-', false], ['\"test@iana.org', false], ['(test@iana.org', false], ['test@(iana.org', false], ['test@[1.2.3.4', false], ['\"test\\\"@iana.org', false], ['(comment\\)test@iana.org', false], ['test@iana.org(comment\\)', false], ['test@iana.org(comment\\', false], ['test@[RFC-5322-domain-literal]', false], ['test@[RFC-5322-郵件ñó-domain-literal]', false], ['test@[RFC-5322]-domain-literal]', false], ['test@[RFC-5322].domain-literal]', false], ['test@[RFC-5322-[domain-literal]', false], ['test@[', false], ["test@[\x07]", false], ["test@[RFC-5322-\\\x07-domain-literal]", false], ['test@[RFC-5322-\\\t-domain-literal]', false], ['test@[RFC-5322-\\]-domain-literal]', false], ['test@[RFC-5322-\\郵-no-domain-literal]', false], ['test@[RFC-5322--domain-literal]', false], ['test@[RFC-5322-domain-literal\\]', false], ['test@[RFC-5322-domain-literal\\', false], ['test@[RFC 5322 domain literal]', false], ['test@[RFC-5322-domain-literal] (comment)', false], ['@iana.org', false], ['test@.org', false], ['\"\"@iana.org', false], ['\"\"@iana.org', false], ['\"\\\"@iana.org', false], ['()test@iana.org', false], ['()test@iana.org', false], ['test@iana.org\r', false], ['\rtest@iana.org', false], ['\"\rtest\"@iana.org', false], ['(\r)test@iana.org', false], ['test@iana.org(\r)', false], ['test@<iana>.org', false], ['\ntest@iana.org', false], ['\"\n\"@iana.org', false], ['\"\\\n\"@iana.org', false], ['(\n)test@iana.org', false], ["\x07@iana.org", false], ["test@\x07.org", false], ["\"\x07\"@iana.org", false], ["\"\\\x07\"@iana.org", false], ["(\x07)test@iana.org", false], ['\r\ntest@iana.org', false], ['\r\n \r\ntest@iana.org', false], [' \r\ntest@iana.org', false], [' \r\n test@iana.org', false], [' \r\n \r\ntest@iana.org', false], [' \r\n\r\ntest@iana.org', false], [' \r\n\r\n test@iana.org', false], ['test@iana.org\r\n ', false], ['test@iana.org\r\n \r\n ', false], ['test@iana.org\r\n', false], ['test@iana.org \r', false], ['test@iana.org\r\n \r\n', false], ['test@iana.org \r\n', false], ['test@iana.org \r\n ', false], ['test@iana.org \r\n \r\n', false], ['test@iana.org \r\n\r\n', false], ['test@iana.org \r\n\r\n ', false], ['test@iana. org', false], ['test@[\r', false], ['test@[\r\n', false], [' test@iana.org', false], ['test@iana.org ', false], ['test@[IPv6:1::2:]', false], ["\"test\\\x94\"@iana.org", false], ['test@iana/icann.org', false], ['test@iana!icann.org', false], ['test@iana?icann.org', false], ['test@iana^icann.org', false], ['test@iana{icann}.org', false], ['test.(comment)test@iana.org', false], ['test@iana.(comment)org', false], ['test@iana(comment)iana.org', false], ['(comment\r\n comment)test@iana.org', false], ['test@org', true, {
        minDomainSegments: 1
      }], ["test\uD800@invalid", false], ["\"\uD800\"@invalid", false], ["\"\\\uD800\"@invalid", false], ["(\uD800)thing@invalid", false], ["\"\\\uD800\"@invalid", false], ["test@\uD800\uDFFF\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.no\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5.\u5546\u52D9", false, {
        tlds: {
          allow: new Set([Punycode.toASCII('商務')])
        }
      }], ["test@\uD800\uDFFF\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\u5546\u52D9", false, {
        tlds: {
          allow: new Set([Punycode.toASCII('商務')])
        }
      }], ["test@\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\uD83D\uDE06\xF1o\xF1.o\xF1\xF3\u90F5\u4EF6\uC138\xF1o\xF1.o\xF1\xF3\u90F5\u4EF6\u0644\u4EEC\u010D\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\u05DC\xF1o.\xF1o\xF1\xF3\u90F5\u4EF6\u092F\u672C\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\uC138a\xF1o\xF1.o\xF1\xF3\u90F5\u4EF6\uD83D\uDE06bc\uC138\u90F5\uD83D\uDE06\xF1o.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\uD83D\uDE06\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\uC138\xF1o\xF1.o\xF1\xF3\u90F5\u4EF6\u0644\u4EEC\xF1o\xF1o\xF1\xF3.\u90F5\u4EF6\uD83D\uDE06\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\u90F5\uC138\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\u0644\u4EEC\xF1o\xF1o\xF1\xF3\u90F5\u4EF6.\uD83D\uDE06\xF1o\xF1o\xF1\xF3\u90F5\u4EF6\u90F5\uC138\u0644\u4EEC.\u90F5\u4EF6\uD83D\uDE06\xF1o\xF1o\xF1\xF3\u90F5.\u4EF6\u90F5\uC138\u4EEC\uD83D\uDE06\xF1o\xF1o\xF1\xF3\u4EF6\u90F5\uC138\xF1o\xF1o\xF1\xF3\u90F5\u4EF6", false, {
        tlds: {
          allow: new Set([Punycode.toASCII('商務')])
        }
      }], ['test@ñoñó郵件ñoñó郵件ñoñó郵件ñoñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件ñoñó郵件.商務', false, {
        tlds: {
          allow: new Set([Punycode.toASCII('商務')])
        }
      }], ["\uD83D\uDE06\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\uD83D\uDE06\u90F5\u4EF6\xF1o\xF1o\xF1\xF3\u90F5@\uD83D\uDE06\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3.\uD83D\uDE06\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3.\uD83D\uDE06\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3.\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\uD83D\uDE06.\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3.\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3.\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\uD83D\uDE06\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3.\uD83D\uDE06\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3.\uD83D\uDE06\u5546\u52D9.\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6\xF1o\xF1\xF3\u90F5\u4EF6.\uD83D\uDE06\u5546\u52D9.\uD83D\uDE06\u5546\u52D9.\uD83D\uDE06\u5546\u52D9", false, {
        tlds: {
          allow: new Set([Punycode.toASCII('商務')])
        }
      }], ['test@[\0', false], ['(\0)test@example.com', false], ['shouldbe@invalid', false], ['shouldbe@INVALID', false], ['shouldbe@example.com', true], ['shouldbe@example.COM', true], ['apple-touch-icon-60x60@2x.png', false], ['shouldbe@XN--UNUP4Y', true, {
        minDomainSegments: 1
      }], ['shouldbe@xn--unup4y', true, {
        minDomainSegments: 1
      }], ["shouldbe@\u6E38\u620F", true, {
        minDomainSegments: 1
      }], ['æøå', false], ['1234567890abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw@xyz.com', true, {
        ignoreLength: true
      }], ['test@example.com@example.com', false], ['test@example.com/path', false], ['test@example.com:123', false]];

      for (var i = 0; i < tests.length; ++i) {
        var email = tests[i];
        var valid = Address.email.isValid(email[0], email[2]);
        var result = email[1];

        if (valid !== result) {
          var outcome = Address.email.analyze(email[0], email[2]);

          if (outcome) {
            console.log(i, email[0], outcome.error);
          } else {
            console.log(i, email[0]);
          }
        }

        expect(valid).to.equal(result);
      }
    });
  });
});
describe('domain', function () {
  it('available as direct require', function () {
    expect(require('../lib/domain').isValid('example.com')).to.be["true"]();
  });
  describe('analyze()', function () {
    it('identifies error', function () {
      var tests = [['', 'Domain must be a non-empty string'], ['êiana.org', 'Domain contains forbidden Unicode characters', {
        allowUnicode: false
      }], ['abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz.com', 'Domain too long'], ['com', 'Domain lacks the minimum required number of segments'], ['x.no-such-tld', 'Domain uses forbidden TLD'], ['example..com', 'Domain contains empty dot-separated segment'], ['1234567890123456789012345678901234567890123456789012345678901234567890.com', 'Domain contains dot-separated segment that is too long'], ['example+.com', 'Domain contains invalid character', {
        tlds: false
      }], ['example.com_', 'Domain contains invalid tld character', {
        tlds: false
      }]];

      for (var i = 0; i < tests.length; ++i) {
        var domain = tests[i];
        var output = Address.domain.analyze(domain[0], domain[2]);
        var result = domain[1];

        if (!output || output.error !== result) {
          console.log(i, domain[0]);
        }

        expect(output.error).to.equal(result);
      }
    });
    it('validates options', function () {
      var tests = [['example.com', 'Invalid options: tlds must be a boolean or an object', {
        tlds: 1
      }], ['example.com', 'Invalid options: tlds.allow must be a Set object or true', {
        tlds: {
          allow: ['test']
        }
      }], ['example.com', 'Invalid options: tlds.deny must be a Set object', {
        tlds: {
          deny: ['test']
        }
      }], ['example.com', 'Invalid options: cannot specify both tlds.allow and tlds.deny lists', {
        tlds: {
          allow: new Set(),
          deny: new Set()
        }
      }], [1, 'Invalid input: domain must be a string']];

      var _loop2 = function _loop2(i) {
        var domain = tests[i];
        expect(function () {
          return Address.domain.analyze(domain[0], domain[2]);
        }).to["throw"](domain[1]);
      };

      for (var i = 0; i < tests.length; ++i) {
        _loop2(i);
      }
    });
  });
  describe('isValid()', function () {
    it('validates domain', function () {
      var tests = [['\r', false], ['test', false], ['@', false], ['iana.org', true], ['nominet.org.uk', true], ['about.museum', true], ['x.商務', true, {
        tlds: {
          allow: new Set([Punycode.toASCII('商務')])
        }
      }], ['iana.123', false], ['255.255.255.255', false], ['XN--UNUP4Y', true, {
        minDomainSegments: 1
      }], ['test@example.com', false], ['test:example.com', false], ['example.com:123', false], ['example.com/path', false]];

      for (var i = 0; i < tests.length; ++i) {
        var domain = tests[i];
        var valid = Address.domain.isValid(domain[0], domain[2]);
        var result = domain[1];

        if (valid !== result) {
          var outcome = Address.domain.analyze(domain[0], domain[2]);

          if (outcome) {
            console.log(i, domain[0], outcome.error);
          } else {
            console.log(i, domain[0]);
          }
        }

        expect(valid).to.equal(result);
      }
    });
  });
});