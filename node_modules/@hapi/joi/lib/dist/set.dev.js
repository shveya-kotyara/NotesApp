'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Ref = require('./ref');

var internals = {};

internals.extendedCheckForValue = function (value, insensitive) {
  var valueType = _typeof(value);

  if (valueType === 'object') {
    if (value instanceof Date) {
      return function (item) {
        return item instanceof Date && value.getTime() === item.getTime();
      };
    }

    if (Buffer.isBuffer(value)) {
      return function (item) {
        return Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary');
      };
    }
  } else if (insensitive && valueType === 'string') {
    var lowercaseValue = value.toLowerCase();
    return function (item) {
      return typeof item === 'string' && lowercaseValue === item.toLowerCase();
    };
  }

  return null;
};

module.exports =
/*#__PURE__*/
function () {
  function InternalSet(from) {
    _classCallCheck(this, InternalSet);

    this._set = new Set(from);
    this._hasRef = false;
  }

  _createClass(InternalSet, [{
    key: "add",
    value: function add(value, refs) {
      var isRef = Ref.isRef(value);

      if (!isRef && this.has(value, null, null, false)) {
        return this;
      }

      if (refs !== undefined) {
        // If it's a merge, we don't have any refs
        Ref.push(refs, value);
      }

      this._set.add(value);

      this._hasRef |= isRef;
      return this;
    }
  }, {
    key: "merge",
    value: function merge(add, remove) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = add._set[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;
          this.add(item);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = remove._set[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _item = _step2.value;
          this.remove(_item);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return this;
    }
  }, {
    key: "remove",
    value: function remove(value) {
      this._set["delete"](value);

      return this;
    }
  }, {
    key: "has",
    value: function has(value, state, options, insensitive) {
      return !!this.get(value, state, options, insensitive);
    }
  }, {
    key: "get",
    value: function get(value, state, options, insensitive) {
      if (!this._set.size) {
        return false;
      }

      var hasValue = this._set.has(value);

      if (hasValue) {
        return {
          value: value
        };
      }

      var extendedCheck = internals.extendedCheckForValue(value, insensitive);

      if (!extendedCheck) {
        if (state && this._hasRef) {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = this._set[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var item = _step3.value;

              if (Ref.isRef(item)) {
                item = [].concat(item(state.reference || state.parent, options));
                var found = item.indexOf(value);

                if (found >= 0) {
                  return {
                    value: item[found]
                  };
                }
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }

        return false;
      }

      return this._has(value, state, options, extendedCheck);
    }
  }, {
    key: "_has",
    value: function _has(value, state, options, check) {
      var checkRef = !!(state && this._hasRef);

      var isReallyEqual = function isReallyEqual(item) {
        if (value === item) {
          return true;
        }

        return check(item);
      };

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = this._set[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var item = _step4.value;

          if (checkRef && Ref.isRef(item)) {
            // Only resolve references if there is a state, otherwise it's a merge
            item = item(state.reference || state.parent, options);

            if (Array.isArray(item)) {
              var found = item.findIndex(isReallyEqual);

              if (found >= 0) {
                return {
                  value: item[found]
                };
              }

              continue;
            }
          }

          if (isReallyEqual(item)) {
            return {
              value: item
            };
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      return false;
    }
  }, {
    key: "values",
    value: function values(options) {
      if (options && options.stripUndefined) {
        var values = [];
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = this._set[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var item = _step5.value;

            if (item !== undefined) {
              values.push(item);
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        return values;
      }

      return Array.from(this._set);
    }
  }, {
    key: "slice",
    value: function slice() {
      var set = new InternalSet(this._set);
      set._hasRef = this._hasRef;
      return set;
    }
  }, {
    key: "concat",
    value: function concat(source) {
      var set = new InternalSet([].concat(_toConsumableArray(this._set), _toConsumableArray(source._set)));
      set._hasRef = !!(this._hasRef | source._hasRef);
      return set;
    }
  }]);

  return InternalSet;
}();