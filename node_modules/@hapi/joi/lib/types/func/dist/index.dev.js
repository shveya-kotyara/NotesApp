'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Hoek = require('@hapi/hoek');

var ObjectType = require('../object');

var Ref = require('../../ref');

var internals = {};

internals.Func =
/*#__PURE__*/
function (_ObjectType$construct) {
  _inherits(_class, _ObjectType$construct);

  function _class() {
    var _this;

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));
    _this._flags.func = true;
    return _this;
  }

  _createClass(_class, [{
    key: "arity",
    value: function arity(n) {
      Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
      return this._test('arity', n, function (value, state, options) {
        if (value.length === n) {
          return value;
        }

        return this.createError('function.arity', {
          n: n
        }, state, options);
      });
    }
  }, {
    key: "minArity",
    value: function minArity(n) {
      Hoek.assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');
      return this._test('minArity', n, function (value, state, options) {
        if (value.length >= n) {
          return value;
        }

        return this.createError('function.minArity', {
          n: n
        }, state, options);
      });
    }
  }, {
    key: "maxArity",
    value: function maxArity(n) {
      Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');
      return this._test('maxArity', n, function (value, state, options) {
        if (value.length <= n) {
          return value;
        }

        return this.createError('function.maxArity', {
          n: n
        }, state, options);
      });
    }
  }, {
    key: "ref",
    value: function ref() {
      return this._test('ref', null, function (value, state, options) {
        if (Ref.isRef(value)) {
          return value;
        }

        return this.createError('function.ref', {
          value: value
        }, state, options);
      });
    }
  }, {
    key: "class",
    value: function _class() {
      return this._test('class', null, function (value, state, options) {
        if (/^\s*class\s/.test(value.toString())) {
          return value;
        }

        return this.createError('function.class', {
          value: value
        }, state, options);
      });
    }
  }]);

  return _class;
}(ObjectType.constructor);

module.exports = new internals.Func();