'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Hoek = require('@hapi/hoek');

var Any = require('../any');

var internals = {};

internals.Lazy =
/*#__PURE__*/
function (_Any) {
  _inherits(_class, _Any);

  function _class() {
    var _this;

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));
    _this._type = 'lazy';
    _this._flags.once = true;
    _this._cache = null;
    return _this;
  }

  _createClass(_class, [{
    key: "_init",
    value: function _init(fn, options) {
      return this.set(fn, options);
    }
  }, {
    key: "_base",
    value: function _base(value, state, options) {
      var schema;

      if (this._cache) {
        schema = this._cache;
      } else {
        var result = {
          value: value
        };
        var lazy = this._flags.lazy;

        if (!lazy) {
          result.errors = this.createError('lazy.base', null, state, options);
          return result;
        }

        schema = lazy();

        if (!(schema instanceof Any)) {
          result.errors = this.createError('lazy.schema', {
            schema: schema
          }, state, options);
          return result;
        }

        if (this._flags.once) {
          this._cache = schema;
        }
      }

      return schema._validate(value, state, options);
    }
  }, {
    key: "set",
    value: function set(fn, options) {
      Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');
      Hoek.assert(options === undefined || options && _typeof(options) === 'object' && !Array.isArray(options), "Options must be an object");

      if (options) {
        var unknownOptions = Object.keys(options).filter(function (key) {
          return !['once'].includes(key);
        });
        Hoek.assert(unknownOptions.length === 0, "Options contain unknown keys: ".concat(unknownOptions));
        Hoek.assert(options.once === undefined || typeof options.once === 'boolean', 'Option "once" must be a boolean');
      }

      var obj = this.clone();
      obj._flags.lazy = fn;

      if (options && options.once !== obj._flags.once) {
        obj._flags.once = options.once;
      }

      return obj;
    }
  }]);

  return _class;
}(Any);

module.exports = new internals.Lazy();