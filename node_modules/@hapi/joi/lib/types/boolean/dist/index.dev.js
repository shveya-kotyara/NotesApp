'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Hoek = require('@hapi/hoek');

var Any = require('../any');

var internals = {
  Set: require('../../set')
};

internals.Boolean =
/*#__PURE__*/
function (_Any) {
  _inherits(_class, _Any);

  function _class() {
    var _this;

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));
    _this._type = 'boolean';
    _this._flags.insensitive = true;
    _this._inner.truthySet = new internals.Set();
    _this._inner.falsySet = new internals.Set();
    return _this;
  }

  _createClass(_class, [{
    key: "_base",
    value: function _base(value, state, options) {
      var result = {
        value: value
      };

      if (typeof value === 'string' && options.convert) {
        var normalized = this._flags.insensitive ? value.toLowerCase() : value;
        result.value = normalized === 'true' ? true : normalized === 'false' ? false : value;
      }

      if (typeof result.value !== 'boolean') {
        result.value = this._inner.truthySet.has(value, null, null, this._flags.insensitive) ? true : this._inner.falsySet.has(value, null, null, this._flags.insensitive) ? false : value;
      }

      result.errors = typeof result.value === 'boolean' ? null : this.createError('boolean.base', {
        value: value
      }, state, options);
      return result;
    }
  }, {
    key: "truthy",
    value: function truthy() {
      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }

      var obj = this.clone();
      values = Hoek.flatten(values);

      for (var i = 0; i < values.length; ++i) {
        var value = values[i];
        Hoek.assert(value !== undefined, 'Cannot call truthy with undefined');

        obj._inner.truthySet.add(value);
      }

      return obj;
    }
  }, {
    key: "falsy",
    value: function falsy() {
      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        values[_key2] = arguments[_key2];
      }

      var obj = this.clone();
      values = Hoek.flatten(values);

      for (var i = 0; i < values.length; ++i) {
        var value = values[i];
        Hoek.assert(value !== undefined, 'Cannot call falsy with undefined');

        obj._inner.falsySet.add(value);
      }

      return obj;
    }
  }, {
    key: "insensitive",
    value: function insensitive(enabled) {
      var insensitive = enabled === undefined ? true : !!enabled;

      if (this._flags.insensitive === insensitive) {
        return this;
      }

      var obj = this.clone();
      obj._flags.insensitive = insensitive;
      return obj;
    }
  }, {
    key: "describe",
    value: function describe() {
      var description = _get(_getPrototypeOf(_class.prototype), "describe", this).call(this);

      description.truthy = [true].concat(_toConsumableArray(this._inner.truthySet.values()));
      description.falsy = [false].concat(_toConsumableArray(this._inner.falsySet.values()));
      return description;
    }
  }]);

  return _class;
}(Any);

module.exports = new internals.Boolean();