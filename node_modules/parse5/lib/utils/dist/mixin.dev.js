'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Mixin =
/*#__PURE__*/
function () {
  function Mixin(host) {
    _classCallCheck(this, Mixin);

    var originalMethods = {};

    var overriddenMethods = this._getOverriddenMethods(this, originalMethods);

    for (var _i = 0, _Object$keys = Object.keys(overriddenMethods); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];

      if (typeof overriddenMethods[key] === 'function') {
        originalMethods[key] = host[key];
        host[key] = overriddenMethods[key];
      }
    }
  }

  _createClass(Mixin, [{
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods() {
      throw new Error('Not implemented');
    }
  }]);

  return Mixin;
}();

Mixin.install = function (host, Ctor, opts) {
  if (!host.__mixins) {
    host.__mixins = [];
  }

  for (var i = 0; i < host.__mixins.length; i++) {
    if (host.__mixins[i].constructor === Ctor) {
      return host.__mixins[i];
    }
  }

  var mixin = new Ctor(host, opts);

  host.__mixins.push(mixin);

  return mixin;
};

module.exports = Mixin;