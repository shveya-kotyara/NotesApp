'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Mixin = require('../../utils/mixin');

var PositionTrackingPreprocessorMixin =
/*#__PURE__*/
function (_Mixin) {
  _inherits(PositionTrackingPreprocessorMixin, _Mixin);

  function PositionTrackingPreprocessorMixin(preprocessor) {
    var _this;

    _classCallCheck(this, PositionTrackingPreprocessorMixin);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PositionTrackingPreprocessorMixin).call(this, preprocessor));
    _this.preprocessor = preprocessor;
    _this.isEol = false;
    _this.lineStartPos = 0;
    _this.droppedBufferSize = 0;
    _this.offset = 0;
    _this.col = 0;
    _this.line = 1;
    return _this;
  }

  _createClass(PositionTrackingPreprocessorMixin, [{
    key: "_getOverriddenMethods",
    value: function _getOverriddenMethods(mxn, orig) {
      return {
        advance: function advance() {
          var pos = this.pos + 1;
          var ch = this.html[pos]; //NOTE: LF should be in the last column of the line

          if (mxn.isEol) {
            mxn.isEol = false;
            mxn.line++;
            mxn.lineStartPos = pos;
          }

          if (ch === '\n' || ch === '\r' && this.html[pos + 1] !== '\n') {
            mxn.isEol = true;
          }

          mxn.col = pos - mxn.lineStartPos + 1;
          mxn.offset = mxn.droppedBufferSize + pos;
          return orig.advance.call(this);
        },
        retreat: function retreat() {
          orig.retreat.call(this);
          mxn.isEol = false;
          mxn.col = this.pos - mxn.lineStartPos + 1;
        },
        dropParsedChunk: function dropParsedChunk() {
          var prevPos = this.pos;
          orig.dropParsedChunk.call(this);
          var reduction = prevPos - this.pos;
          mxn.lineStartPos -= reduction;
          mxn.droppedBufferSize += reduction;
          mxn.offset = mxn.droppedBufferSize + this.pos;
        }
      };
    }
  }]);

  return PositionTrackingPreprocessorMixin;
}(Mixin);

module.exports = PositionTrackingPreprocessorMixin;