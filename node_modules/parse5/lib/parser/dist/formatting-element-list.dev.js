'use strict'; //Const

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NOAH_ARK_CAPACITY = 3; //List of formatting elements

var FormattingElementList =
/*#__PURE__*/
function () {
  function FormattingElementList(treeAdapter) {
    _classCallCheck(this, FormattingElementList);

    this.length = 0;
    this.entries = [];
    this.treeAdapter = treeAdapter;
    this.bookmark = null;
  } //Noah Ark's condition
  //OPTIMIZATION: at first we try to find possible candidates for exclusion using
  //lightweight heuristics without thorough attributes check.


  _createClass(FormattingElementList, [{
    key: "_getNoahArkConditionCandidates",
    value: function _getNoahArkConditionCandidates(newElement) {
      var candidates = [];

      if (this.length >= NOAH_ARK_CAPACITY) {
        var neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
        var neTagName = this.treeAdapter.getTagName(newElement);
        var neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

        for (var i = this.length - 1; i >= 0; i--) {
          var entry = this.entries[i];

          if (entry.type === FormattingElementList.MARKER_ENTRY) {
            break;
          }

          var element = entry.element;
          var elementAttrs = this.treeAdapter.getAttrList(element);
          var isCandidate = this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength;

          if (isCandidate) {
            candidates.push({
              idx: i,
              attrs: elementAttrs
            });
          }
        }
      }

      return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
    }
  }, {
    key: "_ensureNoahArkCondition",
    value: function _ensureNoahArkCondition(newElement) {
      var candidates = this._getNoahArkConditionCandidates(newElement);

      var cLength = candidates.length;

      if (cLength) {
        var neAttrs = this.treeAdapter.getAttrList(newElement);
        var neAttrsLength = neAttrs.length;
        var neAttrsMap = Object.create(null); //NOTE: build attrs map for the new element so we can perform fast lookups

        for (var i = 0; i < neAttrsLength; i++) {
          var neAttr = neAttrs[i];
          neAttrsMap[neAttr.name] = neAttr.value;
        }

        for (var _i = 0; _i < neAttrsLength; _i++) {
          for (var j = 0; j < cLength; j++) {
            var cAttr = candidates[j].attrs[_i];

            if (neAttrsMap[cAttr.name] !== cAttr.value) {
              candidates.splice(j, 1);
              cLength--;
            }

            if (candidates.length < NOAH_ARK_CAPACITY) {
              return;
            }
          }
        } //NOTE: remove bottommost candidates until Noah's Ark condition will not be met


        for (var _i2 = cLength - 1; _i2 >= NOAH_ARK_CAPACITY - 1; _i2--) {
          this.entries.splice(candidates[_i2].idx, 1);
          this.length--;
        }
      }
    } //Mutations

  }, {
    key: "insertMarker",
    value: function insertMarker() {
      this.entries.push({
        type: FormattingElementList.MARKER_ENTRY
      });
      this.length++;
    }
  }, {
    key: "pushElement",
    value: function pushElement(element, token) {
      this._ensureNoahArkCondition(element);

      this.entries.push({
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
      });
      this.length++;
    }
  }, {
    key: "insertElementAfterBookmark",
    value: function insertElementAfterBookmark(element, token) {
      var bookmarkIdx = this.length - 1;

      for (; bookmarkIdx >= 0; bookmarkIdx--) {
        if (this.entries[bookmarkIdx] === this.bookmark) {
          break;
        }
      }

      this.entries.splice(bookmarkIdx + 1, 0, {
        type: FormattingElementList.ELEMENT_ENTRY,
        element: element,
        token: token
      });
      this.length++;
    }
  }, {
    key: "removeEntry",
    value: function removeEntry(entry) {
      for (var i = this.length - 1; i >= 0; i--) {
        if (this.entries[i] === entry) {
          this.entries.splice(i, 1);
          this.length--;
          break;
        }
      }
    }
  }, {
    key: "clearToLastMarker",
    value: function clearToLastMarker() {
      while (this.length) {
        var entry = this.entries.pop();
        this.length--;

        if (entry.type === FormattingElementList.MARKER_ENTRY) {
          break;
        }
      }
    } //Search

  }, {
    key: "getElementEntryInScopeWithTagName",
    value: function getElementEntryInScopeWithTagName(tagName) {
      for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.MARKER_ENTRY) {
          return null;
        }

        if (this.treeAdapter.getTagName(entry.element) === tagName) {
          return entry;
        }
      }

      return null;
    }
  }, {
    key: "getElementEntry",
    value: function getElementEntry(element) {
      for (var i = this.length - 1; i >= 0; i--) {
        var entry = this.entries[i];

        if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {
          return entry;
        }
      }

      return null;
    }
  }]);

  return FormattingElementList;
}(); //Entry types


FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';
module.exports = FormattingElementList;