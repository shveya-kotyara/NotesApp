'use strict';

var os = require('os');

var defaultGateway = require('default-gateway');

var ipaddr = require('ipaddr.js');

function findIp(gateway) {
  var interfaces = os.networkInterfaces();
  var gatewayIp = ipaddr.parse(gateway);
  var ip; // Look for the matching interface in all local interfaces

  Object.keys(interfaces).some(function (name) {
    return interfaces[name].some(function (addr) {
      var prefix = ipaddr.parse(addr.netmask).prefixLengthFromSubnetMask();
      var net = ipaddr.parseCIDR("".concat(addr.address, "/").concat(prefix));

      if (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {
        ip = net[0].toString();
      }

      return Boolean(ip);
    });
  });
  return ip;
}

function promise(family) {
  return defaultGateway[family]().then(function (result) {
    return findIp(result.gateway) || null;
  })["catch"](function () {
    return null;
  });
}

function sync(family) {
  try {
    var result = defaultGateway[family].sync();
    return findIp(result.gateway) || null;
  } catch (error) {
    return null;
  }
}

var internalIp = {};

internalIp.v6 = function () {
  return promise('v6');
};

internalIp.v4 = function () {
  return promise('v4');
};

internalIp.v6.sync = function () {
  return sync('v6');
};

internalIp.v4.sync = function () {
  return sync('v4');
};

module.exports = internalIp; // TODO: Remove this for the next major release

module.exports["default"] = internalIp;