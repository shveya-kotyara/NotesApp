"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signalsByNumber = exports.signalsByName = void 0;

var _os = require("os");

var _signals = require("./signals.js");

var _realtime = require("./realtime.js");

var getSignalsByName = function getSignalsByName() {
  var signals = (0, _signals.getSignals)();
  return signals.reduce(getSignalByName, {});
};

var getSignalByName = function getSignalByName(signalByNameMemo, _ref) {
  var name = _ref.name,
      number = _ref.number,
      description = _ref.description,
      supported = _ref.supported,
      action = _ref.action,
      forced = _ref.forced,
      standard = _ref.standard;
  return _objectSpread({}, signalByNameMemo, _defineProperty({}, name, {
    name: name,
    number: number,
    description: description,
    supported: supported,
    action: action,
    forced: forced,
    standard: standard
  }));
};

var signalsByName = getSignalsByName();
exports.signalsByName = signalsByName;

var getSignalsByNumber = function getSignalsByNumber() {
  var signals = (0, _signals.getSignals)();
  var length = _realtime.SIGRTMAX + 1;
  var signalsA = Array.from({
    length: length
  }, function (value, number) {
    return getSignalByNumber(number, signals);
  });
  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(signalsA)));
};

var getSignalByNumber = function getSignalByNumber(number, signals) {
  var signal = findSignalByNumber(number, signals);

  if (signal === undefined) {
    return {};
  }

  var name = signal.name,
      description = signal.description,
      supported = signal.supported,
      action = signal.action,
      forced = signal.forced,
      standard = signal.standard;
  return _defineProperty({}, number, {
    name: name,
    number: number,
    description: description,
    supported: supported,
    action: action,
    forced: forced,
    standard: standard
  });
};

var findSignalByNumber = function findSignalByNumber(number, signals) {
  var signal = signals.find(function (_ref3) {
    var name = _ref3.name;
    return _os.constants.signals[name] === number;
  });

  if (signal !== undefined) {
    return signal;
  }

  return signals.find(function (signalA) {
    return signalA.number === number;
  });
};

var signalsByNumber = getSignalsByNumber();
exports.signalsByNumber = signalsByNumber;