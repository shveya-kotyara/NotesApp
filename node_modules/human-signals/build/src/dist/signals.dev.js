"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSignals = void 0;

var _os = require("os");

var _core = require("./core.js");

var _realtime = require("./realtime.js");

var getSignals = function getSignals() {
  var realtimeSignals = (0, _realtime.getRealtimeSignals)();
  var signals = [].concat(_toConsumableArray(_core.SIGNALS), _toConsumableArray(realtimeSignals)).map(normalizeSignal);
  return signals;
};

exports.getSignals = getSignals;

var normalizeSignal = function normalizeSignal(_ref) {
  var name = _ref.name,
      defaultNumber = _ref.number,
      description = _ref.description,
      action = _ref.action,
      _ref$forced = _ref.forced,
      forced = _ref$forced === void 0 ? false : _ref$forced,
      standard = _ref.standard;
  var constantSignal = _os.constants.signals[name];
  var supported = constantSignal !== undefined;
  var number = supported ? constantSignal : defaultNumber;
  return {
    name: name,
    number: number,
    description: description,
    supported: supported,
    action: action,
    forced: forced,
    standard: standard
  };
};