"use strict"; // vue compiler module for transforming `img:srcset` to a number of `require`s

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils_1 = require("./utils");

exports["default"] = function (transformAssetUrlsOptions) {
  return {
    postTransformNode: function postTransformNode(node) {
      transform(node, transformAssetUrlsOptions);
    }
  };
}; // http://w3c.github.io/html/semantics-embedded-content.html#ref-for-image-candidate-string-5


var escapedSpaceCharacters = /( |\\t|\\n|\\f|\\r)+/g;

function transform(node, transformAssetUrlsOptions) {
  var tags = ['img', 'source'];

  if (tags.indexOf(node.tag) !== -1 && node.attrs) {
    node.attrs.forEach(function (attr) {
      if (attr.name === 'srcset') {
        // same logic as in transform-require.js
        var value = attr.value;
        var isStatic = value.charAt(0) === '"' && value.charAt(value.length - 1) === '"';

        if (!isStatic) {
          return;
        }

        var imageCandidates = value.substr(1, value.length - 2).split(',').map(function (s) {
          // The attribute value arrives here with all whitespace, except
          // normal spaces, represented by escape sequences
          var _s$replace$trim$split = s.replace(escapedSpaceCharacters, ' ').trim().split(' ', 2),
              _s$replace$trim$split2 = _slicedToArray(_s$replace$trim$split, 2),
              url = _s$replace$trim$split2[0],
              descriptor = _s$replace$trim$split2[1];

          return {
            require: utils_1.urlToRequire(url, transformAssetUrlsOptions),
            descriptor: descriptor
          };
        }); // "require(url1)"
        // "require(url1) 1x"
        // "require(url1), require(url2)"
        // "require(url1), require(url2) 2x"
        // "require(url1) 1x, require(url2)"
        // "require(url1) 1x, require(url2) 2x"

        var code = imageCandidates.map(function (_ref) {
          var require = _ref.require,
              descriptor = _ref.descriptor;
          return "".concat(require, " + \"").concat(descriptor ? ' ' + descriptor : '', ", \" + ");
        }).join('').slice(0, -6).concat('"').replace(/ \+ ""$/, '');
        attr.value = code;
      }
    });
  }
}