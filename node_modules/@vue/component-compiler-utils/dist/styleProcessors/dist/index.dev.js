"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processors = void 0;

var merge = require('merge-source-map'); // .scss/.sass processor


var scss = {
  render: function render(source, map, options) {
    var nodeSass = require('sass');

    var finalOptions = Object.assign({}, options, {
      data: source,
      file: options.filename,
      outFile: options.filename,
      sourceMap: !!map
    });

    try {
      var result = nodeSass.renderSync(finalOptions);

      if (map) {
        return {
          code: result.css.toString(),
          map: merge(map, JSON.parse(result.map.toString())),
          errors: []
        };
      }

      return {
        code: result.css.toString(),
        errors: []
      };
    } catch (e) {
      return {
        code: '',
        errors: [e]
      };
    }
  }
};
var sass = {
  render: function render(source, map, options) {
    return scss.render(source, map, Object.assign({}, options, {
      indentedSyntax: true
    }));
  }
}; // .less

var less = {
  render: function render(source, map, options) {
    var nodeLess = require('less');

    var result;
    var error = null;
    nodeLess.render(source, Object.assign({}, options, {
      syncImport: true
    }), function (err, output) {
      error = err;
      result = output;
    });
    if (error) return {
      code: '',
      errors: [error]
    };

    if (map) {
      return {
        code: result.css.toString(),
        map: merge(map, result.map),
        errors: []
      };
    }

    return {
      code: result.css.toString(),
      errors: []
    };
  }
}; // .styl

var styl = {
  render: function render(source, map, options) {
    var nodeStylus = require('stylus');

    try {
      var ref = nodeStylus(source);
      Object.keys(options).forEach(function (key) {
        return ref.set(key, options[key]);
      });
      if (map) ref.set('sourcemap', {
        inline: false,
        comment: false
      });
      var result = ref.render();

      if (map) {
        return {
          code: result,
          map: merge(map, ref.sourcemap),
          errors: []
        };
      }

      return {
        code: result,
        errors: []
      };
    } catch (e) {
      return {
        code: '',
        errors: [e]
      };
    }
  }
};
exports.processors = {
  less: less,
  sass: sass,
  scss: scss,
  styl: styl,
  stylus: styl
};