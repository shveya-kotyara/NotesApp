"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = void 0;

var source_map_1 = require("source-map");

var hash = require('hash-sum');

var cache = new (require('lru-cache'))(100);
var splitRE = /\r?\n/g;
var emptyRE = /^(?:\/\/)?\s*$/;

function parse(options) {
  var source = options.source,
      _options$filename = options.filename,
      filename = _options$filename === void 0 ? '' : _options$filename,
      compiler = options.compiler,
      _options$compilerPars = options.compilerParseOptions,
      compilerParseOptions = _options$compilerPars === void 0 ? {
    pad: 'line'
  } : _options$compilerPars,
      _options$sourceRoot = options.sourceRoot,
      sourceRoot = _options$sourceRoot === void 0 ? '' : _options$sourceRoot,
      _options$needMap = options.needMap,
      needMap = _options$needMap === void 0 ? true : _options$needMap;
  var cacheKey = hash(filename + source + JSON.stringify(compilerParseOptions));
  var output = cache.get(cacheKey);
  if (output) return output;
  output = compiler.parseComponent(source, compilerParseOptions);

  if (needMap) {
    if (output.script && !output.script.src) {
      output.script.map = generateSourceMap(filename, source, output.script.content, sourceRoot, compilerParseOptions.pad);
    }

    if (output.styles) {
      output.styles.forEach(function (style) {
        if (!style.src) {
          style.map = generateSourceMap(filename, source, style.content, sourceRoot, compilerParseOptions.pad);
        }
      });
    }
  }

  cache.set(cacheKey, output);
  return output;
}

exports.parse = parse;

function generateSourceMap(filename, source, generated, sourceRoot, pad) {
  var map = new source_map_1.SourceMapGenerator({
    file: filename.replace(/\\/g, '/'),
    sourceRoot: sourceRoot.replace(/\\/g, '/')
  });
  var offset = 0;

  if (!pad) {
    offset = source.split(generated).shift().split(splitRE).length - 1;
  }

  map.setSourceContent(filename, source);
  generated.split(splitRE).forEach(function (line, index) {
    if (!emptyRE.test(line)) {
      map.addMapping({
        source: filename,
        original: {
          line: index + 1 + offset,
          column: 0
        },
        generated: {
          line: index + 1,
          column: 0
        }
      });
    }
  });
  return JSON.parse(map.toString());
}