"use strict";
// vue compiler module for transforming `img:srcset` to a number of `require`s
exports.__esModule = true;
var utils_1 = require("./utils");
exports["default"] = (function (transformAssetUrlsOptions) { return ({
    postTransformNode: function (node) {
        transform(node, transformAssetUrlsOptions);
    }
}); });
// http://w3c.github.io/html/semantics-embedded-content.html#ref-for-image-candidate-string-5
var escapedSpaceCharacters = /( |\\t|\\n|\\f|\\r)+/g;
function transform(node, transformAssetUrlsOptions) {
    var tags = ['img', 'source'];
    if (tags.indexOf(node.tag) !== -1 && node.attrs) {
        node.attrs.forEach(function (attr) {
            if (attr.name === 'srcset') {
                // same logic as in transform-require.js
                var value = attr.value;
                var isStatic = value.charAt(0) === '"' && value.charAt(value.length - 1) === '"';
                if (!isStatic) {
                    return;
                }
                var imageCandidates = value
                    .substr(1, value.length - 2)
                    .split(',')
                    .map(function (s) {
                    // The attribute value arrives here with all whitespace, except
                    // normal spaces, represented by escape sequences
                    var _a = s
                        .replace(escapedSpaceCharacters, ' ')
                        .trim()
                        .split(' ', 2), url = _a[0], descriptor = _a[1];
                    return {
                        require: utils_1.urlToRequire(url, transformAssetUrlsOptions),
                        descriptor: descriptor
                    };
                });
                // "require(url1)"
                // "require(url1) 1x"
                // "require(url1), require(url2)"
                // "require(url1), require(url2) 2x"
                // "require(url1) 1x, require(url2)"
                // "require(url1) 1x, require(url2) 2x"
                var code = imageCandidates
                    .map(function (_a) {
                    var require = _a.require, descriptor = _a.descriptor;
                    return require + " + \"" + (descriptor ? ' ' + descriptor : '') + ", \" + ";
                })
                    .join('')
                    .slice(0, -6)
                    .concat('"')
                    .replace(/ \+ ""$/, '');
                attr.value = code;
            }
        });
    }
}
