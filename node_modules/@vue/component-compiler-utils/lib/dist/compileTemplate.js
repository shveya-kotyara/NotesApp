"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.compileTemplate = void 0;
var assetUrl_1 = require("./templateCompilerModules/assetUrl");
var srcset_1 = require("./templateCompilerModules/srcset");
var consolidate = require('consolidate');
var transpile = require('vue-template-es2015-compiler');
function compileTemplate(options) {
    var preprocessLang = options.preprocessLang;
    var preprocessor = preprocessLang && consolidate[preprocessLang];
    if (preprocessor) {
        return actuallyCompile(Object.assign({}, options, {
            source: preprocess(options, preprocessor)
        }));
    }
    else if (preprocessLang) {
        return {
            ast: {},
            code: "var render = function () {}\n" + "var staticRenderFns = []\n",
            source: options.source,
            tips: [
                "Component " + options.filename + " uses lang " + preprocessLang + " for template. Please install the language preprocessor."
            ],
            errors: [
                "Component " + options.filename + " uses lang " + preprocessLang + " for template, however it is not installed."
            ]
        };
    }
    else {
        return actuallyCompile(options);
    }
}
exports.compileTemplate = compileTemplate;
function preprocess(options, preprocessor) {
    var source = options.source, filename = options.filename, preprocessOptions = options.preprocessOptions;
    var finalPreprocessOptions = Object.assign({
        filename: filename
    }, preprocessOptions);
    // Consolidate exposes a callback based API, but the callback is in fact
    // called synchronously for most templating engines. In our case, we have to
    // expose a synchronous API so that it is usable in Jest transforms (which
    // have to be sync because they are applied via Node.js require hooks)
    var res, err;
    preprocessor.render(source, finalPreprocessOptions, function (_err, _res) {
        if (_err)
            err = _err;
        res = _res;
    });
    if (err)
        throw err;
    return res;
}
function actuallyCompile(options) {
    var source = options.source, compiler = options.compiler, _a = options.compilerOptions, compilerOptions = _a === void 0 ? {} : _a, _b = options.transpileOptions, transpileOptions = _b === void 0 ? {} : _b, transformAssetUrls = options.transformAssetUrls, transformAssetUrlsOptions = options.transformAssetUrlsOptions, _c = options.isProduction, isProduction = _c === void 0 ? process.env.NODE_ENV === 'production' : _c, _d = options.isFunctional, isFunctional = _d === void 0 ? false : _d, _e = options.optimizeSSR, optimizeSSR = _e === void 0 ? false : _e, _f = options.prettify, prettify = _f === void 0 ? true : _f;
    var compile = optimizeSSR && compiler.ssrCompile ? compiler.ssrCompile : compiler.compile;
    var finalCompilerOptions = compilerOptions;
    if (transformAssetUrls) {
        var builtInModules = [
            transformAssetUrls === true
                ? assetUrl_1["default"](undefined, transformAssetUrlsOptions)
                : assetUrl_1["default"](transformAssetUrls, transformAssetUrlsOptions),
            srcset_1["default"](transformAssetUrlsOptions)
        ];
        finalCompilerOptions = Object.assign({}, compilerOptions, {
            modules: __spreadArrays(builtInModules, (compilerOptions.modules || [])),
            filename: options.filename
        });
    }
    var _g = compile(source, finalCompilerOptions), ast = _g.ast, render = _g.render, staticRenderFns = _g.staticRenderFns, tips = _g.tips, errors = _g.errors;
    if (errors && errors.length) {
        return {
            ast: ast,
            code: "var render = function () {}\n" + "var staticRenderFns = []\n",
            source: source,
            tips: tips,
            errors: errors
        };
    }
    else {
        var finalTranspileOptions = Object.assign({}, transpileOptions, {
            transforms: Object.assign({}, transpileOptions.transforms, {
                stripWithFunctional: isFunctional
            })
        });
        var toFunction = function (code) {
            return "function (" + (isFunctional ? "_h,_vm" : "") + ") {" + code + "}";
        };
        // transpile code with vue-template-es2015-compiler, which is a forked
        // version of Buble that applies ES2015 transforms + stripping `with` usage
        var code = transpile("var __render__ = " + toFunction(render) + "\n" +
            ("var __staticRenderFns__ = [" + staticRenderFns.map(toFunction) + "]"), finalTranspileOptions) + "\n";
        // #23 we use __render__ to avoid `render` not being prefixed by the
        // transpiler when stripping with, but revert it back to `render` to
        // maintain backwards compat
        code = code.replace(/\s__(render|staticRenderFns)__\s/g, ' $1 ');
        if (!isProduction) {
            // mark with stripped (this enables Vue to use correct runtime proxy
            // detection)
            code += "render._withStripped = true";
            if (prettify) {
                try {
                    code = require('prettier').format(code, {
                        semi: false,
                        parser: 'babel'
                    });
                }
                catch (e) {
                    if (e.code === 'MODULE_NOT_FOUND') {
                        tips.push('The `prettify` option is on, but the dependency `prettier` is not found.\n' +
                            'Please either turn off `prettify` or manually install `prettier`.');
                    }
                    tips.push("Failed to prettify component " + options.filename + " template source after compilation.");
                }
            }
        }
        return {
            ast: ast,
            code: code,
            source: source,
            tips: tips,
            errors: errors
        };
    }
}
