"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.doCompileStyle = exports.compileStyleAsync = exports.compileStyle = void 0;
var postcss = require('postcss');
var trim_1 = require("./stylePlugins/trim");
var scoped_1 = require("./stylePlugins/scoped");
var styleProcessors_1 = require("./styleProcessors");
function compileStyle(options) {
    return doCompileStyle(__assign(__assign({}, options), { isAsync: false }));
}
exports.compileStyle = compileStyle;
function compileStyleAsync(options) {
    return Promise.resolve(doCompileStyle(__assign(__assign({}, options), { isAsync: true })));
}
exports.compileStyleAsync = compileStyleAsync;
function doCompileStyle(options) {
    var filename = options.filename, id = options.id, _a = options.scoped, scoped = _a === void 0 ? true : _a, _b = options.trim, trim = _b === void 0 ? true : _b, preprocessLang = options.preprocessLang, postcssOptions = options.postcssOptions, postcssPlugins = options.postcssPlugins;
    var preprocessor = preprocessLang && styleProcessors_1.processors[preprocessLang];
    var preProcessedSource = preprocessor && preprocess(options, preprocessor);
    var map = preProcessedSource ? preProcessedSource.map : options.map;
    var source = preProcessedSource ? preProcessedSource.code : options.source;
    var plugins = (postcssPlugins || []).slice();
    if (trim) {
        plugins.push(trim_1["default"]());
    }
    if (scoped) {
        plugins.push(scoped_1["default"](id));
    }
    var postCSSOptions = __assign(__assign({}, postcssOptions), { to: filename, from: filename });
    if (map) {
        postCSSOptions.map = {
            inline: false,
            annotation: false,
            prev: map
        };
    }
    var result, code, outMap;
    var errors = [];
    if (preProcessedSource && preProcessedSource.errors.length) {
        errors.push.apply(errors, preProcessedSource.errors);
    }
    try {
        result = postcss(plugins).process(source, postCSSOptions);
        // In async mode, return a promise.
        if (options.isAsync) {
            return result
                .then(function (result) { return ({
                code: result.css || '',
                map: result.map && result.map.toJSON(),
                errors: errors,
                rawResult: result
            }); })["catch"](function (error) { return ({
                code: '',
                map: undefined,
                errors: __spreadArrays(errors, [error.message]),
                rawResult: undefined
            }); });
        }
        // force synchronous transform (we know we only have sync plugins)
        code = result.css;
        outMap = result.map;
    }
    catch (e) {
        errors.push(e);
    }
    return {
        code: code || "",
        map: outMap && outMap.toJSON(),
        errors: errors,
        rawResult: result
    };
}
exports.doCompileStyle = doCompileStyle;
function preprocess(options, preprocessor) {
    return preprocessor.render(options.source, options.map, Object.assign({
        filename: options.filename
    }, options.preprocessOptions));
}
