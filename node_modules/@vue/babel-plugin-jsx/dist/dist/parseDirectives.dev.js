"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var __createBinding = void 0 && (void 0).__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = void 0 && (void 0).__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = void 0 && (void 0).__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var t = __importStar(require("@babel/types"));

var utils_1 = require("./utils");
/**
 * Get JSX element type
 *
 * @param path Path<JSXOpeningElement>
 */


var getType = function getType(path) {
  var typePath = path.get('attributes').find(function (attribute) {
    if (!t.isJSXAttribute(attribute)) {
      return false;
    }

    return t.isJSXIdentifier(attribute.get('name')) && attribute.get('name').node.name === 'type';
  });
  return typePath ? typePath.get('value').node : null;
};

var parseModifiers = function parseModifiers(value) {
  var modifiers = [];

  if (t.isArrayExpression(value)) {
    modifiers = value.elements.map(function (el) {
      return t.isStringLiteral(el) ? el.value : '';
    }).filter(Boolean);
  }

  return modifiers;
};

var parseDirectives = function parseDirectives(args) {
  var _a;

  var name = args.name,
      path = args.path,
      value = args.value,
      state = args.state,
      tag = args.tag,
      isComponent = args.isComponent;
  var modifiers = name.split('_');
  var arg;
  var val;
  var directiveName = ((_a = modifiers.shift()) === null || _a === void 0 ? void 0 : _a.replace(/^v/, '').replace(/^-/, '').replace(/^\S/, function (s) {
    return s.toLowerCase();
  })) || '';

  if (directiveName === 'model' && !t.isJSXExpressionContainer(path.get('value'))) {
    throw new Error('You have to use JSX Expression inside your v-model');
  }

  var shouldResolve = !['html', 'text', 'model'].includes(directiveName) || directiveName === 'model' && !isComponent;

  if (t.isArrayExpression(value)) {
    var elements = value.elements;

    var _elements = _slicedToArray(elements, 3),
        first = _elements[0],
        second = _elements[1],
        third = _elements[2];

    if (t.isStringLiteral(second)) {
      arg = second;
      modifiers = parseModifiers(third);
    } else if (second) {
      modifiers = parseModifiers(second);
    }

    val = first;
  }

  var modifiersSet = new Set(modifiers);
  return {
    directiveName: directiveName,
    modifiers: modifiersSet,
    value: val || value,
    arg: arg,
    directive: shouldResolve ? [resolveDirective(path, state, tag, directiveName), val || value, !!modifiersSet.size && t.unaryExpression('void', t.numericLiteral(0), true), !!modifiersSet.size && t.objectExpression(_toConsumableArray(modifiersSet).map(function (modifier) {
      return t.objectProperty(t.identifier(modifier), t.booleanLiteral(true));
    }))].filter(Boolean) : undefined
  };
};

var resolveDirective = function resolveDirective(path, state, tag, directiveName) {
  var _a;

  if (directiveName === 'show') {
    return utils_1.createIdentifier(state, 'vShow');
  }

  if (directiveName === 'model') {
    var modelToUse;
    var type = getType(path.parentPath);

    switch (tag.value) {
      case 'select':
        modelToUse = utils_1.createIdentifier(state, 'vModelSelect');
        break;

      case 'textarea':
        modelToUse = utils_1.createIdentifier(state, 'vModelText');
        break;

      default:
        if (t.isStringLiteral(type) || !type) {
          switch ((_a = type) === null || _a === void 0 ? void 0 : _a.value) {
            case 'checkbox':
              modelToUse = utils_1.createIdentifier(state, 'vModelCheckbox');
              break;

            case 'radio':
              modelToUse = utils_1.createIdentifier(state, 'vModelRadio');
              break;

            default:
              modelToUse = utils_1.createIdentifier(state, 'vModelText');
          }
        } else {
          modelToUse = utils_1.createIdentifier(state, 'vModelDynamic');
        }

    }

    return modelToUse;
  }

  return t.callExpression(utils_1.createIdentifier(state, 'resolveDirective'), [t.stringLiteral(directiveName)]);
};

exports["default"] = parseDirectives;