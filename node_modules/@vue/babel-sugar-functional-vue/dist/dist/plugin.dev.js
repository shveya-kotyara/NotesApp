"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(a) {
  return a && "object" == _typeof(a) && "default" in a ? a["default"] : a;
}

var syntaxJsx = _interopDefault(require("@babel/plugin-syntax-jsx"));
/**
* Check if expression is in method
* @param t
* @param path
* @param parentLimitPath
* @returns boolean
*/


var isInMethod = function isInMethod(a, b, c) {
  return !!(b && b !== c) && (!!a.isObjectMethod(b) || isInMethod(a, b.parentPath, c));
},
    hasJSX = function hasJSX(a, b) {
  var c = !1;
  return b.traverse({
    JSXElement: function JSXElement(d) {
      isInMethod(a, d, b) || (c = !0);
    }
  }), c;
},
    isFunctionalComponentDeclarator = function isFunctionalComponentDeclarator(a, b) {
  var c = b.get("id.name").node[0];
  return !("A" > c || "Z" < c) && hasJSX(a, b);
},
    convertFunctionalComponent = function convertFunctionalComponent(a, b) {
  var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var d = [a.identifier("h")].concat(_toConsumableArray(b.node.params)),
      e = b.node.body,
      f = [a.objectProperty(a.identifier("functional"), a.booleanLiteral(!0)), a.objectProperty(a.identifier("render"), a.arrowFunctionExpression(d, e))];
  "development" === process.env.NODE_ENV && c && f.unshift(a.objectProperty(a.identifier("name"), a.stringLiteral(c))), b.replaceWith(a.objectExpression(f));
};
/**
* Check path has JSX
* @param t
* @param path
* @returns boolean
*/


var index = function index(a) {
  var b = a.types;
  return {
    inherits: syntaxJsx,
    visitor: {
      Program: function Program(a) {
        a.traverse({
          ExportDefaultDeclaration: {
            exit: function exit(a) {
              b.isArrowFunctionExpression(a.node.declaration) && hasJSX(b, a) && convertFunctionalComponent(b, a.get("declaration"));
            }
          },
          VariableDeclaration: {
            exit: function exit(a) {
              if (1 === a.node.declarations.length && b.isVariableDeclarator(a.node.declarations[0]) && b.isArrowFunctionExpression(a.node.declarations[0].init)) {
                var c = a.get("declarations")[0];

                if (isFunctionalComponentDeclarator(b, c)) {
                  var _c = a.node.declarations[0].id.name;
                  convertFunctionalComponent(b, a.get("declarations")[0].get("init"), _c);
                }
              }
            }
          }
        });
      }
    }
  };
};

module.exports = index;