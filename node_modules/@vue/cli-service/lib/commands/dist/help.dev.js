"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _require = require('@vue/cli-shared-utils'),
    chalk = _require.chalk;

var getPadLength = require('../util/getPadLength');

module.exports = function (api, options) {
  api.registerCommand('help', function (args) {
    var commandName = args._[0];

    if (!commandName) {
      logMainHelp();
    } else {
      logHelpForCommand(commandName, api.service.commands[commandName]);
    }
  });

  function logMainHelp() {
    console.log("\n  Usage: vue-cli-service <command> [options]\n" + "\n  Commands:\n");
    var commands = api.service.commands;
    var padLength = getPadLength(commands);

    for (var name in commands) {
      if (name !== 'help') {
        var opts = commands[name].opts || {};
        console.log("    ".concat(chalk.blue(name.padEnd(padLength))).concat(opts.description || ''));
      }
    }

    console.log("\n  run ".concat(chalk.green("vue-cli-service help [command]"), " for usage of a specific command.\n"));
  }

  function logHelpForCommand(name, command) {
    if (!command) {
      console.log(chalk.red("\n  command \"".concat(name, "\" does not exist.")));
    } else {
      var opts = command.opts || {};

      if (opts.usage) {
        console.log("\n  Usage: ".concat(opts.usage));
      }

      if (opts.options) {
        console.log("\n  Options:\n");
        var padLength = getPadLength(opts.options);

        for (var _i = 0, _Object$entries = Object.entries(opts.options); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              flags = _Object$entries$_i[0],
              description = _Object$entries$_i[1];

          console.log("    ".concat(chalk.blue(flags.padEnd(padLength))).concat(description));
        }
      }

      if (opts.details) {
        console.log();
        console.log(opts.details.split('\n').map(function (line) {
          return "  ".concat(line);
        }).join('\n'));
      }

      console.log();
    }
  }
};