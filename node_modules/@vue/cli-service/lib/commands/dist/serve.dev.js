"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require('@vue/cli-shared-utils'),
    info = _require.info,
    error = _require.error,
    hasProjectYarn = _require.hasProjectYarn,
    hasProjectPnpm = _require.hasProjectPnpm,
    openBrowser = _require.openBrowser,
    IpcMessenger = _require.IpcMessenger;

var defaults = {
  host: '0.0.0.0',
  port: 8080,
  https: false
};

module.exports = function (api, options) {
  api.registerCommand('serve', {
    description: 'start development server',
    usage: 'vue-cli-service serve [options] [entry]',
    options: {
      '--open': "open browser on server start",
      '--copy': "copy url to clipboard on server start",
      '--stdin': "close when stdin ends",
      '--mode': "specify env mode (default: development)",
      '--host': "specify host (default: ".concat(defaults.host, ")"),
      '--port': "specify port (default: ".concat(defaults.port, ")"),
      '--https': "use https (default: ".concat(defaults.https, ")"),
      '--public': "specify the public network URL for the HMR client",
      '--skip-plugins': "comma-separated list of plugin names to skip for this run"
    }
  }, function serve(args) {
    var isInContainer, isProduction, url, _require2, chalk, webpack, WebpackDevServer, portfinder, prepareURLs, prepareProxy, launchEditorMiddleware, validateWebpackConfig, isAbsoluteUrl, webpackConfig, projectDevServerOptions, DashboardPlugin, entry, useHttps, protocol, host, port, rawPublicUrl, publicUrl, urls, localUrlForBrowser, proxySettings, sockPath, sockjsUrl, devClients, compiler, server;

    return regeneratorRuntime.async(function serve$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            info('Starting development server...'); // although this is primarily a dev server, it is possible that we
            // are running it in a mode with a production env, e.g. in E2E tests.

            isInContainer = checkInContainer();
            isProduction = process.env.NODE_ENV === 'production';
            url = require('url');
            _require2 = require('@vue/cli-shared-utils'), chalk = _require2.chalk;
            webpack = require('webpack');
            WebpackDevServer = require('webpack-dev-server');
            portfinder = require('portfinder');
            prepareURLs = require('../util/prepareURLs');
            prepareProxy = require('../util/prepareProxy');
            launchEditorMiddleware = require('launch-editor-middleware');
            validateWebpackConfig = require('../util/validateWebpackConfig');
            isAbsoluteUrl = require('../util/isAbsoluteUrl'); // configs that only matters for dev server

            api.chainWebpack(function (webpackConfig) {
              if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
                webpackConfig.devtool('eval-cheap-module-source-map');
                webpackConfig.plugin('hmr').use(require('webpack/lib/HotModuleReplacementPlugin')); // https://github.com/webpack/webpack/issues/6642
                // https://github.com/vuejs/vue-cli/issues/3539

                webpackConfig.output.globalObject("(typeof self !== 'undefined' ? self : this)");

                if (!process.env.VUE_CLI_TEST && options.devServer.progress !== false) {
                  webpackConfig.plugin('progress').use(require('webpack/lib/ProgressPlugin'));
                }
              }
            }); // resolve webpack config

            webpackConfig = api.resolveWebpackConfig(); // check for common config errors

            validateWebpackConfig(webpackConfig, api, options); // load user devServer options with higher priority than devServer
            // in webpack config

            projectDevServerOptions = Object.assign(webpackConfig.devServer || {}, options.devServer); // expose advanced stats

            if (args.dashboard) {
              DashboardPlugin = require('../webpack/DashboardPlugin');
              (webpackConfig.plugins = webpackConfig.plugins || []).push(new DashboardPlugin({
                type: 'serve'
              }));
            } // entry arg


            entry = args._[0];

            if (entry) {
              webpackConfig.entry = {
                app: api.resolve(entry)
              };
            } // resolve server options


            useHttps = args.https || projectDevServerOptions.https || defaults.https;
            protocol = useHttps ? 'https' : 'http';
            host = args.host || process.env.HOST || projectDevServerOptions.host || defaults.host;
            portfinder.basePort = args.port || process.env.PORT || projectDevServerOptions.port || defaults.port;
            _context.next = 26;
            return regeneratorRuntime.awrap(portfinder.getPortPromise());

          case 26:
            port = _context.sent;
            rawPublicUrl = args["public"] || projectDevServerOptions["public"];
            publicUrl = rawPublicUrl ? /^[a-zA-Z]+:\/\//.test(rawPublicUrl) ? rawPublicUrl : "".concat(protocol, "://").concat(rawPublicUrl) : null;
            urls = prepareURLs(protocol, host, port, isAbsoluteUrl(options.publicPath) ? '/' : options.publicPath);
            localUrlForBrowser = publicUrl || urls.localUrlForBrowser;
            proxySettings = prepareProxy(projectDevServerOptions.proxy, api.resolve('public')); // inject dev & hot-reload middleware entries

            if (!isProduction) {
              sockPath = projectDevServerOptions.sockPath || '/sockjs-node';
              sockjsUrl = publicUrl // explicitly configured via devServer.public
              ? "?".concat(publicUrl, "&sockPath=").concat(sockPath) : isInContainer // can't infer public network url if inside a container...
              // use client-side inference (note this would break with non-root publicPath)
              ? "" // otherwise infer the url
              : "?" + url.format({
                protocol: protocol,
                port: port,
                hostname: urls.lanUrlForConfig || 'localhost'
              }) + "&sockPath=".concat(sockPath);
              devClients = [// dev server client
              require.resolve("webpack-dev-server/client") + sockjsUrl, // hmr client
              require.resolve(projectDevServerOptions.hotOnly ? 'webpack/hot/only-dev-server' : 'webpack/hot/dev-server') // TODO custom overlay client
              // `@vue/cli-overlay/dist/client`
              ];

              if (process.env.APPVEYOR) {
                devClients.push("webpack/hot/poll?500");
              } // inject dev/hot client


              addDevClientToEntry(webpackConfig, devClients);
            } // create compiler


            compiler = webpack(webpackConfig); // handle compiler error

            compiler.hooks.failed.tap('vue-cli-service serve', function (msg) {
              error(msg);
              process.exit(1);
            }); // create server

            server = new WebpackDevServer(compiler, Object.assign({
              logLevel: 'silent',
              clientLogLevel: 'silent',
              historyApiFallback: {
                disableDotRule: true,
                rewrites: genHistoryApiFallbackRewrites(options.publicPath, options.pages)
              },
              contentBase: api.resolve('public'),
              watchContentBase: !isProduction,
              hot: !isProduction,
              injectClient: false,
              compress: isProduction,
              publicPath: options.publicPath,
              overlay: isProduction // TODO disable this
              ? false : {
                warnings: false,
                errors: true
              }
            }, projectDevServerOptions, {
              https: useHttps,
              proxy: proxySettings,
              // eslint-disable-next-line no-shadow
              before: function before(app, server) {
                // launch editor support.
                // this works with vue-devtools & @vue/cli-overlay
                app.use('/__open-in-editor', launchEditorMiddleware(function () {
                  return console.log("To specify an editor, specify the EDITOR env variable or " + "add \"editor\" field to your Vue project config.\n");
                })); // allow other plugins to register middlewares, e.g. PWA

                api.service.devServerConfigFns.forEach(function (fn) {
                  return fn(app, server);
                }); // apply in project middlewares

                projectDevServerOptions.before && projectDevServerOptions.before(app, server);
              },
              // avoid opening browser
              open: false
            }));
            ['SIGINT', 'SIGTERM'].forEach(function (signal) {
              process.on(signal, function () {
                server.close(function () {
                  process.exit(0);
                });
              });
            });

            if (args.stdin) {
              process.stdin.on('end', function () {
                server.close(function () {
                  process.exit(0);
                });
              });
              process.stdin.resume();
            } // on appveyor, killing the process with SIGTERM causes execa to
            // throw error


            if (process.env.VUE_CLI_TEST) {
              process.stdin.on('data', function (data) {
                if (data.toString() === 'close') {
                  console.log('got close signal!');
                  server.close(function () {
                    process.exit(0);
                  });
                }
              });
            }

            return _context.abrupt("return", new Promise(function (resolve, reject) {
              // log instructions & open browser on first compilation complete
              var isFirstCompile = true;
              compiler.hooks.done.tap('vue-cli-service serve', function (stats) {
                if (stats.hasErrors()) {
                  return;
                }

                var copied = '';

                if (isFirstCompile && args.copy) {
                  try {
                    require('clipboardy').writeSync(localUrlForBrowser);

                    copied = chalk.dim('(copied to clipboard)');
                  } catch (_) {
                    /* catch exception if copy to clipboard isn't supported (e.g. WSL), see issue #3476 */
                  }
                }

                var networkUrl = publicUrl ? publicUrl.replace(/([^/])$/, '$1/') : urls.lanUrlForTerminal;
                console.log();
                console.log("  App running at:");
                console.log("  - Local:   ".concat(chalk.cyan(urls.localUrlForTerminal), " ").concat(copied));

                if (!isInContainer) {
                  console.log("  - Network: ".concat(chalk.cyan(networkUrl)));
                } else {
                  console.log();
                  console.log(chalk.yellow("  It seems you are running Vue CLI inside a container."));

                  if (!publicUrl && options.publicPath && options.publicPath !== '/') {
                    console.log();
                    console.log(chalk.yellow("  Since you are using a non-root publicPath, the hot-reload socket"));
                    console.log(chalk.yellow("  will not be able to infer the correct URL to connect. You should"));
                    console.log(chalk.yellow("  explicitly specify the URL via ".concat(chalk.blue("devServer.public"), ".")));
                    console.log();
                  }

                  console.log(chalk.yellow("  Access the dev server via ".concat(chalk.cyan("".concat(protocol, "://localhost:<your container's external mapped port>").concat(options.publicPath)))));
                }

                console.log();

                if (isFirstCompile) {
                  isFirstCompile = false;

                  if (!isProduction) {
                    var buildCommand = hasProjectYarn(api.getCwd()) ? "yarn build" : hasProjectPnpm(api.getCwd()) ? "pnpm run build" : "npm run build";
                    console.log("  Note that the development build is not optimized.");
                    console.log("  To create a production build, run ".concat(chalk.cyan(buildCommand), "."));
                  } else {
                    console.log("  App is served in production mode.");
                    console.log("  Note this is for preview or E2E testing only.");
                  }

                  console.log();

                  if (args.open || projectDevServerOptions.open) {
                    var pageUri = projectDevServerOptions.openPage && typeof projectDevServerOptions.openPage === 'string' ? projectDevServerOptions.openPage : '';
                    openBrowser(localUrlForBrowser + pageUri);
                  } // Send final app URL


                  if (args.dashboard) {
                    var ipc = new IpcMessenger();
                    ipc.send({
                      vueServe: {
                        url: localUrlForBrowser
                      }
                    });
                  } // resolve returned Promise
                  // so other commands can do api.service.run('serve').then(...)


                  resolve({
                    server: server,
                    url: localUrlForBrowser
                  });
                } else if (process.env.VUE_CLI_TEST) {
                  // signal for test to check HMR
                  console.log('App updated');
                }
              });
              server.listen(port, host, function (err) {
                if (err) {
                  reject(err);
                }
              });
            }));

          case 40:
          case "end":
            return _context.stop();
        }
      }
    });
  });
};

function addDevClientToEntry(config, devClient) {
  var entry = config.entry;

  if (_typeof(entry) === 'object' && !Array.isArray(entry)) {
    Object.keys(entry).forEach(function (key) {
      entry[key] = devClient.concat(entry[key]);
    });
  } else if (typeof entry === 'function') {
    config.entry = entry(devClient);
  } else {
    config.entry = devClient.concat(entry);
  }
} // https://stackoverflow.com/a/20012536


function checkInContainer() {
  if ('CODESANDBOX_SSE' in process.env) {
    return true;
  }

  var fs = require('fs');

  if (fs.existsSync("/proc/1/cgroup")) {
    var content = fs.readFileSync("/proc/1/cgroup", 'utf-8');
    return /:\/(lxc|docker|kubepods(\.slice)?)\//.test(content);
  }
}

function genHistoryApiFallbackRewrites(baseUrl) {
  var pages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var path = require('path');

  var multiPageRewrites = Object.keys(pages) // sort by length in reversed order to avoid overrides
  // eg. 'page11' should appear in front of 'page1'
  .sort(function (a, b) {
    return b.length - a.length;
  }).map(function (name) {
    return {
      from: new RegExp("^/".concat(name)),
      to: path.posix.join(baseUrl, pages[name].filename || "".concat(name, ".html"))
    };
  });
  return [].concat(_toConsumableArray(multiPageRewrites), [{
    from: /./,
    to: path.posix.join(baseUrl, 'index.html')
  }]);
}

module.exports.defaultModes = {
  serve: 'development'
};