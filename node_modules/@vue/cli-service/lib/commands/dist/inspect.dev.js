"use strict";

module.exports = function (api, options) {
  api.registerCommand('inspect', {
    description: 'inspect internal webpack config',
    usage: 'vue-cli-service inspect [options] [...paths]',
    options: {
      '--mode': 'specify env mode (default: development)',
      '--rule <ruleName>': 'inspect a specific module rule',
      '--plugin <pluginName>': 'inspect a specific plugin',
      '--rules': 'list all module rule names',
      '--plugins': 'list all plugin names',
      '--verbose': 'show full function definitions in output',
      '--skip-plugins': 'comma-separated list of plugin names to skip for this run'
    }
  }, function (args) {
    var _require = require('@vue/cli-shared-utils'),
        chalk = _require.chalk,
        get = _require.get;

    var _require2 = require('webpack-chain'),
        toString = _require2.toString;

    var _require3 = require('cli-highlight'),
        highlight = _require3.highlight;

    var config = api.resolveWebpackConfig();
    var paths = args._,
        verbose = args.verbose;
    var res;
    var hasUnnamedRule;

    if (args.rule) {
      res = config.module.rules.find(function (r) {
        return r.__ruleNames[0] === args.rule;
      });
    } else if (args.plugin) {
      res = config.plugins.find(function (p) {
        return p.__pluginName === args.plugin;
      });
    } else if (args.rules) {
      res = config.module.rules.map(function (r) {
        var name = r.__ruleNames ? r.__ruleNames[0] : 'Nameless Rule (*)';
        hasUnnamedRule = hasUnnamedRule || !r.__ruleNames;
        return name;
      });
    } else if (args.plugins) {
      res = config.plugins.map(function (p) {
        return p.__pluginName || p.constructor.name;
      });
    } else if (paths.length > 1) {
      res = {};
      paths.forEach(function (path) {
        res[path] = get(config, path);
      });
    } else if (paths.length === 1) {
      res = get(config, paths[0]);
    } else {
      res = config;
    }

    var output = toString(res, {
      verbose: verbose
    });
    console.log(highlight(output, {
      language: 'js'
    })); // Log explanation for Nameless Rules

    if (hasUnnamedRule) {
      console.log("--- ".concat(chalk.green('Footnotes'), " ---"));
      console.log("*: ".concat(chalk.green('Nameless Rules'), " were added through the ").concat(chalk.green('configureWebpack()'), " API (possibly by a plugin) instead of ").concat(chalk.green('chainWebpack()'), " (recommended).\n    You can run ").concat(chalk.green('vue-cli-service inspect'), " without any arguments to inspect the full config and read these rules' config."));
    }
  });
};

module.exports.defaultModes = {
  inspect: 'development'
};