"use strict";

var fs = require('fs');

var path = require('path');

var camelizeRE = /-(\w)/g;

var camelize = function camelize(str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
};

var hyphenateRE = /\B([A-Z])/g;

var hyphenate = function hyphenate(str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
};
/**
 * Creates the script to add the component to the custom elements
 * @param {string} prefix The prefix for the component library
 * @param {string} component The component name for single entry builds, component file for multi-entry builds
 * @param {string} file The file for the component
 * @param {boolean} isAsync Whether to load component async or not
 */


var createElement = function createElement(prefix, component, file, isAsync) {
  var _exports$fileToCompon = exports.fileToComponentName(prefix, component),
      camelName = _exports$fileToCompon.camelName,
      kebabName = _exports$fileToCompon.kebabName;

  return isAsync ? "window.customElements.define('".concat(kebabName, "', wrap(Vue, () => import('~root/").concat(file, "?shadow')))\n") : "import ".concat(camelName, " from '~root/").concat(file, "?shadow'\n") + "window.customElements.define('".concat(kebabName, "', wrap(Vue, ").concat(camelName, "))\n");
};

exports.fileToComponentName = function (prefix, file) {
  var basename = path.basename(file).replace(/\.(jsx?|vue)$/, '');
  var camelName = camelize(basename);
  var kebabName = "".concat(prefix ? "".concat(prefix, "-") : "").concat(hyphenate(basename));
  return {
    basename: basename,
    camelName: camelName,
    kebabName: kebabName
  };
};

exports.resolveEntry = function (prefix, libName, files, isAsync) {
  var filePath = path.resolve(__dirname, 'entry-wc.js');
  var elements = prefix === '' ? [createElement('', libName, files[0])] : files.map(function (file) {
    return createElement(prefix, file, file, isAsync);
  }).join('\n');
  var content = "\nimport './setPublicPath'\nimport Vue from 'vue'\nimport wrap from '@vue/web-component-wrapper'\n\n// runtime shared by every component chunk\nimport 'css-loader/dist/runtime/api.js'\nimport 'vue-style-loader/lib/addStylesShadow'\nimport 'vue-loader/lib/runtime/componentNormalizer'\n\n".concat(elements).trim();
  fs.writeFileSync(filePath, content);
  return filePath;
};