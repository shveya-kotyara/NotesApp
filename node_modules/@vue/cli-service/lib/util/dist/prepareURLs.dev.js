"use strict";

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file at
 * https://github.com/facebookincubator/create-react-app/blob/master/LICENSE
 */
var url = require('url');

var _require = require('@vue/cli-shared-utils'),
    chalk = _require.chalk;

var address = require('address');

var defaultGateway = require('default-gateway');

module.exports = function prepareUrls(protocol, host, port) {
  var pathname = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/';

  var formatUrl = function formatUrl(hostname) {
    return url.format({
      protocol: protocol,
      hostname: hostname,
      port: port,
      pathname: pathname
    });
  };

  var prettyPrintUrl = function prettyPrintUrl(hostname) {
    return url.format({
      protocol: protocol,
      hostname: hostname,
      port: chalk.bold(port),
      pathname: pathname
    });
  };

  var isUnspecifiedHost = host === '0.0.0.0' || host === '::';
  var prettyHost, lanUrlForConfig;
  var lanUrlForTerminal = chalk.gray('unavailable');

  if (isUnspecifiedHost) {
    prettyHost = 'localhost';

    try {
      // This can only return an IPv4 address
      var result = defaultGateway.v4.sync();
      lanUrlForConfig = address.ip(result && result["interface"]);

      if (lanUrlForConfig) {
        // Check if the address is a private ip
        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces
        if (/^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(lanUrlForConfig)) {
          // Address is private, format it for later use
          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);
        } else {
          // Address is not private, so we will discard it
          lanUrlForConfig = undefined;
        }
      }
    } catch (_e) {// ignored
    }
  } else {
    prettyHost = host;
    lanUrlForConfig = host;
    lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig);
  }

  var localUrlForTerminal = prettyPrintUrl(prettyHost);
  var localUrlForBrowser = formatUrl(prettyHost);
  return {
    lanUrlForConfig: lanUrlForConfig,
    lanUrlForTerminal: lanUrlForTerminal,
    localUrlForTerminal: localUrlForTerminal,
    localUrlForBrowser: localUrlForBrowser
  };
};