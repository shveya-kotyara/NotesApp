"use strict";

var _require = require('@vue/cli-shared-utils'),
    chalk = _require.chalk;

var rules = [{
  type: 'cant-resolve-loader',
  re: /Can't resolve '(.*loader)'/,
  msg: function msg(e, match) {
    return "Failed to resolve loader: ".concat(chalk.yellow(match[1]), "\n") + "You may need to install it.";
  }
}];

exports.transformer = function (error) {
  if (error.webpackError) {
    var message = typeof error.webpackError === 'string' ? error.webpackError : error.webpackError.message || '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _step.value,
            re = _step$value.re,
            msg = _step$value.msg,
            type = _step$value.type;
        var match = message.match(re);

        if (match) {
          return Object.assign({}, error, {
            // type is necessary to avoid being printed as default error
            // by friendly-error-webpack-plugin
            type: type,
            shortMessage: msg(error, match)
          });
        }
      } // no match, unknown webpack error without a message.
      // friendly-error-webpack-plugin fails to handle this.

    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!error.message) {
      return Object.assign({}, error, {
        type: 'unknown-webpack-error',
        shortMessage: message
      });
    }
  }

  return error;
};

exports.formatter = function (errors) {
  errors = errors.filter(function (e) {
    return e.shortMessage;
  });

  if (errors.length) {
    return errors.map(function (e) {
      return e.shortMessage;
    });
  }
};