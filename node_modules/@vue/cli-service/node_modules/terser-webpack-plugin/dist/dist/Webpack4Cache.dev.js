"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _os = _interopRequireDefault(require("os"));

var _cacache = _interopRequireDefault(require("cacache"));

var _findCacheDir = _interopRequireDefault(require("find-cache-dir"));

var _serializeJavascript = _interopRequireDefault(require("serialize-javascript"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var Webpack4Cache =
/*#__PURE__*/
function () {
  function Webpack4Cache(compiler, compilation, options) {
    _classCallCheck(this, Webpack4Cache);

    this.options = options;
    this.cacheDir = options.cache === true ? Webpack4Cache.getCacheDirectory() : options.cache;
  }

  _createClass(Webpack4Cache, [{
    key: "isEnabled",
    value: function isEnabled() {
      return !!this.cacheDir;
    }
  }, {
    key: "get",
    value: function get(task) {
      // eslint-disable-next-line no-param-reassign
      task.cacheIdent = task.cacheIdent || (0, _serializeJavascript["default"])(task.cacheKeys);
      return _cacache["default"].get(this.cacheDir, task.cacheIdent).then(function (_ref) {
        var data = _ref.data;
        return JSON.parse(data);
      });
    }
  }, {
    key: "store",
    value: function store(task, data) {
      return _cacache["default"].put(this.cacheDir, task.cacheIdent, JSON.stringify(data));
    }
  }], [{
    key: "getCacheDirectory",
    value: function getCacheDirectory() {
      return (0, _findCacheDir["default"])({
        name: 'terser-webpack-plugin'
      }) || _os["default"].tmpdir();
    }
  }]);

  return Webpack4Cache;
}();

exports["default"] = Webpack4Cache;