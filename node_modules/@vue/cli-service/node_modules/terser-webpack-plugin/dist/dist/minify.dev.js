"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('terser'),
    terserMinify = _require.minify;

var buildTerserOptions = function buildTerserOptions() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      ecma = _ref.ecma,
      warnings = _ref.warnings,
      _ref$parse = _ref.parse,
      parse = _ref$parse === void 0 ? {} : _ref$parse,
      _ref$compress = _ref.compress,
      compress = _ref$compress === void 0 ? {} : _ref$compress,
      mangle = _ref.mangle,
      module = _ref.module,
      output = _ref.output,
      toplevel = _ref.toplevel,
      nameCache = _ref.nameCache,
      ie8 = _ref.ie8,
      keep_classnames = _ref.keep_classnames,
      keep_fnames = _ref.keep_fnames,
      safari10 = _ref.safari10;

  return {
    ecma: ecma,
    warnings: warnings,
    parse: _objectSpread({}, parse),
    compress: typeof compress === 'boolean' ? compress : _objectSpread({}, compress),
    // eslint-disable-next-line no-nested-ternary
    mangle: mangle == null ? true : typeof mangle === 'boolean' ? mangle : _objectSpread({}, mangle),
    output: _objectSpread({
      beautify: false
    }, output),
    module: module,
    // Ignoring sourceMap from options
    sourceMap: null,
    toplevel: toplevel,
    nameCache: nameCache,
    ie8: ie8,
    keep_classnames: keep_classnames,
    keep_fnames: keep_fnames,
    safari10: safari10
  };
};

function isObject(value) {
  var type = _typeof(value);

  return value != null && (type === 'object' || type === 'function');
}

var buildComments = function buildComments(options, terserOptions, extractedComments) {
  var condition = {};
  var commentsOpts = terserOptions.output.comments;
  var extractComments = options.extractComments;
  condition.preserve = typeof commentsOpts !== 'undefined' ? commentsOpts : false;

  if (typeof extractComments === 'boolean' && extractComments) {
    condition.extract = 'some';
  } else if (typeof extractComments === 'string' || extractComments instanceof RegExp) {
    condition.extract = extractComments;
  } else if (typeof extractComments === 'function') {
    condition.extract = extractComments;
  } else if (isObject(extractComments)) {
    condition.extract = typeof extractComments.condition === 'boolean' && extractComments.condition ? 'some' : typeof extractComments.condition !== 'undefined' ? extractComments.condition : 'some';
  } else {
    // No extract
    // Preserve using "commentsOpts" or "some"
    condition.preserve = typeof commentsOpts !== 'undefined' ? commentsOpts : 'some';
    condition.extract = false;
  } // Ensure that both conditions are functions


  ['preserve', 'extract'].forEach(function (key) {
    var regexStr;
    var regex;

    switch (_typeof(condition[key])) {
      case 'boolean':
        condition[key] = condition[key] ? function () {
          return true;
        } : function () {
          return false;
        };
        break;

      case 'function':
        break;

      case 'string':
        if (condition[key] === 'all') {
          condition[key] = function () {
            return true;
          };

          break;
        }

        if (condition[key] === 'some') {
          condition[key] = function (astNode, comment) {
            return (comment.type === 'comment2' || comment.type === 'comment1') && /@preserve|@lic|@cc_on|^\**!/i.test(comment.value);
          };

          break;
        }

        regexStr = condition[key];

        condition[key] = function (astNode, comment) {
          return new RegExp(regexStr).test(comment.value);
        };

        break;

      default:
        regex = condition[key];

        condition[key] = function (astNode, comment) {
          return regex.test(comment.value);
        };

    }
  }); // Redefine the comments function to extract and preserve
  // comments according to the two conditions

  return function (astNode, comment) {
    if (condition.extract(astNode, comment)) {
      var commentText = comment.type === 'comment2' ? "/*".concat(comment.value, "*/") : "//".concat(comment.value); // Don't include duplicate comments

      if (!extractedComments.includes(commentText)) {
        extractedComments.push(commentText);
      }
    }

    return condition.preserve(astNode, comment);
  };
};

var minify = function minify(options) {
  var file = options.file,
      input = options.input,
      inputSourceMap = options.inputSourceMap,
      minifyFn = options.minify;

  if (minifyFn) {
    return minifyFn(_defineProperty({}, file, input), inputSourceMap);
  } // Copy terser options


  var terserOptions = buildTerserOptions(options.terserOptions); // Let terser generate a SourceMap

  if (inputSourceMap) {
    terserOptions.sourceMap = {
      asObject: true
    };
  }

  var extractedComments = [];
  terserOptions.output.comments = buildComments(options, terserOptions, extractedComments);

  var _terserMinify = terserMinify(_defineProperty({}, file, input), terserOptions),
      error = _terserMinify.error,
      map = _terserMinify.map,
      code = _terserMinify.code,
      warnings = _terserMinify.warnings;

  return {
    error: error,
    map: map,
    code: code,
    warnings: warnings,
    extractedComments: extractedComments
  };
};

module.exports = minify;