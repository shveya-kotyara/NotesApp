"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _path = _interopRequireDefault(require("path"));

var _sourceMap = require("source-map");

var _webpackSources = require("webpack-sources");

var _RequestShortener = _interopRequireDefault(require("webpack/lib/RequestShortener"));

var _webpack = require("webpack");

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _serializeJavascript = _interopRequireDefault(require("serialize-javascript"));

var _package = _interopRequireDefault(require("terser/package.json"));

var _options = _interopRequireDefault(require("./options.json"));

var _TaskRunner = _interopRequireDefault(require("./TaskRunner"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var warningRegex = /\[.+:([0-9]+),([0-9]+)\]/;

var TerserPlugin =
/*#__PURE__*/
function () {
  function TerserPlugin() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, TerserPlugin);

    (0, _schemaUtils["default"])(_options["default"], options, {
      name: 'Terser Plugin',
      baseDataPath: 'options'
    });
    var minify = options.minify,
        _options$terserOption = options.terserOptions,
        terserOptions = _options$terserOption === void 0 ? {} : _options$terserOption,
        _options$test = options.test,
        test = _options$test === void 0 ? /\.m?js(\?.*)?$/i : _options$test,
        _options$chunkFilter = options.chunkFilter,
        chunkFilter = _options$chunkFilter === void 0 ? function () {
      return true;
    } : _options$chunkFilter,
        _options$warningsFilt = options.warningsFilter,
        warningsFilter = _options$warningsFilt === void 0 ? function () {
      return true;
    } : _options$warningsFilt,
        _options$extractComme = options.extractComments,
        extractComments = _options$extractComme === void 0 ? true : _options$extractComme,
        sourceMap = options.sourceMap,
        _options$cache = options.cache,
        cache = _options$cache === void 0 ? true : _options$cache,
        _options$cacheKeys = options.cacheKeys,
        cacheKeys = _options$cacheKeys === void 0 ? function (defaultCacheKeys) {
      return defaultCacheKeys;
    } : _options$cacheKeys,
        _options$parallel = options.parallel,
        parallel = _options$parallel === void 0 ? true : _options$parallel,
        include = options.include,
        exclude = options.exclude;
    this.options = {
      test: test,
      chunkFilter: chunkFilter,
      warningsFilter: warningsFilter,
      extractComments: extractComments,
      sourceMap: sourceMap,
      cache: cache,
      cacheKeys: cacheKeys,
      parallel: parallel,
      include: include,
      exclude: exclude,
      minify: minify,
      terserOptions: terserOptions
    };
  }

  _createClass(TerserPlugin, [{
    key: "taskGenerator",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function taskGenerator(compiler, compilation, allExtractedComments, file) {
      var _this = this;

      var inputSourceMap, asset, input, _asset$sourceAndMap, source, map, commentsFilename, query, filename, querySplit, lastSlashIndex, basename, data, callback, task, _compilation$outputOp, hashSalt, hashDigest, hashDigestLength, hashFunction, hash, digest, defaultCacheKeys;

      return regeneratorRuntime.wrap(function taskGenerator$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              asset = compilation.assets[file];
              _context.prev = 1;

              if (this.options.sourceMap && asset.sourceAndMap) {
                _asset$sourceAndMap = asset.sourceAndMap(), source = _asset$sourceAndMap.source, map = _asset$sourceAndMap.map;
                input = source;

                if (TerserPlugin.isSourceMap(map)) {
                  inputSourceMap = map;
                } else {
                  inputSourceMap = map;
                  compilation.warnings.push(new Error("".concat(file, " contains invalid source map")));
                }
              } else {
                input = asset.source();
                inputSourceMap = null;
              } // Handling comment extraction


              commentsFilename = false;

              if (this.options.extractComments) {
                commentsFilename = this.options.extractComments.filename || '[file].LICENSE.txt[query]';

                if (TerserPlugin.isWebpack4()) {
                  // Todo remove this in next major release
                  if (typeof commentsFilename === 'function') {
                    commentsFilename = commentsFilename.bind(null, file);
                  }
                }

                query = '';
                filename = file;
                querySplit = filename.indexOf('?');

                if (querySplit >= 0) {
                  query = filename.substr(querySplit);
                  filename = filename.substr(0, querySplit);
                }

                lastSlashIndex = filename.lastIndexOf('/');
                basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);
                data = {
                  filename: filename,
                  basename: basename,
                  query: query
                };
                commentsFilename = compilation.getPath(commentsFilename, data);
              }

              if (commentsFilename && TerserPlugin.hasAsset(commentsFilename, compilation.assets)) {
                // Todo make error and stop uglifing in next major release
                compilation.warnings.push(new Error("The comment file \"".concat(TerserPlugin.removeQueryString(commentsFilename), "\" conflicts with an existing asset, this may lead to code corruption, please use a different name")));
              }

              callback = function callback(taskResult) {
                var code = taskResult.code;
                var error = taskResult.error,
                    map = taskResult.map,
                    warnings = taskResult.warnings;
                var extractedComments = taskResult.extractedComments;
                var sourceMap = null;

                if (error || warnings && warnings.length > 0) {
                  sourceMap = TerserPlugin.buildSourceMap(inputSourceMap);
                } // Handling results
                // Error case: add errors, and go to next file


                if (error) {
                  compilation.errors.push(TerserPlugin.buildError(error, file, sourceMap, new _RequestShortener["default"](compiler.context)));
                  return;
                }

                var hasExtractedComments = commentsFilename && extractedComments && extractedComments.length > 0;
                var hasBannerForExtractedComments = hasExtractedComments && _this.options.extractComments.banner !== false;
                var outputSource;
                var shebang;

                if (hasExtractedComments && hasBannerForExtractedComments && code.startsWith('#!')) {
                  var firstNewlinePosition = code.indexOf('\n');
                  shebang = code.substring(0, firstNewlinePosition);
                  code = code.substring(firstNewlinePosition + 1);
                }

                if (map) {
                  outputSource = new _webpackSources.SourceMapSource(code, file, map, input, inputSourceMap, true);
                } else {
                  outputSource = new _webpackSources.RawSource(code);
                } // Write extracted comments to commentsFilename


                if (hasExtractedComments) {
                  if (!allExtractedComments[commentsFilename]) {
                    // eslint-disable-next-line no-param-reassign
                    allExtractedComments[commentsFilename] = [];
                  } // eslint-disable-next-line no-param-reassign


                  allExtractedComments[commentsFilename] = allExtractedComments[commentsFilename].concat(extractedComments); // Add a banner to the original file

                  if (hasBannerForExtractedComments) {
                    var banner = _this.options.extractComments.banner || "For license information please see ".concat(_path["default"].relative(_path["default"].dirname(file), commentsFilename).replace(/\\/g, '/'));

                    if (typeof banner === 'function') {
                      banner = banner(commentsFilename);
                    }

                    if (banner) {
                      outputSource = new _webpackSources.ConcatSource(shebang ? "".concat(shebang, "\n") : '', "/*! ".concat(banner, " */\n"), outputSource);
                    }
                  }
                } // Updating assets
                // eslint-disable-next-line no-param-reassign


                compilation.assets[file] = outputSource; // Handling warnings

                if (warnings && warnings.length > 0) {
                  warnings.forEach(function (warning) {
                    var builtWarning = TerserPlugin.buildWarning(warning, file, sourceMap, new _RequestShortener["default"](compiler.context), _this.options.warningsFilter);

                    if (builtWarning) {
                      compilation.warnings.push(builtWarning);
                    }
                  });
                }
              };

              task = {
                asset: asset,
                file: file,
                input: input,
                inputSourceMap: inputSourceMap,
                commentsFilename: commentsFilename,
                extractComments: this.options.extractComments,
                terserOptions: this.options.terserOptions,
                minify: this.options.minify,
                callback: callback
              };

              if (TerserPlugin.isWebpack4()) {
                _compilation$outputOp = compilation.outputOptions, hashSalt = _compilation$outputOp.hashSalt, hashDigest = _compilation$outputOp.hashDigest, hashDigestLength = _compilation$outputOp.hashDigestLength, hashFunction = _compilation$outputOp.hashFunction;
                hash = _webpack.util.createHash(hashFunction);

                if (hashSalt) {
                  hash.update(hashSalt);
                }

                hash.update(input);
                digest = hash.digest(hashDigest);

                if (this.options.cache) {
                  defaultCacheKeys = {
                    terser: _package["default"].version,
                    // eslint-disable-next-line global-require
                    'terser-webpack-plugin': require('../package.json').version,
                    'terser-webpack-plugin-options': this.options,
                    nodeVersion: process.version,
                    filename: file,
                    contentHash: digest.substr(0, hashDigestLength)
                  };
                  task.cacheKeys = this.options.cacheKeys(defaultCacheKeys, file);
                }
              } else {
                task.cacheKeys = {
                  terser: _package["default"].version,
                  // eslint-disable-next-line global-require
                  'terser-webpack-plugin': require('../package.json').version,
                  'terser-webpack-plugin-options': this.options
                };
              }

              _context.next = 11;
              return task;

            case 11:
              _context.next = 16;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](1);
              compilation.errors.push(TerserPlugin.buildError(_context.t0, file, TerserPlugin.buildSourceMap(inputSourceMap), new _RequestShortener["default"](compiler.context)));

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, taskGenerator, this, [[1, 13]]);
    })
  }, {
    key: "apply",
    value: function apply(compiler) {
      var _this2 = this;

      var _compiler$options = compiler.options,
          devtool = _compiler$options.devtool,
          output = _compiler$options.output,
          plugins = _compiler$options.plugins;
      this.options.sourceMap = typeof this.options.sourceMap === 'undefined' ? devtool && !devtool.includes('eval') && !devtool.includes('cheap') && (devtool.includes('source-map') || // Todo remove when `webpack@5` support will be dropped
      devtool.includes('sourcemap')) || plugins && plugins.some(function (plugin) {
        return plugin instanceof _webpack.SourceMapDevToolPlugin && plugin.options && plugin.options.columns;
      }) : Boolean(this.options.sourceMap);

      if (typeof this.options.terserOptions.module === 'undefined' && typeof output.module !== 'undefined') {
        this.options.terserOptions.module = output.module;
      }

      if (typeof this.options.terserOptions.ecma === 'undefined' && typeof output.ecmaVersion !== 'undefined') {
        this.options.terserOptions.ecma = output.ecmaVersion;
      }

      var optimizeFn = function optimizeFn(compilation, chunks) {
        var matchObject, files, CacheEngine, allExtractedComments, taskGenerator, taskRunner;
        return regeneratorRuntime.async(function optimizeFn$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                matchObject = _webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined
                undefined, _this2.options);
                files = [].concat(Array.from(compilation.additionalChunkAssets || [])).concat(Array.from(chunks).filter(function (chunk) {
                  return _this2.options.chunkFilter && _this2.options.chunkFilter(chunk);
                }).reduce(function (acc, chunk) {
                  return acc.concat(Array.from(chunk.files || []));
                }, [])).filter(function (file) {
                  return matchObject(file);
                });

                if (!(files.length === 0)) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve());

              case 4:
                CacheEngine = TerserPlugin.isWebpack4() ? // eslint-disable-next-line global-require
                require('./Webpack4Cache')["default"] : // eslint-disable-next-line global-require
                require('./Webpack5Cache')["default"];
                allExtractedComments = {};
                taskGenerator = _this2.taskGenerator.bind(_this2, compiler, compilation, allExtractedComments);
                taskRunner = new _TaskRunner["default"]({
                  taskGenerator: taskGenerator,
                  files: files,
                  cache: new CacheEngine(compiler, compilation, _this2.options),
                  parallel: _this2.options.parallel
                });
                _context2.next = 10;
                return regeneratorRuntime.awrap(taskRunner.run());

              case 10:
                _context2.next = 12;
                return regeneratorRuntime.awrap(taskRunner.exit());

              case 12:
                Object.keys(allExtractedComments).forEach(function (commentsFilename) {
                  var extractedComments = new Set(_toConsumableArray(allExtractedComments[commentsFilename].sort())); // eslint-disable-next-line no-param-reassign

                  compilation.assets[commentsFilename] = new _webpackSources.RawSource("".concat(Array.from(extractedComments).join('\n\n'), "\n"));
                });
                return _context2.abrupt("return", Promise.resolve());

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        });
      };

      var plugin = {
        name: this.constructor.name
      };
      compiler.hooks.compilation.tap(plugin, function (compilation) {
        if (_this2.options.sourceMap) {
          compilation.hooks.buildModule.tap(plugin, function (moduleArg) {
            // to get detailed location info about errors
            // eslint-disable-next-line no-param-reassign
            moduleArg.useSourceMap = true;
          });
        }

        if (!TerserPlugin.isWebpack4()) {
          var hooks = _webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);

          var data = (0, _serializeJavascript["default"])({
            terser: _package["default"].version,
            terserOptions: _this2.options.terserOptions
          });
          hooks.chunkHash.tap(plugin, function (chunk, hash) {
            hash.update('TerserPlugin');
            hash.update(data);
          });
        } else {
          (function () {
            // Todo remove after drop `webpack@4` compatibility
            var mainTemplate = compilation.mainTemplate,
                chunkTemplate = compilation.chunkTemplate;
            var data = (0, _serializeJavascript["default"])({
              terser: _package["default"].version,
              terserOptions: _this2.options.terserOptions
            }); // Regenerate `contenthash` for minified assets

            for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {
              var template = _arr[_i];
              template.hooks.hashForChunk.tap(plugin, function (hash) {
                hash.update('TerserPlugin');
                hash.update(data);
              });
            }
          })();
        }

        compilation.hooks.optimizeChunkAssets.tapPromise(plugin, optimizeFn.bind(_this2, compilation));
      });
    }
  }], [{
    key: "isSourceMap",
    value: function isSourceMap(input) {
      // All required options for `new SourceMapConsumer(...options)`
      // https://github.com/mozilla/source-map#new-sourcemapconsumerrawsourcemap
      return Boolean(input && input.version && input.sources && Array.isArray(input.sources) && typeof input.mappings === 'string');
    }
  }, {
    key: "buildSourceMap",
    value: function buildSourceMap(inputSourceMap) {
      if (!inputSourceMap || !TerserPlugin.isSourceMap(inputSourceMap)) {
        return null;
      }

      return new _sourceMap.SourceMapConsumer(inputSourceMap);
    }
  }, {
    key: "buildError",
    value: function buildError(error, file, sourceMap, requestShortener) {
      // Handling error which should have line, col, filename and message
      if (error.line) {
        var original = sourceMap && sourceMap.originalPositionFor({
          line: error.line,
          column: error.col
        });

        if (original && original.source && requestShortener) {
          return new Error("".concat(file, " from Terser\n").concat(error.message, " [").concat(requestShortener.shorten(original.source), ":").concat(original.line, ",").concat(original.column, "][").concat(file, ":").concat(error.line, ",").concat(error.col, "]").concat(error.stack ? "\n".concat(error.stack.split('\n').slice(1).join('\n')) : ''));
        }

        return new Error("".concat(file, " from Terser\n").concat(error.message, " [").concat(file, ":").concat(error.line, ",").concat(error.col, "]").concat(error.stack ? "\n".concat(error.stack.split('\n').slice(1).join('\n')) : ''));
      }

      if (error.stack) {
        return new Error("".concat(file, " from Terser\n").concat(error.stack));
      }

      return new Error("".concat(file, " from Terser\n").concat(error.message));
    }
  }, {
    key: "buildWarning",
    value: function buildWarning(warning, file, sourceMap, requestShortener, warningsFilter) {
      var warningMessage = warning;
      var locationMessage = '';
      var source = null;

      if (sourceMap) {
        var match = warningRegex.exec(warning);

        if (match) {
          var line = +match[1];
          var column = +match[2];
          var original = sourceMap.originalPositionFor({
            line: line,
            column: column
          });

          if (original && original.source && original.source !== file && requestShortener) {
            source = original.source;
            warningMessage = "".concat(warningMessage.replace(warningRegex, ''));
            locationMessage = "[".concat(requestShortener.shorten(original.source), ":").concat(original.line, ",").concat(original.column, "]");
          }
        }
      } // Todo change order in next major release


      if (warningsFilter && !warningsFilter(warning, source, file)) {
        return null;
      }

      return "Terser Plugin: ".concat(warningMessage).concat(locationMessage);
    }
  }, {
    key: "removeQueryString",
    value: function removeQueryString(filename) {
      var targetFilename = filename;
      var queryStringIdx = targetFilename.indexOf('?');

      if (queryStringIdx >= 0) {
        targetFilename = targetFilename.substr(0, queryStringIdx);
      }

      return targetFilename;
    }
  }, {
    key: "hasAsset",
    value: function hasAsset(commentFilename, assets) {
      var assetFilenames = Object.keys(assets).map(function (assetFilename) {
        return TerserPlugin.removeQueryString(assetFilename);
      });
      return assetFilenames.includes(TerserPlugin.removeQueryString(commentFilename));
    }
  }, {
    key: "isWebpack4",
    value: function isWebpack4() {
      return _webpack.version[0] === '4';
    }
  }]);

  return TerserPlugin;
}();

var _default = TerserPlugin;
exports["default"] = _default;