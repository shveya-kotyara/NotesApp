'use strict';

var path = require('path');

var fs = require('fs');

var commonDir = require('commondir');

var pkgDir = require('pkg-dir');

var makeDir = require('make-dir');

var _process = process,
    env = _process.env,
    cwd = _process.cwd;

var isWritable = function isWritable(path) {
  try {
    fs.accessSync(path, fs.constants.W_OK);
    return true;
  } catch (_) {
    return false;
  }
};

function useDirectory(directory, options) {
  if (options.create) {
    makeDir.sync(directory);
  }

  if (options.thunk) {
    return function () {
      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
        arguments_[_key] = arguments[_key];
      }

      return path.join.apply(path, [directory].concat(arguments_));
    };
  }

  return directory;
}

function getNodeModuleDirectory(directory) {
  var nodeModules = path.join(directory, 'node_modules');

  if (!isWritable(nodeModules) && (fs.existsSync(nodeModules) || !isWritable(path.join(directory)))) {
    return;
  }

  return nodeModules;
}

module.exports = function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (env.CACHE_DIR && !['true', 'false', '1', '0'].includes(env.CACHE_DIR)) {
    return useDirectory(path.join(env.CACHE_DIR, 'find-cache-dir'), options);
  }

  var _options$cwd = options.cwd,
      directory = _options$cwd === void 0 ? cwd() : _options$cwd;

  if (options.files) {
    directory = commonDir(directory, options.files);
  }

  directory = pkgDir.sync(directory);

  if (!directory) {
    return;
  }

  var nodeModules = getNodeModuleDirectory(directory);

  if (!nodeModules) {
    return undefined;
  }

  return useDirectory(path.join(directory, 'node_modules', '.cache', options.name), options);
};