"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(a) {
  return a && "object" == _typeof(a) && "default" in a ? a["default"] : a;
}

var camelCase = _interopDefault(require("camelcase")),
    syntaxJsx = _interopDefault(require("@babel/plugin-syntax-jsx"));

var cachedCamelCase = function () {
  var a = Object.create(null);
  return function (b) {
    return a[b] || (a[b] = camelCase(b)), a[b];
  };
}(),
    equalCamel = function equalCamel(a, b) {
  return a === b || a === cachedCamelCase(b);
},
    keyModifiers = ["ctrl", "shift", "alt", "meta"],
    keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  "delete": [8, 46]
},
    keyNames = {
  esc: ["Esc", "Escape"],
  tab: "Tab",
  enter: "Enter",
  space: " ",
  up: ["Up", "ArrowUp"],
  left: ["Left", "ArrowLeft"],
  right: ["Right", "ArrowRight"],
  down: ["Down", "ArrowDown"],
  "delete": ["Backspace", "Delete"]
};

function index(a) {
  function b(a) {
    return p.ifStatement(a, p.returnStatement(p.nullLiteral()));
  }

  function c(a) {
    var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    return p.callExpression(a, b);
  }

  function d(a) {
    return p.memberExpression(p.identifier("$event"), p.identifier(a));
  }

  function e(a) {
    return p.unaryExpression("!", a);
  }

  function f(a, b) {
    return p.binaryExpression("!==", a, b);
  }

  function g(a, b) {
    return p.logicalExpression("&&", a, b);
  }

  function h(a, b) {
    return p.logicalExpression("||", a, b);
  }

  function i() {
    return p.binaryExpression("in", p.stringLiteral("button"), p.identifier("$event"));
  }

  function j(a) {
    return p.arrowFunctionExpression([p.identifier("$event")], p.blockStatement(a instanceof Array ? a : [a]));
  }

  function k(a) {
    var _c$split, _c$split2, _c$split3, _c$split4;

    var b = a.get("name");
    var c = p.isJSXNamespacedName(b) ? "".concat(b.get("namespace.name").node, ":").concat(b.get("name.name").node) : b.get("name").node;
    camelCase(c);
    var d, e;
    if ((_c$split = c.split("_"), _c$split2 = _toArray(_c$split), c = _c$split2[0], d = _c$split2.slice(1), _c$split), (_c$split3 = c.split(":"), _c$split4 = _slicedToArray(_c$split3, 2), c = _c$split4[0], e = _c$split4[1], _c$split3), !equalCamel(c, "v-on") || !e) return {
      isInvalid: !1
    };
    if (!p.isJSXExpressionContainer(a.get("value"))) throw new Error("Only expression container is allowed on v-on directive.");
    var f = a.get("value.expression");
    return {
      expression: f.node,
      modifiers: d,
      event: e
    };
  }

  function l(a) {
    var _k = k(a),
        e = _k.modifiers,
        f = _k.isInvalid,
        g = _k.expression,
        i = _k.event;

    "click" === i && e.includes("right") && (e = e.filter(function (a) {
      return "right" !== a;
    }), i = "contextmenu"), "click" === i && e.includes("middle") && (i = "mouseup");
    var l = !1;
    if (f) return;
    if (!e || 0 === e.length) return {
      event: i,
      expression: g,
      isNative: l
    };
    var n = [],
        o = [],
        r = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = e[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _c = _step.value;

        if (q[_c]) {
          var _a = q[_c]();

          o.push(p.isExpression(_a) ? p.expressionStatement(_a) : _a), keyCodes[_c] && r.push(_c);
        } else if ("exact" === _c) o.push(b(keyModifiers.filter(function (a) {
          return !e.includes(a);
        }).map(function (a) {
          return d(a + "Key");
        }).reduce(function (a, b) {
          return a ? h(a, b) : b;
        })));else if ("capture" === _c || "once" === _c || "passive" === _c) continue;else "native" === _c ? l = !0 : r.push(_c);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return (-1 < e.indexOf("capture") && (i = "!" + i), -1 < e.indexOf("once") && (i = "~" + i), -1 < e.indexOf("passive") && (i = "&" + i), r.length && n.push(m(r)), o.length && n.push.apply(n, o), 0 === n.length) ? {
      event: i,
      expression: g,
      isNative: l
    } : (n.push(p.returnStatement(c(g, [p.identifier("$event")]))), {
      event: i,
      expression: j(n),
      isNative: l
    });
  }

  function m(a) {
    return b(a.map(n).reduce(function (a, b) {
      return g(a, b);
    }, e(i())));
  }

  function n(a) {
    var b = parseInt(a, 10);
    if (b) return f(d("keyCode"), p.numericLiteral(b));
    var c = keyCodes[a],
        e = keyNames[a];
    return p.callExpression(p.memberExpression(p.thisExpression(), p.identifier("_k")), [d("keyCode"), p.stringLiteral("".concat(a)), c ? Array.isArray(c) ? p.arrayExpression(c.map(function (a) {
      return p.numericLiteral(a);
    })) : p.numericLiteral(c) : p.identifier("undefined"), d("key"), e ? Array.isArray(e) ? p.arrayExpression(e.map(function (a) {
      return p.stringLiteral(a);
    })) : p.stringLiteral("".concat(e)) : p.identifier("undefined")]);
  }

  function o(a, b, c, d) {
    "~" !== a[0] && "!" !== a[0] && "&" !== a[0] ? d.push(p.jSXAttribute(p.jSXIdentifier("".concat(c ? "nativeOn" : "on", "-").concat(a)), p.jSXExpressionContainer(b))) : d.push(p.jSXSpreadAttribute(p.objectExpression([p.objectProperty(p.identifier("on"), p.objectExpression([p.objectProperty(p.stringLiteral(a), b)]))])));
  }

  var p = a.types,
      q = {
    stop: function stop() {
      return c(d("stopPropagation"));
    },
    prevent: function prevent() {
      return c(d("preventDefault"));
    },
    self: function self() {
      return b(f(d("target"), d("currentTarget")));
    },
    ctrl: function ctrl() {
      return b(e(d("ctrlKey")));
    },
    shift: function shift() {
      return b(e(d("shiftKey")));
    },
    alt: function alt() {
      return b(e(d("altKey")));
    },
    meta: function meta() {
      return b(e(d("metaKey")));
    },
    left: function left() {
      return b(g(i(), f(d("button"), p.numericLiteral(0))));
    },
    middle: function middle() {
      return b(g(i(), f(d("button"), p.numericLiteral(1))));
    },
    right: function right() {
      return b(g(i(), f(d("button"), p.numericLiteral(2))));
    }
  };
  return {
    inherits: syntaxJsx,
    visitor: {
      Program: function Program(a) {
        a.traverse({
          JSXAttribute: function JSXAttribute(a) {
            var _l = l(a),
                b = _l.event,
                c = _l.expression,
                d = _l.isNative;

            b && (a.remove(), o(b, c, d, a.parentPath.node.attributes));
          }
        });
      }
    }
  };
}

module.exports = index;