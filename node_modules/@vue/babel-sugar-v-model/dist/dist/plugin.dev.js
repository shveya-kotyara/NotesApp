"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(e) {
  return e && "object" == _typeof(e) && "default" in e ? e["default"] : e;
}

function index(e) {
  var i = e.types;
  return {
    inherits: syntaxJsx,
    visitor: {
      Program: function Program(e) {
        e.traverse({
          JSXAttribute: function JSXAttribute(e) {
            var n = parseVModel(i, e);

            if (n) {
              var modifiers = n.modifiers,
                  valuePath = n.valuePath,
                  t = e.parentPath;
              transformModel(i, t, valuePath, modifiers), e.remove();
            }
          }
        });
      }
    }
  };
}

var camelCase = _interopDefault(require("camelcase")),
    syntaxJsx = _interopDefault(require("@babel/plugin-syntax-jsx")),
    htmlTags = _interopDefault(require("html-tags")),
    svgTags = _interopDefault(require("svg-tags"));

var RANGE_TOKEN = "__r",
    cachedCamelCase = function () {
  var e = Object.create(null);
  return function (i) {
    e[i] || (e[i] = camelCase(i));
    return e[i];
  };
}(),
    equalCamel = function equalCamel(e, i) {
  return e === i || e === cachedCamelCase(i);
},
    startsWithCamel = function startsWithCamel(e, i) {
  return e.startsWith(i) || e.startsWith(cachedCamelCase(i));
},
    parseVModel = function parseVModel(e, i) {
  if (e.isJSXNamespacedName(i.get("name")) || !startsWithCamel(i.get("name.name").node, "v-model")) return null;
  if (!e.isJSXExpressionContainer(i.get("value"))) throw new Error("You have to use JSX Expression inside your v-model");
  var n = i.get("name.name").node.split("_");
  n.shift();
  return {
    modifiers: new Set(n),
    valuePath: i.get("value.expression")
  };
},
    transformModel = function transformModel(e, i, n, t) {
  if (isComponent(e, i)) return genComponentModel(e, i, n, t);
  var r = getTagName(e, i);
  var s = getType(e, i);
  if ("select" === r) genSelect(e, i, n, t);else if ("input" === r && "checkbox" === s) genCheckboxModel(e, i, n, t);else if ("input" === r && "radio" === s) genRadioModel(e, i, n, t);else {
    if ("input" !== r && "textarea" !== r) throw new Error("vModel: ".concat(r, "[type=").concat(s, "] is not supported"));
    genDefaultModel(e, i, n, t, s);
  }
  addModel(e, i, n, t);
},
    isComponent = function isComponent(e, i) {
  var n = i.get("name");
  if (e.isJSXMemberExpression(n)) return !0;
  var t = n.get("name").node;
  return !htmlTags.includes(t) && !svgTags.includes(t);
},
    getTagName = function getTagName(e, i) {
  return i.get("name.name").node;
},
    getType = function getType(e, i) {
  var n = i.get("attributes").find(function (i) {
    return e.isJSXAttribute(i) && e.isJSXIdentifier(i.get("name")) && "type" === i.get("name.name").node && e.isStringLiteral(i.get("value"));
  });
  return n ? n.get("value.value").node : "";
},
    addHandler = function addHandler(e, i, n, t) {
  addProp(e, i, "on-".concat(n), e.arrowFunctionExpression([e.identifier("$event")], e.blockStatement(t)), !0);
},
    addProp = function addProp(e, i, n, t) {
  var r = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
  i.node.attributes[r ? "unshift" : "push"](e.jSXAttribute(e.jSXIdentifier(n), e.jSXExpressionContainer(t)));
},
    genAssignmentCode = function genAssignmentCode(e, i, n) {
  var t;
  return e.isMemberExpression(i) && !e.isThisExpression(t = i.get("object").node) ? e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("$set")), [t, i.node.computed ? i.get("property").node : e.stringLiteral(i.get("property.name").node), n]) : e.assignmentExpression("=", i.node, n);
},
    getBindingAttr = function getBindingAttr(e, i, n) {
  var t = i.get("attributes").find(function (i) {
    return e.isJSXAttribute(i) && e.isJSXIdentifier(i.get("name")) && equalCamel(i.get("name.name").node, n);
  });

  if (t) {
    var _i = e.isJSXExpressionContainer(t.get("value")) ? t.get("value.expression").node : t.get("value").node;

    return t.remove(), _i;
  }

  return null;
},
    genComponentModel = function genComponentModel(e, i, n, t) {
  var r = e.identifier("$$v");
  var s = r;
  t.has("trim") && (s = e.conditionalExpression(e.binaryExpression("===", e.unaryExpression("typeof", r), e.stringLiteral("string")), e.callExpression(e.memberExpression(r, e.identifier("trim")), []), r));
  t.has("number") && (s = e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_n")), [s]));
  var o = genAssignmentCode(e, n, s);
  i.node.attributes.push(e.jSXAttribute(e.jSXIdentifier("model"), e.jSXExpressionContainer(e.objectExpression([e.objectProperty(e.identifier("value"), n.node), e.objectProperty(e.identifier("callback"), e.arrowFunctionExpression([e.identifier("$$v")], e.blockStatement([e.expressionStatement(o)])))]))));
},
    genSelect = function genSelect(e, i, n, t) {
  var r = t.has("number");
  var s = e.conditionalExpression(e.binaryExpression("in", e.stringLiteral("_value"), e.identifier("o")), e.memberExpression(e.identifier("o"), e.identifier("_value")), e.memberExpression(e.identifier("o"), e.identifier("value")));
  var o = e.callExpression(e.memberExpression(e.callExpression(e.memberExpression(e.memberExpression(e.memberExpression(e.identifier("Array"), e.identifier("prototype")), e.identifier("filter")), e.identifier("call")), [e.memberExpression(e.memberExpression(e.identifier("$event"), e.identifier("target")), e.identifier("options")), e.arrowFunctionExpression([e.identifier("o")], e.memberExpression(e.identifier("o"), e.identifier("selected")))]), e.identifier("map")), [e.arrowFunctionExpression([e.identifier("o")], r ? e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_n")), [s]) : s)]);
  var a = e.conditionalExpression(e.memberExpression(e.memberExpression(e.identifier("$event"), e.identifier("target")), e.identifier("multiple")), e.identifier("$$selectedVal"), e.memberExpression(e.identifier("$$selectedVal"), e.numericLiteral(0), !0));
  var d = e.variableDeclaration("const", [e.variableDeclarator(e.identifier("$$selectedVal"), o)]);
  addHandler(e, i, "change", [d, e.expressionStatement(genAssignmentCode(e, n, a))]);
},
    genCheckboxModel = function genCheckboxModel(e, i, n, t) {
  var r = n.node;
  var s = t.has("number");
  var o = getBindingAttr(e, i, "value") || e.nullLiteral();
  var a = getBindingAttr(e, i, "true-value") || e.booleanLiteral(!0);
  var d = getBindingAttr(e, i, "false-value") || e.booleanLiteral(!1);
  addProp(e, i, "domProps-checked", e.conditionalExpression(e.callExpression(e.memberExpression(e.identifier("Array"), e.identifier("isArray")), [r]), e.binaryExpression(">", e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_i")), [r, o]), e.unaryExpression("-", e.numericLiteral(1))), e.isBooleanLiteral(a) && a.value ? r : e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_q")), [r, a])));
  addHandler(e, i, "change", [e.variableDeclaration("const", [e.variableDeclarator(e.identifier("$$a"), r), e.variableDeclarator(e.identifier("$$el"), e.memberExpression(e.identifier("$event"), e.identifier("target"))), e.variableDeclarator(e.identifier("$$c"), e.conditionalExpression(e.memberExpression(e.identifier("$$el"), e.identifier("checked")), a, d))]), e.ifStatement(e.callExpression(e.memberExpression(e.identifier("Array"), e.identifier("isArray")), [e.identifier("$$a")]), e.blockStatement([e.variableDeclaration("const", [e.variableDeclarator(e.identifier("$$v"), s ? e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_n")), [o]) : o), e.variableDeclarator(e.identifier("$$i"), e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_i")), [e.identifier("$$a"), e.identifier("$$v")]))]), e.ifStatement(e.memberExpression(e.identifier("$$el"), e.identifier("checked")), e.blockStatement([e.expressionStatement(e.logicalExpression("&&", e.binaryExpression("<", e.identifier("$$i"), e.numericLiteral(0)), genAssignmentCode(e, n, e.callExpression(e.memberExpression(e.identifier("$$a"), e.identifier("concat")), [e.arrayExpression([e.identifier("$$v")])]))))]), e.blockStatement([e.expressionStatement(e.logicalExpression("&&", e.binaryExpression(">", e.identifier("$$i"), e.unaryExpression("-", e.numericLiteral(1))), genAssignmentCode(e, n, e.callExpression(e.memberExpression(e.callExpression(e.memberExpression(e.identifier("$$a"), e.identifier("slice")), [e.numericLiteral(0), e.identifier("$$i")]), e.identifier("concat")), [e.callExpression(e.memberExpression(e.identifier("$$a"), e.identifier("slice")), [e.binaryExpression("+", e.identifier("$$i"), e.numericLiteral(1))])]))))]))]), e.blockStatement([e.expressionStatement(genAssignmentCode(e, n, e.identifier("$$c")))]))]);
},
    genRadioModel = function genRadioModel(e, i, n, t) {
  var r = t.has("number");
  var s = getBindingAttr(e, i, "value") || e.nullLiteral();
  s = r ? e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_n")), [s]) : s;
  addProp(e, i, "domProps-checked", e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_q")), [n.node, s]));
  addHandler(e, i, "change", [e.expressionStatement(genAssignmentCode(e, n, s))]);
},
    addModel = function addModel(e, i, n, t) {
  i.node.attributes.push(e.jSXSpreadAttribute(e.objectExpression([e.objectProperty(e.identifier("directives"), e.arrayExpression([e.objectExpression([e.objectProperty(e.identifier("name"), e.stringLiteral("model")), e.objectProperty(e.identifier("value"), n.node), e.objectProperty(e.identifier("modifiers"), e.objectExpression(_toConsumableArray(t).map(function (i) {
    return e.objectProperty(e.identifier(i), e.booleanLiteral(!0));
  })))])]))])));
},
    genDefaultModel = function genDefaultModel(e, i, n, t, r) {
  var s = t.has("lazy");
  var o = t.has("number");
  var a = t.has("trim");
  var d = !s && "range" !== r;
  var l = s ? "change" : "range" === r ? "__r" : "input";
  var c = e.memberExpression(e.memberExpression(e.identifier("$event"), e.identifier("target")), e.identifier("value"));
  a && (c = e.callExpression(e.memberExpression(c, e.identifier("trim")), []));
  o && (c = e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("_n")), [c]));
  var m = [e.expressionStatement(genAssignmentCode(e, n, c))];
  d && (m = [e.ifStatement(e.memberExpression(e.memberExpression(e.identifier("$event"), e.identifier("target")), e.identifier("composing")), e.returnStatement())].concat(_toConsumableArray(m)));
  addProp(e, i, "domProps-value", n.node);
  addHandler(e, i, l, m);
  (a || o) && addHandler(e, i, "blur", [e.expressionStatement(e.callExpression(e.memberExpression(e.thisExpression(), e.identifier("$forceUpdate")), []))]);
};

module.exports = index;