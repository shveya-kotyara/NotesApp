"use strict";

var _this = void 0;

var _require = require('child_process'),
    execSync = _require.execSync;

var fs = require('fs');

var path = require('path');

var LRU = require('lru-cache');

var semver = require('semver');

var _hasYarn;

var _yarnProjects = new LRU({
  max: 10,
  maxAge: 1000
});

var _hasGit;

var _gitProjects = new LRU({
  max: 10,
  maxAge: 1000
}); // env detection


exports.hasYarn = function () {
  if (process.env.VUE_CLI_TEST) {
    return true;
  }

  if (_hasYarn != null) {
    return _hasYarn;
  }

  try {
    execSync('yarn --version', {
      stdio: 'ignore'
    });
    return _hasYarn = true;
  } catch (e) {
    return _hasYarn = false;
  }
};

exports.hasProjectYarn = function (cwd) {
  if (_yarnProjects.has(cwd)) {
    return checkYarn(_yarnProjects.get(cwd));
  }

  var lockFile = path.join(cwd, 'yarn.lock');
  var result = fs.existsSync(lockFile);

  _yarnProjects.set(cwd, result);

  return checkYarn(result);
};

function checkYarn(result) {
  if (result && !exports.hasYarn()) throw new Error("The project seems to require yarn but it's not installed.");
  return result;
}

exports.hasGit = function () {
  if (process.env.VUE_CLI_TEST) {
    return true;
  }

  if (_hasGit != null) {
    return _hasGit;
  }

  try {
    execSync('git --version', {
      stdio: 'ignore'
    });
    return _hasGit = true;
  } catch (e) {
    return _hasGit = false;
  }
};

exports.hasProjectGit = function (cwd) {
  if (_gitProjects.has(cwd)) {
    return _gitProjects.get(cwd);
  }

  var result;

  try {
    execSync('git status', {
      stdio: 'ignore',
      cwd: cwd
    });
    result = true;
  } catch (e) {
    result = false;
  }

  _gitProjects.set(cwd, result);

  return result;
};

var _hasPnpm;

var _pnpmVersion;

var _pnpmProjects = new LRU({
  max: 10,
  maxAge: 1000
});

function getPnpmVersion() {
  if (_pnpmVersion != null) {
    return _pnpmVersion;
  }

  try {
    _pnpmVersion = execSync('pnpm --version', {
      stdio: ['pipe', 'pipe', 'ignore']
    }).toString(); // there's a critical bug in pnpm 2
    // https://github.com/pnpm/pnpm/issues/1678#issuecomment-469981972
    // so we only support pnpm >= 3.0.0

    _hasPnpm = true;
  } catch (e) {}

  return _pnpmVersion || '0.0.0';
}

exports.hasPnpmVersionOrLater = function (version) {
  if (process.env.VUE_CLI_TEST) {
    return true;
  }

  return semver.gte(getPnpmVersion(), version);
};

exports.hasPnpm3OrLater = function () {
  return _this.hasPnpmVersionOrLater('3.0.0');
};

exports.hasProjectPnpm = function (cwd) {
  if (_pnpmProjects.has(cwd)) {
    return checkPnpm(_pnpmProjects.get(cwd));
  }

  var lockFile = path.join(cwd, 'pnpm-lock.yaml');
  var result = fs.existsSync(lockFile);

  _pnpmProjects.set(cwd, result);

  return checkPnpm(result);
};

function checkPnpm(result) {
  if (result && !exports.hasPnpm3OrLater()) {
    throw new Error("The project seems to require pnpm".concat(_hasPnpm ? ' >= 3' : '', " but it's not installed."));
  }

  return result;
}

var _npmProjects = new LRU({
  max: 10,
  maxAge: 1000
});

exports.hasProjectNpm = function (cwd) {
  if (_npmProjects.has(cwd)) {
    return _npmProjects.get(cwd);
  }

  var lockFile = path.join(cwd, 'package-lock.json');
  var result = fs.existsSync(lockFile);

  _npmProjects.set(cwd, result);

  return result;
}; // OS


exports.isWindows = process.platform === 'win32';
exports.isMacintosh = process.platform === 'darwin';
exports.isLinux = process.platform === 'linux';
var browsers = {};
var hasCheckedBrowsers = false;

function tryRun(cmd) {
  try {
    return execSync(cmd, {
      stdio: [0, 'pipe', 'ignore'],
      timeout: 10000
    }).toString().trim();
  } catch (e) {
    return '';
  }
}

function getLinuxAppVersion(binary) {
  return tryRun("".concat(binary, " --version")).replace(/^.* ([^ ]*)/g, '$1');
}

function getMacAppVersion(bundleIdentifier) {
  var bundlePath = tryRun("mdfind \"kMDItemCFBundleIdentifier=='".concat(bundleIdentifier, "'\""));

  if (bundlePath) {
    return tryRun("/usr/libexec/PlistBuddy -c Print:CFBundleShortVersionString ".concat(bundlePath.replace(/(\s)/g, '\\ '), "/Contents/Info.plist"));
  }
}

exports.getInstalledBrowsers = function () {
  if (hasCheckedBrowsers) {
    return browsers;
  }

  hasCheckedBrowsers = true;

  if (exports.isLinux) {
    browsers.chrome = getLinuxAppVersion('google-chrome');
    browsers.firefox = getLinuxAppVersion('firefox');
  } else if (exports.isMacintosh) {
    browsers.chrome = getMacAppVersion('com.google.Chrome');
    browsers.firefox = getMacAppVersion('org.mozilla.firefox');
  } else if (exports.isWindows) {
    // get chrome stable version
    // https://stackoverflow.com/a/51773107/2302258
    var chromeQueryResult = tryRun("reg query \"HKLM\\Software\\Google\\Update\\Clients\\{8A69D345-D564-463c-AFF1-A69D9E530F96}\" /v pv /reg:32") || tryRun("reg query \"HKCU\\Software\\Google\\Update\\Clients\\{8A69D345-D564-463c-AFF1-A69D9E530F96}\" /v pv /reg:32");

    if (chromeQueryResult) {
      var matched = chromeQueryResult.match(/REG_SZ\s+(\S*)$/);
      browsers.chrome = matched && matched[1];
    } // get firefox version
    // https://community.spiceworks.com/topic/111518-how-to-determine-version-of-installed-firefox-in-windows-batchscript


    var ffQueryResult = tryRun('reg query "HKLM\\Software\\Mozilla\\Mozilla Firefox" /v CurrentVersion');

    if (ffQueryResult) {
      var _matched = ffQueryResult.match(/REG_SZ\s+(\S*)$/);

      browsers.firefox = _matched && _matched[1];
    }
  }

  return browsers;
};