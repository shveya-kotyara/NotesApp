"use strict";

var chalk = require('chalk');

var stripAnsi = require('strip-ansi');

var readline = require('readline');

var EventEmitter = require('events');

var _require = require('./spinner'),
    stopSpinner = _require.stopSpinner;

exports.events = new EventEmitter();

function _log(type, tag, message) {
  if (process.env.VUE_CLI_API_MODE && message) {
    exports.events.emit('log', {
      message: message,
      type: type,
      tag: tag
    });
  }
}

var format = function format(label, msg) {
  return msg.split('\n').map(function (line, i) {
    return i === 0 ? "".concat(label, " ").concat(line) : line.padStart(stripAnsi(label).length);
  }).join('\n');
};

var chalkTag = function chalkTag(msg) {
  return chalk.bgBlackBright.white.dim(" ".concat(msg, " "));
};

exports.log = function () {
  var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  tag ? console.log(format(chalkTag(tag), msg)) : console.log(msg);

  _log('log', tag, msg);
};

exports.info = function (msg) {
  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  console.log(format(chalk.bgBlue.black(' INFO ') + (tag ? chalkTag(tag) : ''), msg));

  _log('info', tag, msg);
};

exports.done = function (msg) {
  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  console.log(format(chalk.bgGreen.black(' DONE ') + (tag ? chalkTag(tag) : ''), msg));

  _log('done', tag, msg);
};

exports.warn = function (msg) {
  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  console.warn(format(chalk.bgYellow.black(' WARN ') + (tag ? chalkTag(tag) : ''), chalk.yellow(msg)));

  _log('warn', tag, msg);
};

exports.error = function (msg) {
  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  stopSpinner();
  console.error(format(chalk.bgRed(' ERROR ') + (tag ? chalkTag(tag) : ''), chalk.red(msg)));

  _log('error', tag, msg);

  if (msg instanceof Error) {
    console.error(msg.stack);

    _log('error', tag, msg.stack);
  }
};

exports.clearConsole = function (title) {
  if (process.stdout.isTTY) {
    var blank = '\n'.repeat(process.stdout.rows);
    console.log(blank);
    readline.cursorTo(process.stdout, 0, 0);
    readline.clearScreenDown(process.stdout);

    if (title) {
      console.log(title);
    }
  }
}; // silent all logs except errors during tests and keep record


if (process.env.VUE_CLI_TEST) {
  require('./_silence')('logs', exports);
}