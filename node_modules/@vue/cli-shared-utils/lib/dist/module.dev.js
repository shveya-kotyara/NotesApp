"use strict";

var Module = require('module');

var path = require('path');

var semver = require('semver'); // https://github.com/benmosher/eslint-plugin-import/pull/1591
// https://github.com/benmosher/eslint-plugin-import/pull/1602
// Polyfill Node's `Module.createRequireFromPath` if not present (added in Node v10.12.0)
// Use `Module.createRequire` if available (added in Node v12.2.0)


var createRequire = Module.createRequire || Module.createRequireFromPath || function (filename) {
  var mod = new Module(filename, null);
  mod.filename = filename;
  mod.paths = Module._nodeModulePaths(path.dirname(filename));

  mod._compile("module.exports = require;", filename);

  return mod.exports;
};

function resolveFallback(request, options) {
  var isMain = false;
  var fakeParent = new Module('', null);
  var paths = [];

  for (var i = 0; i < options.paths.length; i++) {
    var p = options.paths[i];
    fakeParent.paths = Module._nodeModulePaths(p);

    var lookupPaths = Module._resolveLookupPaths(request, fakeParent, true);

    if (!paths.includes(p)) paths.push(p);

    for (var j = 0; j < lookupPaths.length; j++) {
      if (!paths.includes(lookupPaths[j])) paths.push(lookupPaths[j]);
    }
  }

  var filename = Module._findPath(request, paths, isMain);

  if (!filename) {
    var err = new Error("Cannot find module '".concat(request, "'"));
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  }

  return filename;
}

var resolve = semver.satisfies(process.version, '>=10.0.0') ? require.resolve : resolveFallback;

exports.resolveModule = function (request, context) {
  var resolvedPath;

  try {
    try {
      resolvedPath = createRequire(path.resolve(context, 'package.json')).resolve(request);
    } catch (e) {
      resolvedPath = resolve(request, {
        paths: [context]
      });
    }
  } catch (e) {}

  return resolvedPath;
};

exports.loadModule = function (request, context) {
  var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  // createRequire doesn't work with jest mock modules
  // (which we used in migrator for inquirer, and in tests for cli-service)
  // TODO: it's supported in Jest 25
  if (process.env.VUE_CLI_TEST && (request.endsWith('migrator') || context === '/')) {
    return require(request);
  }

  try {
    return createRequire(path.resolve(context, 'package.json'))(request);
  } catch (e) {
    var resolvedPath = exports.resolveModule(request, context);

    if (resolvedPath) {
      if (force) {
        clearRequireCache(resolvedPath);
      }

      return require(resolvedPath);
    }
  }
};

exports.clearModule = function (request, context) {
  var resolvedPath = exports.resolveModule(request, context);

  if (resolvedPath) {
    clearRequireCache(resolvedPath);
  }
};

function clearRequireCache(id) {
  var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();
  var module = require.cache[id];

  if (module) {
    map.set(id, true); // Clear children modules

    module.children.forEach(function (child) {
      if (!map.get(child.id)) clearRequireCache(child.id, map);
    });
    delete require.cache[id];
  }
}