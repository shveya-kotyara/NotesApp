"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _interopDefault(e) {
  return e && "object" == _typeof(e) && "default" in e ? e["default"] : e;
}

var syntaxJsx = _interopDefault(require("@babel/plugin-syntax-jsx"));

var autoImportGetCurrentInstance = function autoImportGetCurrentInstance(e, t) {
  var n = t.get("body").filter(function (e) {
    return e.isImportDeclaration();
  }).map(function (e) {
    return e.node;
  });
  var i = n.filter(function (e) {
    return "@vue/composition-api" === e.source.value;
  });
  var o = i.some(function (t) {
    return t.specifiers.some(function (t) {
      return e.isImportSpecifier(t) && "getCurrentInstance" === t.local.name;
    });
  });

  if (!o) {
    var _n = e.importSpecifier(e.identifier("getCurrentInstance"), e.identifier("getCurrentInstance"));

    i.length > 0 ? i[0].specifiers.push(_n) : t.unshiftContainer("body", e.importDeclaration([_n], e.stringLiteral("@vue/composition-api")));
  }
},
    injectInstanceId = "__currentInstance";

var index = function index(_ref) {
  var t = _ref.types;
  return {
    inherits: syntaxJsx,
    visitor: {
      Program: function Program(e) {
        e.traverse({
          "ObjectMethod|ObjectProperty": function ObjectMethodObjectProperty(n) {
            if ("setup" === n.node.key.name) {
              var i = !1;
              n.traverse({
                JSXAttribute: function JSXAttribute(o) {
                  var r = o.get("name");
                  ["v-on", "on-input", "on-change", "model"].includes(r.node.name) && o.traverse({
                    MemberExpression: function MemberExpression(o) {
                      var r = o.get("object"),
                          s = o.get("property");
                      t.isThisExpression(r) && t.isIdentifier(s) && ["$", "_"].includes(s.node.name[0]) && (autoImportGetCurrentInstance(t, e), i || (n.node.value.body.body.unshift(t.variableDeclaration("const", [t.variableDeclarator(t.identifier(injectInstanceId), t.callExpression(t.identifier("getCurrentInstance"), []))])), i = !0), r.replaceWith(t.identifier(injectInstanceId)));
                    }
                  });
                }
              });
            }
          }
        });
      }
    }
  };
};

module.exports = index;