'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var types = require('./types.js');

var MiniPass = require('minipass');

var SLURP = Symbol('slurp');

module.exports =
/*#__PURE__*/
function (_MiniPass) {
  _inherits(ReadEntry, _MiniPass);

  function ReadEntry(header, ex, gex) {
    var _this;

    _classCallCheck(this, ReadEntry);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReadEntry).call(this)); // read entries always start life paused.  this is to avoid the
    // situation where Minipass's auto-ending empty streams results
    // in an entry ending before we're ready for it.

    _this.pause();

    _this.extended = ex;
    _this.globalExtended = gex;
    _this.header = header;
    _this.startBlockSize = 512 * Math.ceil(header.size / 512);
    _this.blockRemain = _this.startBlockSize;
    _this.remain = header.size;
    _this.type = header.type;
    _this.meta = false;
    _this.ignore = false;

    switch (_this.type) {
      case 'File':
      case 'OldFile':
      case 'Link':
      case 'SymbolicLink':
      case 'CharacterDevice':
      case 'BlockDevice':
      case 'Directory':
      case 'FIFO':
      case 'ContiguousFile':
      case 'GNUDumpDir':
        break;

      case 'NextFileHasLongLinkpath':
      case 'NextFileHasLongPath':
      case 'OldGnuLongPath':
      case 'GlobalExtendedHeader':
      case 'ExtendedHeader':
      case 'OldExtendedHeader':
        _this.meta = true;
        break;
      // NOTE: gnutar and bsdtar treat unrecognized types as 'File'
      // it may be worth doing the same, but with a warning.

      default:
        _this.ignore = true;
    }

    _this.path = header.path;
    _this.mode = header.mode;
    if (_this.mode) _this.mode = _this.mode & 4095;
    _this.uid = header.uid;
    _this.gid = header.gid;
    _this.uname = header.uname;
    _this.gname = header.gname;
    _this.size = header.size;
    _this.mtime = header.mtime;
    _this.atime = header.atime;
    _this.ctime = header.ctime;
    _this.linkpath = header.linkpath;
    _this.uname = header.uname;
    _this.gname = header.gname;
    if (ex) _this[SLURP](ex);
    if (gex) _this[SLURP](gex, true);
    return _this;
  }

  _createClass(ReadEntry, [{
    key: "write",
    value: function write(data) {
      var writeLen = data.length;
      if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');
      var r = this.remain;
      var br = this.blockRemain;
      this.remain = Math.max(0, r - writeLen);
      this.blockRemain = Math.max(0, br - writeLen);
      if (this.ignore) return true;
      if (r >= writeLen) return _get(_getPrototypeOf(ReadEntry.prototype), "write", this).call(this, data); // r < writeLen

      return _get(_getPrototypeOf(ReadEntry.prototype), "write", this).call(this, data.slice(0, r));
    }
  }, {
    key: SLURP,
    value: function value(ex, global) {
      for (var k in ex) {
        // we slurp in everything except for the path attribute in
        // a global extended header, because that's weird.
        if (ex[k] !== null && ex[k] !== undefined && !(global && k === 'path')) this[k] = ex[k];
      }
    }
  }]);

  return ReadEntry;
}(MiniPass);