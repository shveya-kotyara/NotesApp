'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = normalizeAnimation;

var _postcssValueParser = require('postcss-value-parser');

var _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');

var _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);

var _addSpace = require('../lib/addSpace');

var _addSpace2 = _interopRequireDefault(_addSpace);

var _getValue = require('../lib/getValue');

var _getValue2 = _interopRequireDefault(_getValue);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
} // animation: [ none | <keyframes-name> ] || <time> || <single-timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state>


var isTimingFunction = function isTimingFunction(value, type) {
  var functions = ['steps', 'cubic-bezier', 'frames'];
  var keywords = ['ease', 'ease-in', 'ease-in-out', 'ease-out', 'linear', 'step-end', 'step-start'];
  return type === 'function' && functions.includes(value) || keywords.includes(value);
};

var isDirection = function isDirection(value) {
  return ['normal', 'reverse', 'alternate', 'alternate-reverse'].includes(value);
};

var isFillMode = function isFillMode(value) {
  return ['none', 'forwards', 'backwards', 'both'].includes(value);
};

var isPlayState = function isPlayState(value) {
  return ['running', 'paused'].includes(value);
};

var isTime = function isTime(value) {
  var quantity = (0, _postcssValueParser.unit)(value);
  return quantity && ['ms', 's'].includes(quantity.unit);
};

var isIterationCount = function isIterationCount(value) {
  var quantity = (0, _postcssValueParser.unit)(value);
  return value === 'infinite' || quantity && !quantity.unit;
};

function normalizeAnimation(parsed) {
  var args = (0, _cssnanoUtilGetArguments2["default"])(parsed);
  var values = args.reduce(function (list, arg) {
    var state = {
      name: [],
      duration: [],
      timingFunction: [],
      delay: [],
      iterationCount: [],
      direction: [],
      fillMode: [],
      playState: []
    };
    var stateConditions = [{
      property: 'duration',
      delegate: isTime
    }, {
      property: 'timingFunction',
      delegate: isTimingFunction
    }, {
      property: 'delay',
      delegate: isTime
    }, {
      property: 'iterationCount',
      delegate: isIterationCount
    }, {
      property: 'direction',
      delegate: isDirection
    }, {
      property: 'fillMode',
      delegate: isFillMode
    }, {
      property: 'playState',
      delegate: isPlayState
    }];
    arg.forEach(function (node) {
      var type = node.type,
          value = node.value;

      if (type === 'space') {
        return;
      }

      value = value.toLowerCase();
      var hasMatch = stateConditions.some(function (_ref) {
        var property = _ref.property,
            delegate = _ref.delegate;

        if (delegate(value, type) && !state[property].length) {
          state[property] = [node, (0, _addSpace2["default"])()];
          return true;
        }
      });

      if (!hasMatch) {
        state.name = [].concat(_toConsumableArray(state.name), [node, (0, _addSpace2["default"])()]);
      }
    });
    return [].concat(_toConsumableArray(list), [[].concat(_toConsumableArray(state.name), _toConsumableArray(state.duration), _toConsumableArray(state.timingFunction), _toConsumableArray(state.delay), _toConsumableArray(state.iterationCount), _toConsumableArray(state.direction), _toConsumableArray(state.fillMode), _toConsumableArray(state.playState))]);
  }, []);
  return (0, _getValue2["default"])(values);
}

;
module.exports = exports['default'];