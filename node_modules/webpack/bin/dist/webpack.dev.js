#!/usr/bin/env node
// @ts-ignore
"use strict";

process.exitCode = 0;
/**
 * @param {string} command process to run
 * @param {string[]} args commandline arguments
 * @returns {Promise<void>} promise
 */

var runCommand = function runCommand(command, args) {
  var cp = require("child_process");

  return new Promise(function (resolve, reject) {
    var executedCommand = cp.spawn(command, args, {
      stdio: "inherit",
      shell: true
    });
    executedCommand.on("error", function (error) {
      reject(error);
    });
    executedCommand.on("exit", function (code) {
      if (code === 0) {
        resolve();
      } else {
        reject();
      }
    });
  });
};
/**
 * @param {string} packageName name of the package
 * @returns {boolean} is the package installed?
 */


var isInstalled = function isInstalled(packageName) {
  try {
    require.resolve(packageName);

    return true;
  } catch (err) {
    return false;
  }
};
/**
 * @typedef {Object} CliOption
 * @property {string} name display name
 * @property {string} package npm package name
 * @property {string} binName name of the executable file
 * @property {string} alias shortcut for choice
 * @property {boolean} installed currently installed?
 * @property {boolean} recommended is recommended
 * @property {string} url homepage
 * @property {string} description description
 */

/** @type {CliOption[]} */


var CLIs = [{
  name: "webpack-cli",
  "package": "webpack-cli",
  binName: "webpack-cli",
  alias: "cli",
  installed: isInstalled("webpack-cli"),
  recommended: true,
  url: "https://github.com/webpack/webpack-cli",
  description: "The original webpack full-featured CLI."
}, {
  name: "webpack-command",
  "package": "webpack-command",
  binName: "webpack-command",
  alias: "command",
  installed: isInstalled("webpack-command"),
  recommended: false,
  url: "https://github.com/webpack-contrib/webpack-command",
  description: "A lightweight, opinionated webpack CLI."
}];
var installedClis = CLIs.filter(function (cli) {
  return cli.installed;
});

if (installedClis.length === 0) {
  var path = require("path");

  var fs = require("fs");

  var readLine = require("readline");

  var notify = "One CLI for webpack must be installed. These are recommended choices, delivered as separate packages:";
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = CLIs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;

      if (item.recommended) {
        notify += "\n - ".concat(item.name, " (").concat(item.url, ")\n   ").concat(item.description);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  console.error(notify);
  var isYarn = fs.existsSync(path.resolve(process.cwd(), "yarn.lock"));
  var packageManager = isYarn ? "yarn" : "npm";
  var installOptions = [isYarn ? "add" : "install", "-D"];
  console.error("We will use \"".concat(packageManager, "\" to install the CLI via \"").concat(packageManager, " ").concat(installOptions.join(" "), "\"."));
  var question = "Do you want to install 'webpack-cli' (yes/no): ";
  var questionInterface = readLine.createInterface({
    input: process.stdin,
    output: process.stderr
  });
  questionInterface.question(question, function (answer) {
    questionInterface.close();
    var normalizedAnswer = answer.toLowerCase().startsWith("y");

    if (!normalizedAnswer) {
      console.error("You need to install 'webpack-cli' to use webpack via CLI.\n" + "You can also install the CLI manually.");
      process.exitCode = 1;
      return;
    }

    var packageName = "webpack-cli";
    console.log("Installing '".concat(packageName, "' (running '").concat(packageManager, " ").concat(installOptions.join(" "), " ").concat(packageName, "')..."));
    runCommand(packageManager, installOptions.concat(packageName)).then(function () {
      require(packageName); //eslint-disable-line

    })["catch"](function (error) {
      console.error(error);
      process.exitCode = 1;
    });
  });
} else if (installedClis.length === 1) {
  var _path = require("path");

  var pkgPath = require.resolve("".concat(installedClis[0]["package"], "/package.json")); // eslint-disable-next-line node/no-missing-require


  var pkg = require(pkgPath); // eslint-disable-next-line node/no-missing-require


  require(_path.resolve(_path.dirname(pkgPath), pkg.bin[installedClis[0].binName]));
} else {
  console.warn("You have installed ".concat(installedClis.map(function (item) {
    return item.name;
  }).join(" and "), " together. To work with the \"webpack\" command you need only one CLI package, please remove one of them or use them directly via their binary.")); // @ts-ignore

  process.exitCode = 1;
}