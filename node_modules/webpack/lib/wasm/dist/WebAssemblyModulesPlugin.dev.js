/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Generator = require("../Generator");

var WebAssemblyExportImportedDependency = require("../dependencies/WebAssemblyExportImportedDependency");

var WebAssemblyImportDependency = require("../dependencies/WebAssemblyImportDependency");

var WebAssemblyInInitialChunkError = require("./WebAssemblyInInitialChunkError");
/** @typedef {import("../Compiler")} Compiler */


var WebAssemblyGenerator;
var WebAssemblyJavascriptGenerator;
var WebAssemblyParser;

var WebAssemblyModulesPlugin =
/*#__PURE__*/
function () {
  function WebAssemblyModulesPlugin(options) {
    _classCallCheck(this, WebAssemblyModulesPlugin);

    this.options = options;
  }
  /**
   * @param {Compiler} compiler compiler
   * @returns {void}
   */


  _createClass(WebAssemblyModulesPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("WebAssemblyModulesPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);
        compilation.dependencyFactories.set(WebAssemblyExportImportedDependency, normalModuleFactory);
        normalModuleFactory.hooks.createParser["for"]("webassembly/experimental").tap("WebAssemblyModulesPlugin", function () {
          if (WebAssemblyParser === undefined) {
            WebAssemblyParser = require("./WebAssemblyParser");
          }

          return new WebAssemblyParser();
        });
        normalModuleFactory.hooks.createGenerator["for"]("webassembly/experimental").tap("WebAssemblyModulesPlugin", function () {
          if (WebAssemblyGenerator === undefined) {
            WebAssemblyGenerator = require("./WebAssemblyGenerator");
          }

          if (WebAssemblyJavascriptGenerator === undefined) {
            WebAssemblyJavascriptGenerator = require("./WebAssemblyJavascriptGenerator");
          }

          return Generator.byType({
            javascript: new WebAssemblyJavascriptGenerator(),
            webassembly: new WebAssemblyGenerator(_this.options)
          });
        });
        compilation.chunkTemplate.hooks.renderManifest.tap("WebAssemblyModulesPlugin", function (result, options) {
          var chunk = options.chunk;
          var outputOptions = options.outputOptions;
          var moduleTemplates = options.moduleTemplates;
          var dependencyTemplates = options.dependencyTemplates;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            var _loop = function _loop() {
              var module = _step.value;

              if (module.type && module.type.startsWith("webassembly")) {
                var filenameTemplate = outputOptions.webassemblyModuleFilename;
                result.push({
                  render: function render() {
                    return _this.renderWebAssembly(module, moduleTemplates.webassembly, dependencyTemplates);
                  },
                  filenameTemplate: filenameTemplate,
                  pathOptions: {
                    module: module
                  },
                  identifier: "webassemblyModule".concat(module.id),
                  hash: module.hash
                });
              }
            };

            for (var _iterator = chunk.modulesIterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              _loop();
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return result;
        });
        compilation.hooks.afterChunks.tap("WebAssemblyModulesPlugin", function () {
          var initialWasmModules = new Set();
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = compilation.chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var chunk = _step2.value;

              if (chunk.canBeInitial()) {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                  for (var _iterator4 = chunk.modulesIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _module = _step4.value;

                    if (_module.type.startsWith("webassembly")) {
                      initialWasmModules.add(_module);
                    }
                  }
                } catch (err) {
                  _didIteratorError4 = true;
                  _iteratorError4 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                      _iterator4["return"]();
                    }
                  } finally {
                    if (_didIteratorError4) {
                      throw _iteratorError4;
                    }
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = initialWasmModules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _module2 = _step3.value;
              compilation.errors.push(new WebAssemblyInInitialChunkError(_module2, compilation.requestShortener));
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        });
      });
    }
  }, {
    key: "renderWebAssembly",
    value: function renderWebAssembly(module, moduleTemplate, dependencyTemplates) {
      return moduleTemplate.render(module, dependencyTemplates, {});
    }
  }]);

  return WebAssemblyModulesPlugin;
}();

module.exports = WebAssemblyModulesPlugin;