/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

var Template = require("../Template");

var WebAssemblyImportDependency = require("../dependencies/WebAssemblyImportDependency");
/** @typedef {import("../Module")} Module */

/** @typedef {Object} UsedWasmDependency
 * @property {WebAssemblyImportDependency} dependency the dependency
 * @property {string} name the export name
 * @property {string} module the module name
 */


var MANGLED_MODULE = "a";
/**
 * @param {Module} module the module
 * @param {boolean} mangle mangle module and export names
 * @returns {UsedWasmDependency[]} used dependencies and (mangled) name
 */

var getUsedDependencies = function getUsedDependencies(module, mangle) {
  /** @type {UsedWasmDependency[]} */
  var array = [];
  var importIndex = 0;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = module.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var dep = _step.value;

      if (dep instanceof WebAssemblyImportDependency) {
        if (dep.description.type === "GlobalType" || dep.module === null) {
          continue;
        }

        var exportName = dep.name; // TODO add the following 3 lines when removing of ModuleExport is possible
        // const importedModule = dep.module;
        // const usedName = importedModule && importedModule.isUsed(exportName);
        // if (usedName !== false) {

        if (mangle) {
          array.push({
            dependency: dep,
            name: Template.numberToIdentifer(importIndex++),
            module: MANGLED_MODULE
          });
        } else {
          array.push({
            dependency: dep,
            name: exportName,
            module: dep.request
          });
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return array;
};

exports.getUsedDependencies = getUsedDependencies;
exports.MANGLED_MODULE = MANGLED_MODULE;