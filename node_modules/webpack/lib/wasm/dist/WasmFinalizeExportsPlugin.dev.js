/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
	*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UnsupportedWebAssemblyFeatureError = require("./UnsupportedWebAssemblyFeatureError");

var WasmFinalizeExportsPlugin =
/*#__PURE__*/
function () {
  function WasmFinalizeExportsPlugin() {
    _classCallCheck(this, WasmFinalizeExportsPlugin);
  }

  _createClass(WasmFinalizeExportsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("WasmFinalizeExportsPlugin", function (compilation) {
        compilation.hooks.finishModules.tap("WasmFinalizeExportsPlugin", function (modules) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            var _loop = function _loop() {
              var module = _step.value;

              // 1. if a WebAssembly module
              if (module.type.startsWith("webassembly") === true) {
                var _ret2 = function () {
                  var jsIncompatibleExports = module.buildMeta.jsIncompatibleExports;

                  if (jsIncompatibleExports === undefined) {
                    return {
                      v: "continue"
                    };
                  }

                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = undefined;

                  try {
                    var _loop2 = function _loop2() {
                      var reason = _step2.value;

                      // 2. is referenced by a non-WebAssembly module
                      if (reason.module.type.startsWith("webassembly") === false) {
                        var ref = compilation.getDependencyReference(reason.module, reason.dependency);
                        if (!ref) return "continue";
                        var importedNames = ref.importedNames;

                        if (Array.isArray(importedNames)) {
                          importedNames.forEach(function (name) {
                            // 3. and uses a func with an incompatible JS signature
                            if (Object.prototype.hasOwnProperty.call(jsIncompatibleExports, name)) {
                              // 4. error

                              /** @type {any} */
                              var error = new UnsupportedWebAssemblyFeatureError("Export \"".concat(name, "\" with ").concat(jsIncompatibleExports[name], " can only be used for direct wasm to wasm dependencies"));
                              error.module = module;
                              error.origin = reason.module;
                              error.originLoc = reason.dependency.loc;
                              error.dependencies = [reason.dependency];
                              compilation.errors.push(error);
                            }
                          });
                        }
                      }
                    };

                    for (var _iterator2 = module.reasons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var _ret3 = _loop2();

                      if (_ret3 === "continue") continue;
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                        _iterator2["return"]();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }
                }();

                if (_typeof(_ret2) === "object") return _ret2.v;
              }
            };

            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _ret = _loop();

              if (_ret === "continue") continue;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      });
    }
  }]);

  return WasmFinalizeExportsPlugin;
}();

module.exports = WasmFinalizeExportsPlugin;