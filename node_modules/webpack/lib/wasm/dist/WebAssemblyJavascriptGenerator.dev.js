/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Generator = require("../Generator");

var Template = require("../Template");

var _require = require("webpack-sources"),
    RawSource = _require.RawSource;

var WebAssemblyImportDependency = require("../dependencies/WebAssemblyImportDependency");

var WebAssemblyExportImportedDependency = require("../dependencies/WebAssemblyExportImportedDependency");
/** @typedef {import("../NormalModule")} NormalModule */

/** @typedef {import("../RuntimeTemplate")} RuntimeTemplate */

/** @typedef {import("webpack-sources").Source} Source */

/** @typedef {import("../Dependency").DependencyTemplate} DependencyTemplate */


var WebAssemblyJavascriptGenerator =
/*#__PURE__*/
function (_Generator) {
  _inherits(WebAssemblyJavascriptGenerator, _Generator);

  function WebAssemblyJavascriptGenerator() {
    _classCallCheck(this, WebAssemblyJavascriptGenerator);

    return _possibleConstructorReturn(this, _getPrototypeOf(WebAssemblyJavascriptGenerator).apply(this, arguments));
  }

  _createClass(WebAssemblyJavascriptGenerator, [{
    key: "generate",

    /**
     * @param {NormalModule} module module for which the code should be generated
     * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates
     * @param {RuntimeTemplate} runtimeTemplate the runtime template
     * @param {string} type which kind of code should be generated
     * @returns {Source} generated code
     */
    value: function generate(module, dependencyTemplates, runtimeTemplate, type) {
      var initIdentifer = Array.isArray(module.usedExports) ? Template.numberToIdentifer(module.usedExports.length) : "__webpack_init__";
      var needExportsCopy = false;
      var importedModules = new Map();
      var initParams = [];
      var index = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var dep = _step.value;
          var depAsAny =
          /** @type {any} */
          dep;

          if (dep.module) {
            var importData = importedModules.get(dep.module);

            if (importData === undefined) {
              importedModules.set(dep.module, importData = {
                importVar: "m".concat(index),
                index: index,
                request: "userRequest" in depAsAny ? depAsAny.userRequest : undefined,
                names: new Set(),
                reexports: []
              });
              index++;
            }

            if (dep instanceof WebAssemblyImportDependency) {
              importData.names.add(dep.name);

              if (dep.description.type === "GlobalType") {
                var exportName = dep.name;
                var usedName = dep.module && dep.module.isUsed(exportName);

                if (dep.module) {
                  if (usedName) {
                    initParams.push(runtimeTemplate.exportFromImport({
                      module: dep.module,
                      request: dep.request,
                      importVar: importData.importVar,
                      originModule: module,
                      exportName: dep.name,
                      asiSafe: true,
                      isCall: false,
                      callContext: null
                    }));
                  }
                }
              }
            }

            if (dep instanceof WebAssemblyExportImportedDependency) {
              importData.names.add(dep.name);

              var _usedName = module.isUsed(dep.exportName);

              if (_usedName) {
                var exportProp = "".concat(module.exportsArgument, "[").concat(JSON.stringify(_usedName), "]");
                var defineStatement = Template.asString(["".concat(exportProp, " = ").concat(runtimeTemplate.exportFromImport({
                  module: dep.module,
                  request: dep.request,
                  importVar: importData.importVar,
                  originModule: module,
                  exportName: dep.name,
                  asiSafe: true,
                  isCall: false,
                  callContext: null
                }), ";"), "if(WebAssembly.Global) ".concat(exportProp, " = ") + "new WebAssembly.Global({ value: ".concat(JSON.stringify(dep.valueType), " }, ").concat(exportProp, ");")]);
                importData.reexports.push(defineStatement);
                needExportsCopy = true;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var importsCode = Template.asString(Array.from(importedModules, function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            module = _ref2[0],
            _ref2$ = _ref2[1],
            importVar = _ref2$.importVar,
            request = _ref2$.request,
            reexports = _ref2$.reexports;

        var importStatement = runtimeTemplate.importStatement({
          module: module,
          request: request,
          importVar: importVar,
          originModule: module
        });
        return importStatement + reexports.join("\n");
      })); // create source

      var source = new RawSource(['"use strict";', "// Instantiate WebAssembly module", "var wasmExports = __webpack_require__.w[module.i];", !Array.isArray(module.usedExports) ? "__webpack_require__.r(".concat(module.exportsArgument, ");") : "", // this must be before import for circular dependencies
      "// export exports from WebAssembly module", Array.isArray(module.usedExports) && !needExportsCopy ? "".concat(module.moduleArgument, ".exports = wasmExports;") : "for(var name in wasmExports) " + "if(name != ".concat(JSON.stringify(initIdentifer), ") ") + "".concat(module.exportsArgument, "[name] = wasmExports[name];"), "// exec imports from WebAssembly module (for esm order)", importsCode, "", "// exec wasm module", "wasmExports[".concat(JSON.stringify(initIdentifer), "](").concat(initParams.join(", "), ")")].join("\n"));
      return source;
    }
  }]);

  return WebAssemblyJavascriptGenerator;
}(Generator);

module.exports = WebAssemblyJavascriptGenerator;