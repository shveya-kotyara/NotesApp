/*
	MIT License http://www.opensource.org/licenses/mit-license.php
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WebpackError = require("../WebpackError");
/** @typedef {import("../Module")} Module */

/** @typedef {import("../RequestShortener")} RequestShortener */

/**
 * @param {Module} module module to get chains from
 * @param {RequestShortener} requestShortener to make readable identifiers
 * @returns {string[]} all chains to the module
 */


var getInitialModuleChains = function getInitialModuleChains(module, requestShortener) {
  var queue = [{
    head: module,
    message: module.readableIdentifier(requestShortener)
  }];
  /** @type {Set<string>} */

  var results = new Set();
  /** @type {Set<string>} */

  var incompleteResults = new Set();
  /** @type {Set<Module>} */

  var visitedModules = new Set();

  for (var _i = 0, _queue = queue; _i < _queue.length; _i++) {
    var chain = _queue[_i];
    var head = chain.head,
        message = chain.message;
    var _final = true;
    /** @type {Set<Module>} */

    var alreadyReferencedModules = new Set();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = head.reasons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var reason = _step2.value;
        var newHead = reason.module;

        if (newHead) {
          if (!newHead.getChunks().some(function (c) {
            return c.canBeInitial();
          })) continue;
          _final = false;
          if (alreadyReferencedModules.has(newHead)) continue;
          alreadyReferencedModules.add(newHead);
          var moduleName = newHead.readableIdentifier(requestShortener);
          var detail = reason.explanation ? " (".concat(reason.explanation, ")") : "";
          var newMessage = "".concat(moduleName).concat(detail, " --> ").concat(message);

          if (visitedModules.has(newHead)) {
            incompleteResults.add("... --> ".concat(newMessage));
            continue;
          }

          visitedModules.add(newHead);
          queue.push({
            head: newHead,
            message: newMessage
          });
        } else {
          _final = false;

          var _newMessage = reason.explanation ? "(".concat(reason.explanation, ") --> ").concat(message) : message;

          results.add(_newMessage);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (_final) {
      results.add(message);
    }
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = incompleteResults[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var result = _step.value;
      results.add(result);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return Array.from(results);
};

module.exports =
/*#__PURE__*/
function (_WebpackError) {
  _inherits(WebAssemblyInInitialChunkError, _WebpackError);

  /**
   * @param {Module} module WASM module
   * @param {RequestShortener} requestShortener request shortener
   */
  function WebAssemblyInInitialChunkError(module, requestShortener) {
    var _this;

    _classCallCheck(this, WebAssemblyInInitialChunkError);

    var moduleChains = getInitialModuleChains(module, requestShortener);
    var message = "WebAssembly module is included in initial chunk.\nThis is not allowed, because WebAssembly download and compilation must happen asynchronous.\nAdd an async splitpoint (i. e. import()) somewhere between your entrypoint and the WebAssembly module:\n".concat(moduleChains.map(function (s) {
      return "* ".concat(s);
    }).join("\n"));
    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebAssemblyInInitialChunkError).call(this, message));
    _this.name = "WebAssemblyInInitialChunkError";
    _this.hideStack = true;
    _this.module = module;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  return WebAssemblyInInitialChunkError;
}(WebpackError);