/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Template = require("../Template");

var WebWorkerMainTemplatePlugin =
/*#__PURE__*/
function () {
  function WebWorkerMainTemplatePlugin() {
    _classCallCheck(this, WebWorkerMainTemplatePlugin);
  }

  _createClass(WebWorkerMainTemplatePlugin, [{
    key: "apply",
    value: function apply(mainTemplate) {
      var needChunkOnDemandLoadingCode = function needChunkOnDemandLoadingCode(chunk) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = chunk.groupsIterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var chunkGroup = _step.value;
            if (chunkGroup.getNumberOfChildren() > 0) return true;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return false;
      };

      mainTemplate.hooks.localVars.tap("WebWorkerMainTemplatePlugin", function (source, chunk) {
        if (needChunkOnDemandLoadingCode(chunk)) {
          return Template.asString([source, "", "// object to store loaded chunks", '// "1" means "already loaded"', "var installedChunks = {", Template.indent(chunk.ids.map(function (id) {
            return "".concat(JSON.stringify(id), ": 1");
          }).join(",\n")), "};"]);
        }

        return source;
      });
      mainTemplate.hooks.requireEnsure.tap("WebWorkerMainTemplatePlugin", function (_, chunk, hash) {
        var chunkFilename = mainTemplate.outputOptions.chunkFilename;
        var chunkMaps = chunk.getChunkMaps();
        return Template.asString(["promises.push(Promise.resolve().then(function() {", Template.indent(['// "1" is the signal for "already loaded"', "if(!installedChunks[chunkId]) {", Template.indent(["importScripts(" + "__webpack_require__.p + " + mainTemplate.getAssetPath(JSON.stringify(chunkFilename), {
          hash: "\" + ".concat(mainTemplate.renderCurrentHashCode(hash), " + \""),
          hashWithLength: function hashWithLength(length) {
            return "\" + ".concat(mainTemplate.renderCurrentHashCode(hash, length), " + \"");
          },
          chunk: {
            id: '" + chunkId + "',
            hash: "\" + ".concat(JSON.stringify(chunkMaps.hash), "[chunkId] + \""),
            hashWithLength: function hashWithLength(length) {
              var shortChunkHashMap = Object.create(null);

              for (var _i = 0, _Object$keys = Object.keys(chunkMaps.hash); _i < _Object$keys.length; _i++) {
                var chunkId = _Object$keys[_i];

                if (typeof chunkMaps.hash[chunkId] === "string") {
                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
                }
              }

              return "\" + ".concat(JSON.stringify(shortChunkHashMap), "[chunkId] + \"");
            },
            contentHash: {
              javascript: "\" + ".concat(JSON.stringify(chunkMaps.contentHash.javascript), "[chunkId] + \"")
            },
            contentHashWithLength: {
              javascript: function javascript(length) {
                var shortContentHashMap = {};
                var contentHash = chunkMaps.contentHash.javascript;

                for (var _i2 = 0, _Object$keys2 = Object.keys(contentHash); _i2 < _Object$keys2.length; _i2++) {
                  var chunkId = _Object$keys2[_i2];

                  if (typeof contentHash[chunkId] === "string") {
                    shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);
                  }
                }

                return "\" + ".concat(JSON.stringify(shortContentHashMap), "[chunkId] + \"");
              }
            },
            name: "\" + (".concat(JSON.stringify(chunkMaps.name), "[chunkId]||chunkId) + \"")
          },
          contentHashType: "javascript"
        }) + ");"]), "}"]), "}));"]);
      });
      mainTemplate.hooks.bootstrap.tap("WebWorkerMainTemplatePlugin", function (source, chunk, hash) {
        if (needChunkOnDemandLoadingCode(chunk)) {
          var chunkCallbackName = mainTemplate.outputOptions.chunkCallbackName;
          var globalObject = mainTemplate.outputOptions.globalObject;
          return Template.asString([source, "".concat(globalObject, "[").concat(JSON.stringify(chunkCallbackName), "] = function webpackChunkCallback(chunkIds, moreModules) {"), Template.indent(["for(var moduleId in moreModules) {", Template.indent(mainTemplate.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")), "}", "while(chunkIds.length)", Template.indent("installedChunks[chunkIds.pop()] = 1;")]), "};"]);
        }

        return source;
      });
      mainTemplate.hooks.hotBootstrap.tap("WebWorkerMainTemplatePlugin", function (source, chunk, hash) {
        var hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;
        var hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;
        var hotUpdateFunction = mainTemplate.outputOptions.hotUpdateFunction;
        var globalObject = mainTemplate.outputOptions.globalObject;
        var currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {
          hash: "\" + ".concat(mainTemplate.renderCurrentHashCode(hash), " + \""),
          hashWithLength: function hashWithLength(length) {
            return "\" + ".concat(mainTemplate.renderCurrentHashCode(hash, length), " + \"");
          },
          chunk: {
            id: '" + chunkId + "'
          }
        });
        var currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {
          hash: "\" + ".concat(mainTemplate.renderCurrentHashCode(hash), " + \""),
          hashWithLength: function hashWithLength(length) {
            return "\" + ".concat(mainTemplate.renderCurrentHashCode(hash, length), " + \"");
          }
        });
        return source + "\n" + "var parentHotUpdateCallback = ".concat(globalObject, "[").concat(JSON.stringify(hotUpdateFunction), "];\n") + "".concat(globalObject, "[").concat(JSON.stringify(hotUpdateFunction), "] = ") + Template.getFunctionContent(require("./WebWorkerMainTemplate.runtime")).replace(/\/\/\$semicolon/g, ";").replace(/\$require\$/g, mainTemplate.requireFn).replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename).replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename).replace(/\$hash\$/g, JSON.stringify(hash));
      });
      mainTemplate.hooks.hash.tap("WebWorkerMainTemplatePlugin", function (hash) {
        hash.update("webworker");
        hash.update("4");
      });
    }
  }]);

  return WebWorkerMainTemplatePlugin;
}();

module.exports = WebWorkerMainTemplatePlugin;