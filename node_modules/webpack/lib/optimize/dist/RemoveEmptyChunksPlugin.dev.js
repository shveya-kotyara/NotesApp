/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RemoveEmptyChunksPlugin =
/*#__PURE__*/
function () {
  function RemoveEmptyChunksPlugin() {
    _classCallCheck(this, RemoveEmptyChunksPlugin);
  }

  _createClass(RemoveEmptyChunksPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("RemoveEmptyChunksPlugin", function (compilation) {
        var handler = function handler(chunks) {
          for (var i = chunks.length - 1; i >= 0; i--) {
            var chunk = chunks[i];

            if (chunk.isEmpty() && !chunk.hasRuntime() && !chunk.hasEntryModule()) {
              chunk.remove("empty");
              chunks.splice(i, 1);
            }
          }
        };

        compilation.hooks.optimizeChunksBasic.tap("RemoveEmptyChunksPlugin", handler);
        compilation.hooks.optimizeChunksAdvanced.tap("RemoveEmptyChunksPlugin", handler);
        compilation.hooks.optimizeExtractedChunksBasic.tap("RemoveEmptyChunksPlugin", handler);
        compilation.hooks.optimizeExtractedChunksAdvanced.tap("RemoveEmptyChunksPlugin", handler);
      });
    }
  }]);

  return RemoveEmptyChunksPlugin;
}();

module.exports = RemoveEmptyChunksPlugin;