/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict"; // TODO webpack 5 remove this plugin
// It has been splitted into separate plugins for modules and chunks

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var OccurrenceOrderPlugin =
/*#__PURE__*/
function () {
  function OccurrenceOrderPlugin(preferEntry) {
    _classCallCheck(this, OccurrenceOrderPlugin);

    if (preferEntry !== undefined && typeof preferEntry !== "boolean") {
      throw new Error("Argument should be a boolean.\nFor more info on this plugin, see https://webpack.js.org/plugins/");
    }

    this.preferEntry = preferEntry;
  }

  _createClass(OccurrenceOrderPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var preferEntry = this.preferEntry;
      compiler.hooks.compilation.tap("OccurrenceOrderPlugin", function (compilation) {
        compilation.hooks.optimizeModuleOrder.tap("OccurrenceOrderPlugin", function (modules) {
          var occursInInitialChunksMap = new Map();
          var occursInAllChunksMap = new Map();
          var initialChunkChunkMap = new Map();
          var entryCountMap = new Map();
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _m = _step.value;
              var initial = 0;
              var entry = 0;
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = undefined;

              try {
                for (var _iterator4 = _m.chunksIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var c = _step4.value;
                  if (c.canBeInitial()) initial++;
                  if (c.entryModule === _m) entry++;
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                    _iterator4["return"]();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }

              initialChunkChunkMap.set(_m, initial);
              entryCountMap.set(_m, entry);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var countOccursInEntry = function countOccursInEntry(sum, r) {
            if (!r.module) {
              return sum;
            }

            return sum + initialChunkChunkMap.get(r.module);
          };

          var countOccurs = function countOccurs(sum, r) {
            if (!r.module) {
              return sum;
            }

            var factor = 1;

            if (typeof r.dependency.getNumberOfIdOccurrences === "function") {
              factor = r.dependency.getNumberOfIdOccurrences();
            }

            if (factor === 0) {
              return sum;
            }

            return sum + factor * r.module.getNumberOfChunks();
          };

          if (preferEntry) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var m = _step2.value;
                var result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);
                occursInInitialChunksMap.set(m, result);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }

          var originalOrder = new Map();
          var i = 0;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _m2 = _step3.value;

              var _result = _m2.reasons.reduce(countOccurs, 0) + _m2.getNumberOfChunks() + entryCountMap.get(_m2);

              occursInAllChunksMap.set(_m2, _result);
              originalOrder.set(_m2, i++);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          modules.sort(function (a, b) {
            if (preferEntry) {
              var aEntryOccurs = occursInInitialChunksMap.get(a);
              var bEntryOccurs = occursInInitialChunksMap.get(b);
              if (aEntryOccurs > bEntryOccurs) return -1;
              if (aEntryOccurs < bEntryOccurs) return 1;
            }

            var aOccurs = occursInAllChunksMap.get(a);
            var bOccurs = occursInAllChunksMap.get(b);
            if (aOccurs > bOccurs) return -1;
            if (aOccurs < bOccurs) return 1;
            var orgA = originalOrder.get(a);
            var orgB = originalOrder.get(b);
            return orgA - orgB;
          });
        });
        compilation.hooks.optimizeChunkOrder.tap("OccurrenceOrderPlugin", function (chunks) {
          var occursInInitialChunksMap = new Map();
          var originalOrder = new Map();
          var i = 0;
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = chunks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var c = _step5.value;
              var occurs = 0;
              var _iteratorNormalCompletion6 = true;
              var _didIteratorError6 = false;
              var _iteratorError6 = undefined;

              try {
                for (var _iterator6 = c.groupsIterable[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                  var chunkGroup = _step6.value;
                  var _iteratorNormalCompletion7 = true;
                  var _didIteratorError7 = false;
                  var _iteratorError7 = undefined;

                  try {
                    for (var _iterator7 = chunkGroup.parentsIterable[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                      var parent = _step7.value;
                      if (parent.isInitial()) occurs++;
                    }
                  } catch (err) {
                    _didIteratorError7 = true;
                    _iteratorError7 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                        _iterator7["return"]();
                      }
                    } finally {
                      if (_didIteratorError7) {
                        throw _iteratorError7;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                    _iterator6["return"]();
                  }
                } finally {
                  if (_didIteratorError6) {
                    throw _iteratorError6;
                  }
                }
              }

              occursInInitialChunksMap.set(c, occurs);
              originalOrder.set(c, i++);
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }

          chunks.sort(function (a, b) {
            var aEntryOccurs = occursInInitialChunksMap.get(a);
            var bEntryOccurs = occursInInitialChunksMap.get(b);
            if (aEntryOccurs > bEntryOccurs) return -1;
            if (aEntryOccurs < bEntryOccurs) return 1;
            var aOccurs = a.getNumberOfGroups();
            var bOccurs = b.getNumberOfGroups();
            if (aOccurs > bOccurs) return -1;
            if (aOccurs < bOccurs) return 1;
            var orgA = originalOrder.get(a);
            var orgB = originalOrder.get(b);
            return orgA - orgB;
          });
        });
      });
    }
  }]);

  return OccurrenceOrderPlugin;
}();

module.exports = OccurrenceOrderPlugin;