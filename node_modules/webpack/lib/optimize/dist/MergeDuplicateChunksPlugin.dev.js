/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MergeDuplicateChunksPlugin =
/*#__PURE__*/
function () {
  function MergeDuplicateChunksPlugin() {
    _classCallCheck(this, MergeDuplicateChunksPlugin);
  }

  _createClass(MergeDuplicateChunksPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("MergeDuplicateChunksPlugin", function (compilation) {
        compilation.hooks.optimizeChunksBasic.tap("MergeDuplicateChunksPlugin", function (chunks) {
          // remember already tested chunks for performance
          var notDuplicates = new Set(); // for each chunk

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var chunk = _step.value;
              // track a Set of all chunk that could be duplicates
              var possibleDuplicates = void 0;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = chunk.modulesIterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var _module = _step2.value;

                  if (possibleDuplicates === undefined) {
                    // when possibleDuplicates is not yet set,
                    // create a new Set from chunks of the current module
                    // including only chunks with the same number of modules
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;

                    try {
                      for (var _iterator4 = _module.chunksIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var dup = _step4.value;

                        if (dup !== chunk && chunk.getNumberOfModules() === dup.getNumberOfModules() && !notDuplicates.has(dup)) {
                          // delay allocating the new Set until here, reduce memory pressure
                          if (possibleDuplicates === undefined) {
                            possibleDuplicates = new Set();
                          }

                          possibleDuplicates.add(dup);
                        }
                      } // when no chunk is possible we can break here

                    } catch (err) {
                      _didIteratorError4 = true;
                      _iteratorError4 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                          _iterator4["return"]();
                        }
                      } finally {
                        if (_didIteratorError4) {
                          throw _iteratorError4;
                        }
                      }
                    }

                    if (possibleDuplicates === undefined) break;
                  } else {
                    // validate existing possible duplicates
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                      for (var _iterator5 = possibleDuplicates[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var _dup = _step5.value;

                        // remove possible duplicate when module is not contained
                        if (!_dup.containsModule(_module)) {
                          possibleDuplicates["delete"](_dup);
                        }
                      } // when all chunks has been removed we can break here

                    } catch (err) {
                      _didIteratorError5 = true;
                      _iteratorError5 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                          _iterator5["return"]();
                        }
                      } finally {
                        if (_didIteratorError5) {
                          throw _iteratorError5;
                        }
                      }
                    }

                    if (possibleDuplicates.size === 0) break;
                  }
                } // when we found duplicates

              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              if (possibleDuplicates !== undefined && possibleDuplicates.size > 0) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = possibleDuplicates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var otherChunk = _step3.value;
                    if (otherChunk.hasRuntime() !== chunk.hasRuntime()) continue; // merge them

                    if (chunk.integrate(otherChunk, "duplicate")) {
                      chunks.splice(chunks.indexOf(otherChunk), 1);
                    }
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                      _iterator3["return"]();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              } // don't check already processed chunks twice


              notDuplicates.add(chunk);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      });
    }
  }]);

  return MergeDuplicateChunksPlugin;
}();

module.exports = MergeDuplicateChunksPlugin;