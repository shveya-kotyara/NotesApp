/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("../Compiler")} Compiler */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NaturalChunkOrderPlugin =
/*#__PURE__*/
function () {
  function NaturalChunkOrderPlugin() {
    _classCallCheck(this, NaturalChunkOrderPlugin);
  }

  _createClass(NaturalChunkOrderPlugin, [{
    key: "apply",

    /**
     * @param {Compiler} compiler webpack compiler
     * @returns {void}
     */
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("NaturalChunkOrderPlugin", function (compilation) {
        compilation.hooks.optimizeChunkOrder.tap("NaturalChunkOrderPlugin", function (chunks) {
          chunks.sort(function (chunkA, chunkB) {
            var a = chunkA.modulesIterable[Symbol.iterator]();
            var b = chunkB.modulesIterable[Symbol.iterator](); // eslint-disable-next-line no-constant-condition

            while (true) {
              var aItem = a.next();
              var bItem = b.next();
              if (aItem.done && bItem.done) return 0;
              if (aItem.done) return -1;
              if (bItem.done) return 1;
              var aModuleId = aItem.value.id;
              var bModuleId = bItem.value.id;
              if (aModuleId < bModuleId) return -1;
              if (aModuleId > bModuleId) return 1;
            }
          });
        });
      });
    }
  }]);

  return NaturalChunkOrderPlugin;
}();

module.exports = NaturalChunkOrderPlugin;