/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Queue = require("../util/Queue");

var _require = require("../util/SetHelpers"),
    intersect = _require.intersect;

var getParentChunksWithModule = function getParentChunksWithModule(currentChunk, module) {
  var chunks = [];
  var stack = new Set(currentChunk.parentsIterable);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = stack[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var chunk = _step.value;

      if (chunk.containsModule(module)) {
        chunks.push(chunk);
      } else {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = chunk.parentsIterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var parent = _step2.value;
            stack.add(parent);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return chunks;
};

var RemoveParentModulesPlugin =
/*#__PURE__*/
function () {
  function RemoveParentModulesPlugin() {
    _classCallCheck(this, RemoveParentModulesPlugin);
  }

  _createClass(RemoveParentModulesPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("RemoveParentModulesPlugin", function (compilation) {
        var handler = function handler(chunks, chunkGroups) {
          var queue = new Queue();
          var availableModulesMap = new WeakMap();
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = compilation.entrypoints.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _chunkGroup = _step3.value;
              // initialize available modules for chunks without parents
              availableModulesMap.set(_chunkGroup, new Set());
              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = undefined;

              try {
                for (var _iterator10 = _chunkGroup.childrenIterable[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var _child = _step10.value;
                  queue.enqueue(_child);
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                    _iterator10["return"]();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          while (queue.length > 0) {
            var chunkGroup = queue.dequeue();
            var availableModules = availableModulesMap.get(chunkGroup);
            var changed = false;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = chunkGroup.parentsIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var parent = _step4.value;
                var availableModulesInParent = availableModulesMap.get(parent);

                if (availableModulesInParent !== undefined) {
                  // If we know the available modules in parent: process these
                  if (availableModules === undefined) {
                    // if we have not own info yet: create new entry
                    availableModules = new Set(availableModulesInParent);
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;

                    try {
                      for (var _iterator6 = parent.chunks[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                        var chunk = _step6.value;
                        var _iteratorNormalCompletion7 = true;
                        var _didIteratorError7 = false;
                        var _iteratorError7 = undefined;

                        try {
                          for (var _iterator7 = chunk.modulesIterable[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var m = _step7.value;
                            availableModules.add(m);
                          }
                        } catch (err) {
                          _didIteratorError7 = true;
                          _iteratorError7 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                              _iterator7["return"]();
                            }
                          } finally {
                            if (_didIteratorError7) {
                              throw _iteratorError7;
                            }
                          }
                        }
                      }
                    } catch (err) {
                      _didIteratorError6 = true;
                      _iteratorError6 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                          _iterator6["return"]();
                        }
                      } finally {
                        if (_didIteratorError6) {
                          throw _iteratorError6;
                        }
                      }
                    }

                    availableModulesMap.set(chunkGroup, availableModules);
                    changed = true;
                  } else {
                    var _iteratorNormalCompletion8 = true;
                    var _didIteratorError8 = false;
                    var _iteratorError8 = undefined;

                    try {
                      for (var _iterator8 = availableModules[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                        var _m = _step8.value;

                        if (!parent.containsModule(_m) && !availableModulesInParent.has(_m)) {
                          availableModules["delete"](_m);
                          changed = true;
                        }
                      }
                    } catch (err) {
                      _didIteratorError8 = true;
                      _iteratorError8 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                          _iterator8["return"]();
                        }
                      } finally {
                        if (_didIteratorError8) {
                          throw _iteratorError8;
                        }
                      }
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            if (changed) {
              // if something changed: enqueue our children
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = chunkGroup.childrenIterable[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var child = _step5.value;
                  queue.enqueue(child);
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                    _iterator5["return"]();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }
            }
          } // now we have available modules for every chunk


          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            for (var _iterator9 = chunks[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var _chunk = _step9.value;
              var availableModulesSets = Array.from(_chunk.groupsIterable, function (chunkGroup) {
                return availableModulesMap.get(chunkGroup);
              });
              if (availableModulesSets.some(function (s) {
                return s === undefined;
              })) continue; // No info about this chunk group

              var _availableModules = availableModulesSets.length === 1 ? availableModulesSets[0] : intersect(availableModulesSets);

              var numberOfModules = _chunk.getNumberOfModules();

              var toRemove = new Set();

              if (numberOfModules < _availableModules.size) {
                var _iteratorNormalCompletion11 = true;
                var _didIteratorError11 = false;
                var _iteratorError11 = undefined;

                try {
                  for (var _iterator11 = _chunk.modulesIterable[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var _m2 = _step11.value;

                    if (_availableModules.has(_m2)) {
                      toRemove.add(_m2);
                    }
                  }
                } catch (err) {
                  _didIteratorError11 = true;
                  _iteratorError11 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                      _iterator11["return"]();
                    }
                  } finally {
                    if (_didIteratorError11) {
                      throw _iteratorError11;
                    }
                  }
                }
              } else {
                var _iteratorNormalCompletion12 = true;
                var _didIteratorError12 = false;
                var _iteratorError12 = undefined;

                try {
                  for (var _iterator12 = _availableModules[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var _m3 = _step12.value;

                    if (_chunk.containsModule(_m3)) {
                      toRemove.add(_m3);
                    }
                  }
                } catch (err) {
                  _didIteratorError12 = true;
                  _iteratorError12 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                      _iterator12["return"]();
                    }
                  } finally {
                    if (_didIteratorError12) {
                      throw _iteratorError12;
                    }
                  }
                }
              }

              var _iteratorNormalCompletion13 = true;
              var _didIteratorError13 = false;
              var _iteratorError13 = undefined;

              try {
                for (var _iterator13 = toRemove[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                  var _module = _step13.value;

                  _module.rewriteChunkInReasons(_chunk, getParentChunksWithModule(_chunk, _module));

                  _chunk.removeModule(_module);
                }
              } catch (err) {
                _didIteratorError13 = true;
                _iteratorError13 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                    _iterator13["return"]();
                  }
                } finally {
                  if (_didIteratorError13) {
                    throw _iteratorError13;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }
        };

        compilation.hooks.optimizeChunksBasic.tap("RemoveParentModulesPlugin", handler);
        compilation.hooks.optimizeExtractedChunksBasic.tap("RemoveParentModulesPlugin", handler);
      });
    }
  }]);

  return RemoveParentModulesPlugin;
}();

module.exports = RemoveParentModulesPlugin;