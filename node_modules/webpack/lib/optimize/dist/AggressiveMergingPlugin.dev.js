/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AggressiveMergingPlugin =
/*#__PURE__*/
function () {
  function AggressiveMergingPlugin(options) {
    _classCallCheck(this, AggressiveMergingPlugin);

    if (options !== undefined && _typeof(options) !== "object" || Array.isArray(options)) {
      throw new Error("Argument should be an options object. To use defaults, pass in nothing.\nFor more info on options, see https://webpack.js.org/plugins/");
    }

    this.options = options || {};
  }

  _createClass(AggressiveMergingPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;
      var minSizeReduce = options.minSizeReduce || 1.5;
      compiler.hooks.thisCompilation.tap("AggressiveMergingPlugin", function (compilation) {
        compilation.hooks.optimizeChunksAdvanced.tap("AggressiveMergingPlugin", function (chunks) {
          var combinations = [];
          chunks.forEach(function (a, idx) {
            if (a.canBeInitial()) return;

            for (var i = 0; i < idx; i++) {
              var b = chunks[i];
              if (b.canBeInitial()) continue;
              combinations.push({
                a: a,
                b: b,
                improvement: undefined
              });
            }
          });

          for (var _i = 0, _combinations = combinations; _i < _combinations.length; _i++) {
            var _pair = _combinations[_i];

            var a = _pair.b.size({
              chunkOverhead: 0
            });

            var b = _pair.a.size({
              chunkOverhead: 0
            });

            var ab = _pair.b.integratedSize(_pair.a, {
              chunkOverhead: 0
            });

            var newSize = void 0;

            if (ab === false) {
              _pair.improvement = false;
              return;
            } else {
              newSize = ab;
            }

            _pair.improvement = (a + b) / newSize;
          }

          combinations = combinations.filter(function (pair) {
            return pair.improvement !== false;
          });
          combinations.sort(function (a, b) {
            return b.improvement - a.improvement;
          });
          var pair = combinations[0];
          if (!pair) return;
          if (pair.improvement < minSizeReduce) return;

          if (pair.b.integrate(pair.a, "aggressive-merge")) {
            chunks.splice(chunks.indexOf(pair.a), 1);
            return true;
          }
        });
      });
    }
  }]);

  return AggressiveMergingPlugin;
}();

module.exports = AggressiveMergingPlugin;