/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var mm = require("micromatch");

var HarmonyExportImportedSpecifierDependency = require("../dependencies/HarmonyExportImportedSpecifierDependency");

var HarmonyImportSideEffectDependency = require("../dependencies/HarmonyImportSideEffectDependency");

var HarmonyImportSpecifierDependency = require("../dependencies/HarmonyImportSpecifierDependency");
/** @typedef {import("../Module")} Module */

/** @typedef {import("../Dependency")} Dependency */

/**
 * @typedef {Object} ExportInModule
 * @property {Module} module the module
 * @property {string} exportName the name of the export
 * @property {boolean} checked if the export is conditional
 */

/**
 * @typedef {Object} ReexportInfo
 * @property {Map<string, ExportInModule[]>} static
 * @property {Map<Module, Set<string>>} dynamic
 */

/**
 * @param {ReexportInfo} info info object
 * @param {string} exportName name of export
 * @returns {ExportInModule | undefined} static export
 */


var getMappingFromInfo = function getMappingFromInfo(info, exportName) {
  var staticMappings = info["static"].get(exportName);

  if (staticMappings !== undefined) {
    if (staticMappings.length === 1) return staticMappings[0];
    return undefined;
  }

  var dynamicMappings = Array.from(info.dynamic).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        _ = _ref2[0],
        ignored = _ref2[1];

    return !ignored.has(exportName);
  });

  if (dynamicMappings.length === 1) {
    return {
      module: dynamicMappings[0][0],
      exportName: exportName,
      checked: true
    };
  }

  return undefined;
};
/**
 * @param {ReexportInfo} info info object
 * @param {string} exportName name of export of source module
 * @param {Module} module the target module
 * @param {string} innerExportName name of export of target module
 * @param {boolean} checked true, if existence of target module is checked
 */


var addStaticReexport = function addStaticReexport(info, exportName, module, innerExportName, checked) {
  var mappings = info["static"].get(exportName);

  if (mappings !== undefined) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = mappings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var mapping = _step.value;

        if (mapping.module === module && mapping.exportName === innerExportName) {
          mapping.checked = mapping.checked && checked;
          return;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else {
    mappings = [];
    info["static"].set(exportName, mappings);
  }

  mappings.push({
    module: module,
    exportName: innerExportName,
    checked: checked
  });
};
/**
 * @param {ReexportInfo} info info object
 * @param {Module} module the reexport module
 * @param {Set<string>} ignored ignore list
 * @returns {void}
 */


var addDynamicReexport = function addDynamicReexport(info, module, ignored) {
  var existingList = info.dynamic.get(module);

  if (existingList !== undefined) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = existingList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var key = _step2.value;
        if (!ignored.has(key)) existingList["delete"](key);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  } else {
    info.dynamic.set(module, new Set(ignored));
  }
};

var SideEffectsFlagPlugin =
/*#__PURE__*/
function () {
  function SideEffectsFlagPlugin() {
    _classCallCheck(this, SideEffectsFlagPlugin);
  }

  _createClass(SideEffectsFlagPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.normalModuleFactory.tap("SideEffectsFlagPlugin", function (nmf) {
        nmf.hooks.module.tap("SideEffectsFlagPlugin", function (module, data) {
          var resolveData = data.resourceResolveData;

          if (resolveData && resolveData.descriptionFileData && resolveData.relativePath) {
            var sideEffects = resolveData.descriptionFileData.sideEffects;
            var hasSideEffects = SideEffectsFlagPlugin.moduleHasSideEffects(resolveData.relativePath, sideEffects);

            if (!hasSideEffects) {
              module.factoryMeta.sideEffectFree = true;
            }
          }

          return module;
        });
        nmf.hooks.module.tap("SideEffectsFlagPlugin", function (module, data) {
          if (data.settings.sideEffects === false) {
            module.factoryMeta.sideEffectFree = true;
          } else if (data.settings.sideEffects === true) {
            module.factoryMeta.sideEffectFree = false;
          }
        });
      });
      compiler.hooks.compilation.tap("SideEffectsFlagPlugin", function (compilation) {
        compilation.hooks.optimizeDependencies.tap("SideEffectsFlagPlugin", function (modules) {
          /** @type {Map<Module, ReexportInfo>} */
          var reexportMaps = new Map(); // Capture reexports of sideEffectFree modules

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _module = _step3.value;

              /** @type {Dependency[]} */
              var removeDependencies = [];
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = undefined;

              try {
                for (var _iterator7 = _module.dependencies[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var dep = _step7.value;

                  if (dep instanceof HarmonyImportSideEffectDependency) {
                    if (dep.module && dep.module.factoryMeta.sideEffectFree) {
                      removeDependencies.push(dep);
                    }
                  } else if (dep instanceof HarmonyExportImportedSpecifierDependency) {
                    if (_module.factoryMeta.sideEffectFree) {
                      var mode = dep.getMode(true);

                      if (mode.type === "safe-reexport" || mode.type === "checked-reexport" || mode.type === "dynamic-reexport" || mode.type === "reexport-non-harmony-default" || mode.type === "reexport-non-harmony-default-strict" || mode.type === "reexport-named-default") {
                        var info = reexportMaps.get(_module);

                        if (!info) {
                          reexportMaps.set(_module, info = {
                            "static": new Map(),
                            dynamic: new Map()
                          });
                        }

                        var targetModule = dep._module;

                        switch (mode.type) {
                          case "safe-reexport":
                            var _iteratorNormalCompletion8 = true;
                            var _didIteratorError8 = false;
                            var _iteratorError8 = undefined;

                            try {
                              for (var _iterator8 = mode.map[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                                var _step8$value = _slicedToArray(_step8.value, 2),
                                    key = _step8$value[0],
                                    id = _step8$value[1];

                                if (id) {
                                  addStaticReexport(info, key, targetModule, id, false);
                                }
                              }
                            } catch (err) {
                              _didIteratorError8 = true;
                              _iteratorError8 = err;
                            } finally {
                              try {
                                if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                                  _iterator8["return"]();
                                }
                              } finally {
                                if (_didIteratorError8) {
                                  throw _iteratorError8;
                                }
                              }
                            }

                            break;

                          case "checked-reexport":
                            var _iteratorNormalCompletion9 = true;
                            var _didIteratorError9 = false;
                            var _iteratorError9 = undefined;

                            try {
                              for (var _iterator9 = mode.map[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                                var _step9$value = _slicedToArray(_step9.value, 2),
                                    _key = _step9$value[0],
                                    _id = _step9$value[1];

                                if (_id) {
                                  addStaticReexport(info, _key, targetModule, _id, true);
                                }
                              }
                            } catch (err) {
                              _didIteratorError9 = true;
                              _iteratorError9 = err;
                            } finally {
                              try {
                                if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                                  _iterator9["return"]();
                                }
                              } finally {
                                if (_didIteratorError9) {
                                  throw _iteratorError9;
                                }
                              }
                            }

                            break;

                          case "dynamic-reexport":
                            addDynamicReexport(info, targetModule, mode.ignored);
                            break;

                          case "reexport-non-harmony-default":
                          case "reexport-non-harmony-default-strict":
                          case "reexport-named-default":
                            addStaticReexport(info, mode.name, targetModule, "default", false);
                            break;
                        }
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                    _iterator7["return"]();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }
            } // Flatten reexports

          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = reexportMaps.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var _info = _step4.value;
              var dynamicReexports = _info.dynamic;
              _info.dynamic = new Map();
              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = undefined;

              try {
                for (var _iterator10 = dynamicReexports[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var reexport = _step10.value;

                  var _reexport = _slicedToArray(reexport, 2),
                      _targetModule = _reexport[0],
                      ignored = _reexport[1];

                  for (;;) {
                    var innerInfo = reexportMaps.get(_targetModule);
                    if (!innerInfo) break;
                    var _iteratorNormalCompletion11 = true;
                    var _didIteratorError11 = false;
                    var _iteratorError11 = undefined;

                    try {
                      for (var _iterator11 = innerInfo["static"][Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                        var _step11$value = _slicedToArray(_step11.value, 2),
                            _key2 = _step11$value[0],
                            reexports = _step11$value[1];

                        if (ignored.has(_key2)) continue;
                        var _iteratorNormalCompletion13 = true;
                        var _didIteratorError13 = false;
                        var _iteratorError13 = undefined;

                        try {
                          for (var _iterator13 = reexports[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                            var _step13$value = _step13.value,
                                _module2 = _step13$value.module,
                                exportName = _step13$value.exportName,
                                checked = _step13$value.checked;
                            addStaticReexport(_info, _key2, _module2, exportName, checked);
                          }
                        } catch (err) {
                          _didIteratorError13 = true;
                          _iteratorError13 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                              _iterator13["return"]();
                            }
                          } finally {
                            if (_didIteratorError13) {
                              throw _iteratorError13;
                            }
                          }
                        }
                      } // Follow dynamic reexport if there is only one

                    } catch (err) {
                      _didIteratorError11 = true;
                      _iteratorError11 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                          _iterator11["return"]();
                        }
                      } finally {
                        if (_didIteratorError11) {
                          throw _iteratorError11;
                        }
                      }
                    }

                    if (innerInfo.dynamic.size !== 1) {
                      // When there are more then one, we don't know which one
                      break;
                    }

                    ignored = new Set(ignored);
                    var _iteratorNormalCompletion12 = true;
                    var _didIteratorError12 = false;
                    var _iteratorError12 = undefined;

                    try {
                      for (var _iterator12 = innerInfo.dynamic[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                        var _step12$value = _slicedToArray(_step12.value, 2),
                            innerModule = _step12$value[0],
                            innerIgnored = _step12$value[1];

                        var _iteratorNormalCompletion14 = true;
                        var _didIteratorError14 = false;
                        var _iteratorError14 = undefined;

                        try {
                          for (var _iterator14 = innerIgnored[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                            var _key3 = _step14.value;
                            if (ignored.has(_key3)) continue; // This reexports ends here

                            addStaticReexport(_info, _key3, _targetModule, _key3, true);
                            ignored.add(_key3);
                          }
                        } catch (err) {
                          _didIteratorError14 = true;
                          _iteratorError14 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                              _iterator14["return"]();
                            }
                          } finally {
                            if (_didIteratorError14) {
                              throw _iteratorError14;
                            }
                          }
                        }

                        _targetModule = innerModule;
                      }
                    } catch (err) {
                      _didIteratorError12 = true;
                      _iteratorError12 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                          _iterator12["return"]();
                        }
                      } finally {
                        if (_didIteratorError12) {
                          throw _iteratorError12;
                        }
                      }
                    }
                  } // Update reexport as all other cases has been handled


                  addDynamicReexport(_info, _targetModule, ignored);
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                    _iterator10["return"]();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = reexportMaps.values()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var _info2 = _step5.value;
              var staticReexports = _info2["static"];
              _info2["static"] = new Map();
              var _iteratorNormalCompletion15 = true;
              var _didIteratorError15 = false;
              var _iteratorError15 = undefined;

              try {
                for (var _iterator15 = staticReexports[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                  var _step15$value = _slicedToArray(_step15.value, 2),
                      _key4 = _step15$value[0],
                      _reexports = _step15$value[1];

                  var _iteratorNormalCompletion16 = true;
                  var _didIteratorError16 = false;
                  var _iteratorError16 = undefined;

                  try {
                    for (var _iterator16 = _reexports[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                      var mapping = _step16.value;

                      for (;;) {
                        var _innerInfo = reexportMaps.get(mapping.module);

                        if (!_innerInfo) break;
                        var newMapping = getMappingFromInfo(_innerInfo, mapping.exportName);
                        if (!newMapping) break;
                        mapping = newMapping;
                      }

                      addStaticReexport(_info2, _key4, mapping.module, mapping.exportName, mapping.checked);
                    }
                  } catch (err) {
                    _didIteratorError16 = true;
                    _iteratorError16 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                        _iterator16["return"]();
                      }
                    } finally {
                      if (_didIteratorError16) {
                        throw _iteratorError16;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                    _iterator15["return"]();
                  }
                } finally {
                  if (_didIteratorError15) {
                    throw _iteratorError15;
                  }
                }
              }
            } // Update imports along the reexports from sideEffectFree modules

          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }

          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = reexportMaps[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var pair = _step6.value;
              var _module3 = pair[0];
              var _info3 = pair[1];
              var newReasons = undefined;

              for (var i = 0; i < _module3.reasons.length; i++) {
                var reason = _module3.reasons[i];
                var _dep = reason.dependency;

                if ((_dep instanceof HarmonyExportImportedSpecifierDependency || _dep instanceof HarmonyImportSpecifierDependency && !_dep.namespaceObjectAsContext) && _dep._id) {
                  var _mapping = getMappingFromInfo(_info3, _dep._id);

                  if (_mapping) {
                    _dep.redirectedModule = _mapping.module;
                    _dep.redirectedId = _mapping.exportName;

                    _mapping.module.addReason(reason.module, _dep, reason.explanation ? reason.explanation + " (skipped side-effect-free modules)" : "(skipped side-effect-free modules)"); // removing the currect reason, by not adding it to the newReasons array
                    // lazily create the newReasons array


                    if (newReasons === undefined) {
                      newReasons = i === 0 ? [] : _module3.reasons.slice(0, i);
                    }

                    continue;
                  }
                }

                if (newReasons !== undefined) newReasons.push(reason);
              }

              if (newReasons !== undefined) {
                _module3.reasons = newReasons;
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        });
      });
    }
  }], [{
    key: "moduleHasSideEffects",
    value: function moduleHasSideEffects(moduleName, flagValue) {
      switch (_typeof(flagValue)) {
        case "undefined":
          return true;

        case "boolean":
          return flagValue;

        case "string":
          if (process.platform === "win32") {
            flagValue = flagValue.replace(/\\/g, "/");
          }

          return mm.isMatch(moduleName, flagValue, {
            matchBase: true
          });

        case "object":
          return flagValue.some(function (glob) {
            return SideEffectsFlagPlugin.moduleHasSideEffects(moduleName, glob);
          });
      }
    }
  }]);

  return SideEffectsFlagPlugin;
}();

module.exports = SideEffectsFlagPlugin;