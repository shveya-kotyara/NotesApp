/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var validateOptions = require("schema-utils");

var schema = require("../../schemas/plugins/optimize/OccurrenceOrderModuleIdsPlugin.json");
/** @typedef {import("../../declarations/plugins/optimize/OccurrenceOrderModuleIdsPlugin").OccurrenceOrderModuleIdsPluginOptions} OccurrenceOrderModuleIdsPluginOptions */


var OccurrenceOrderModuleIdsPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {OccurrenceOrderModuleIdsPluginOptions=} options options object
   */
  function OccurrenceOrderModuleIdsPlugin() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, OccurrenceOrderModuleIdsPlugin);

    validateOptions(schema, options, "Occurrence Order Module Ids Plugin");
    this.options = options;
  }

  _createClass(OccurrenceOrderModuleIdsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var prioritiseInitial = this.options.prioritiseInitial;
      compiler.hooks.compilation.tap("OccurrenceOrderModuleIdsPlugin", function (compilation) {
        compilation.hooks.optimizeModuleOrder.tap("OccurrenceOrderModuleIdsPlugin", function (modules) {
          var occursInInitialChunksMap = new Map();
          var occursInAllChunksMap = new Map();
          var initialChunkChunkMap = new Map();
          var entryCountMap = new Map();
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _m = _step.value;
              var initial = 0;
              var entry = 0;
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = undefined;

              try {
                for (var _iterator4 = _m.chunksIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var c = _step4.value;
                  if (c.canBeInitial()) initial++;
                  if (c.entryModule === _m) entry++;
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                    _iterator4["return"]();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }

              initialChunkChunkMap.set(_m, initial);
              entryCountMap.set(_m, entry);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var countOccursInEntry = function countOccursInEntry(sum, r) {
            if (!r.module) {
              return sum;
            }

            var count = initialChunkChunkMap.get(r.module);

            if (!count) {
              return sum;
            }

            return sum + count;
          };

          var countOccurs = function countOccurs(sum, r) {
            if (!r.module) {
              return sum;
            }

            var factor = 1;

            if (typeof r.dependency.getNumberOfIdOccurrences === "function") {
              factor = r.dependency.getNumberOfIdOccurrences();
            }

            if (factor === 0) {
              return sum;
            }

            return sum + factor * r.module.getNumberOfChunks();
          };

          if (prioritiseInitial) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var m = _step2.value;
                var result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);
                occursInInitialChunksMap.set(m, result);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }

          var originalOrder = new Map();
          var i = 0;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = modules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _m2 = _step3.value;

              var _result = _m2.reasons.reduce(countOccurs, 0) + _m2.getNumberOfChunks() + entryCountMap.get(_m2);

              occursInAllChunksMap.set(_m2, _result);
              originalOrder.set(_m2, i++);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          modules.sort(function (a, b) {
            if (prioritiseInitial) {
              var aEntryOccurs = occursInInitialChunksMap.get(a);
              var bEntryOccurs = occursInInitialChunksMap.get(b);
              if (aEntryOccurs > bEntryOccurs) return -1;
              if (aEntryOccurs < bEntryOccurs) return 1;
            }

            var aOccurs = occursInAllChunksMap.get(a);
            var bOccurs = occursInAllChunksMap.get(b);
            if (aOccurs > bOccurs) return -1;
            if (aOccurs < bOccurs) return 1;
            var orgA = originalOrder.get(a);
            var orgB = originalOrder.get(b);
            return orgA - orgB;
          });
        });
      });
    }
  }]);

  return OccurrenceOrderModuleIdsPlugin;
}();

module.exports = OccurrenceOrderModuleIdsPlugin;