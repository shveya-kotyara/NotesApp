/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var validateOptions = require("schema-utils");

var schema = require("../../schemas/plugins/optimize/OccurrenceOrderChunkIdsPlugin.json");
/** @typedef {import("../../declarations/plugins/optimize/OccurrenceOrderChunkIdsPlugin").OccurrenceOrderChunkIdsPluginOptions} OccurrenceOrderChunkIdsPluginOptions */


var OccurrenceOrderChunkIdsPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {OccurrenceOrderChunkIdsPluginOptions=} options options object
   */
  function OccurrenceOrderChunkIdsPlugin() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, OccurrenceOrderChunkIdsPlugin);

    validateOptions(schema, options, "Occurrence Order Chunk Ids Plugin");
    this.options = options;
  }

  _createClass(OccurrenceOrderChunkIdsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var prioritiseInitial = this.options.prioritiseInitial;
      compiler.hooks.compilation.tap("OccurrenceOrderChunkIdsPlugin", function (compilation) {
        compilation.hooks.optimizeChunkOrder.tap("OccurrenceOrderChunkIdsPlugin", function (chunks) {
          var occursInInitialChunksMap = new Map();
          var originalOrder = new Map();
          var i = 0;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var c = _step.value;
              var occurs = 0;
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = c.groupsIterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var chunkGroup = _step2.value;
                  var _iteratorNormalCompletion3 = true;
                  var _didIteratorError3 = false;
                  var _iteratorError3 = undefined;

                  try {
                    for (var _iterator3 = chunkGroup.parentsIterable[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                      var parent = _step3.value;
                      if (parent.isInitial()) occurs++;
                    }
                  } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                        _iterator3["return"]();
                      }
                    } finally {
                      if (_didIteratorError3) {
                        throw _iteratorError3;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              occursInInitialChunksMap.set(c, occurs);
              originalOrder.set(c, i++);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          chunks.sort(function (a, b) {
            if (prioritiseInitial) {
              var aEntryOccurs = occursInInitialChunksMap.get(a);
              var bEntryOccurs = occursInInitialChunksMap.get(b);
              if (aEntryOccurs > bEntryOccurs) return -1;
              if (aEntryOccurs < bEntryOccurs) return 1;
            }

            var aOccurs = a.getNumberOfGroups();
            var bOccurs = b.getNumberOfGroups();
            if (aOccurs > bOccurs) return -1;
            if (aOccurs < bOccurs) return 1;
            var orgA = originalOrder.get(a);
            var orgB = originalOrder.get(b);
            return orgA - orgB;
          });
        });
      });
    }
  }]);

  return OccurrenceOrderChunkIdsPlugin;
}();

module.exports = OccurrenceOrderChunkIdsPlugin;