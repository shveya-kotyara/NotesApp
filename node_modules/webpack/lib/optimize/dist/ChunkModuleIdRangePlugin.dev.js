/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var sortByIndex = function sortByIndex(a, b) {
  return a.index - b.index;
};

var sortByIndex2 = function sortByIndex2(a, b) {
  return a.index2 - b.index2;
};

var ChunkModuleIdRangePlugin =
/*#__PURE__*/
function () {
  function ChunkModuleIdRangePlugin(options) {
    _classCallCheck(this, ChunkModuleIdRangePlugin);

    this.options = options;
  }

  _createClass(ChunkModuleIdRangePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;
      compiler.hooks.compilation.tap("ChunkModuleIdRangePlugin", function (compilation) {
        compilation.hooks.moduleIds.tap("ChunkModuleIdRangePlugin", function (modules) {
          var chunk = compilation.chunks.find(function (chunk) {
            return chunk.name === options.name;
          });

          if (!chunk) {
            throw new Error("ChunkModuleIdRangePlugin: Chunk with name '".concat(options.name, "\"' was not found"));
          }

          var chunkModules;

          if (options.order) {
            chunkModules = Array.from(chunk.modulesIterable);

            switch (options.order) {
              case "index":
                chunkModules.sort(sortByIndex);
                break;

              case "index2":
                chunkModules.sort(sortByIndex2);
                break;

              default:
                throw new Error("ChunkModuleIdRangePlugin: unexpected value of order");
            }
          } else {
            chunkModules = modules.filter(function (m) {
              return m.chunksIterable.has(chunk);
            });
          }

          var currentId = options.start || 0;

          for (var i = 0; i < chunkModules.length; i++) {
            var m = chunkModules[i];

            if (m.id === null) {
              m.id = currentId++;
            }

            if (options.end && currentId > options.end) break;
          }
        });
      });
    }
  }]);

  return ChunkModuleIdRangePlugin;
}();

module.exports = ChunkModuleIdRangePlugin;