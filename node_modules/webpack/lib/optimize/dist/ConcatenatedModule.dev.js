/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Module = require("../Module");

var Template = require("../Template");

var Parser = require("../Parser");

var eslintScope = require("eslint-scope");

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource,
    ReplaceSource = _require.ReplaceSource;

var DependencyReference = require("../dependencies/DependencyReference");

var HarmonyImportDependency = require("../dependencies/HarmonyImportDependency");

var HarmonyImportSideEffectDependency = require("../dependencies/HarmonyImportSideEffectDependency");

var HarmonyImportSpecifierDependency = require("../dependencies/HarmonyImportSpecifierDependency");

var HarmonyExportSpecifierDependency = require("../dependencies/HarmonyExportSpecifierDependency");

var HarmonyExportExpressionDependency = require("../dependencies/HarmonyExportExpressionDependency");

var HarmonyExportImportedSpecifierDependency = require("../dependencies/HarmonyExportImportedSpecifierDependency");

var HarmonyCompatibilityDependency = require("../dependencies/HarmonyCompatibilityDependency");

var createHash = require("../util/createHash");
/** @typedef {import("../Dependency")} Dependency */

/** @typedef {import("../Compilation")} Compilation */

/** @typedef {import("../util/createHash").Hash} Hash */

/** @typedef {import("../RequestShortener")} RequestShortener */


var joinIterableWithComma = function joinIterableWithComma(iterable) {
  // This is more performant than Array.from().join(", ")
  // as it doesn't create an array
  var str = "";
  var first = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;

      if (first) {
        first = false;
      } else {
        str += ", ";
      }

      str += item;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return str;
};
/**
 * @typedef {Object} ConcatenationEntry
 * @property {"concatenated" | "external"} type
 * @property {Module} module
 */


var ensureNsObjSource = function ensureNsObjSource(info, moduleToInfoMap, requestShortener, strictHarmonyModule) {
  if (!info.hasNamespaceObject) {
    info.hasNamespaceObject = true;
    var name = info.exportMap.get(true);
    var nsObj = ["var ".concat(name, " = {};"), "__webpack_require__.r(".concat(name, ");")];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = info.module.buildMeta.providedExports[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var exportName = _step2.value;
        var finalName = getFinalName(info, exportName, moduleToInfoMap, requestShortener, false, strictHarmonyModule);
        nsObj.push("__webpack_require__.d(".concat(name, ", ").concat(JSON.stringify(exportName), ", function() { return ").concat(finalName, "; });"));
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    info.namespaceObjectSource = nsObj.join("\n") + "\n";
  }
};

var getExternalImport = function getExternalImport(importedModule, info, exportName, asCall, strictHarmonyModule) {
  var used = importedModule.isUsed(exportName);
  if (!used) return "/* unused reexport */undefined";
  var comment = used !== exportName ? " ".concat(Template.toNormalComment(exportName)) : "";

  switch (importedModule.buildMeta.exportsType) {
    case "named":
      if (exportName === "default") {
        return info.name;
      } else if (exportName === true) {
        info.interopNamespaceObjectUsed = true;
        return info.interopNamespaceObjectName;
      } else {
        break;
      }

    case "namespace":
      if (exportName === true) {
        return info.name;
      } else {
        break;
      }

    default:
      if (strictHarmonyModule) {
        if (exportName === "default") {
          return info.name;
        } else if (exportName === true) {
          info.interopNamespaceObjectUsed = true;
          return info.interopNamespaceObjectName;
        } else {
          return "/* non-default import from non-esm module */undefined";
        }
      } else {
        if (exportName === "default") {
          info.interopDefaultAccessUsed = true;
          return asCall ? "".concat(info.interopDefaultAccessName, "()") : "".concat(info.interopDefaultAccessName, ".a");
        } else if (exportName === true) {
          return info.name;
        } else {
          break;
        }
      }

  }

  var reference = "".concat(info.name, "[").concat(JSON.stringify(used)).concat(comment, "]");
  if (asCall) return "Object(".concat(reference, ")");
  return reference;
};

var getFinalName = function getFinalName(info, exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule) {
  var alreadyVisited = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Set();

  switch (info.type) {
    case "concatenated":
      {
        var directExport = info.exportMap.get(exportName);

        if (directExport) {
          if (exportName === true) {
            ensureNsObjSource(info, moduleToInfoMap, requestShortener, strictHarmonyModule);
          } else if (!info.module.isUsed(exportName)) {
            return "/* unused export */ undefined";
          }

          if (info.globalExports.has(directExport)) {
            return directExport;
          }

          var name = info.internalNames.get(directExport);

          if (!name) {
            throw new Error("The export \"".concat(directExport, "\" in \"").concat(info.module.readableIdentifier(requestShortener), "\" has no internal name"));
          }

          return name;
        }

        var reexport = info.reexportMap.get(exportName);

        if (reexport) {
          if (alreadyVisited.has(reexport)) {
            throw new Error("Circular reexports ".concat(Array.from(alreadyVisited, function (e) {
              return "\"".concat(e.module.readableIdentifier(requestShortener), "\".").concat(e.exportName);
            }).join(" --> "), " -(circular)-> \"").concat(reexport.module.readableIdentifier(requestShortener), "\".").concat(reexport.exportName));
          }

          alreadyVisited.add(reexport);
          var refInfo = moduleToInfoMap.get(reexport.module);

          if (refInfo) {
            // module is in the concatenation
            return getFinalName(refInfo, reexport.exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule, alreadyVisited);
          }
        }

        var problem = "Cannot get final name for export \"".concat(exportName, "\" in \"").concat(info.module.readableIdentifier(requestShortener), "\"") + " (known exports: ".concat(Array.from(info.exportMap.keys()).filter(function (name) {
          return name !== true;
        }).join(" "), ", ") + "known reexports: ".concat(Array.from(info.reexportMap.keys()).join(" "), ")");
        return "".concat(Template.toNormalComment(problem), " undefined");
      }

    case "external":
      {
        var importedModule = info.module;
        return getExternalImport(importedModule, info, exportName, asCall, strictHarmonyModule);
      }
  }
};

var addScopeSymbols1 = function addScopeSymbols1(s, nameSet, scopeSet) {
  var scope = s;

  while (scope) {
    if (scopeSet.has(scope)) break;
    scopeSet.add(scope);
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = scope.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var variable = _step3.value;
        nameSet.add(variable.name);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    scope = scope.upper;
  }
};

var addScopeSymbols2 = function addScopeSymbols2(s, nameSet, scopeSet1, scopeSet2) {
  var scope = s;

  while (scope) {
    if (scopeSet1.has(scope)) break;
    if (scopeSet2.has(scope)) break;
    scopeSet1.add(scope);
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = scope.variables[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var variable = _step4.value;
        nameSet.add(variable.name);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    scope = scope.upper;
  }
};

var getAllReferences = function getAllReferences(variable) {
  var set = variable.references; // Look for inner scope variables too (like in class Foo { t() { Foo } })

  var identifiers = new Set(variable.identifiers);
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = variable.scope.childScopes[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var scope = _step5.value;
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = scope.variables[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var innerVar = _step6.value;

          if (innerVar.identifiers.some(function (id) {
            return identifiers.has(id);
          })) {
            set = set.concat(innerVar.references);
            break;
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  return set;
};

var getPathInAst = function getPathInAst(ast, node) {
  if (ast === node) {
    return [];
  }

  var nr = node.range;

  var enterNode = function enterNode(n) {
    if (!n) return undefined;
    var r = n.range;

    if (r) {
      if (r[0] <= nr[0] && r[1] >= nr[1]) {
        var path = getPathInAst(n, node);

        if (path) {
          path.push(n);
          return path;
        }
      }
    }

    return undefined;
  };

  var i;

  if (Array.isArray(ast)) {
    for (i = 0; i < ast.length; i++) {
      var enterResult = enterNode(ast[i]);
      if (enterResult !== undefined) return enterResult;
    }
  } else if (ast && _typeof(ast) === "object") {
    var keys = Object.keys(ast);

    for (i = 0; i < keys.length; i++) {
      var value = ast[keys[i]];

      if (Array.isArray(value)) {
        var pathResult = getPathInAst(value, node);
        if (pathResult !== undefined) return pathResult;
      } else if (value && _typeof(value) === "object") {
        var _enterResult = enterNode(value);

        if (_enterResult !== undefined) return _enterResult;
      }
    }
  }
};

var getHarmonyExportImportedSpecifierDependencyExports = function getHarmonyExportImportedSpecifierDependencyExports(dep) {
  var importModule = dep._module;
  if (!importModule) return [];

  if (dep._id) {
    // export { named } from "module"
    return [{
      name: dep.name,
      id: dep._id,
      module: importModule
    }];
  }

  if (dep.name) {
    // export * as abc from "module"
    return [{
      name: dep.name,
      id: true,
      module: importModule
    }];
  } // export * from "module"


  return importModule.buildMeta.providedExports.filter(function (exp) {
    return exp !== "default" && !dep.activeExports.has(exp);
  }).map(function (exp) {
    return {
      name: exp,
      id: exp,
      module: importModule
    };
  });
};

var ConcatenatedModule =
/*#__PURE__*/
function (_Module) {
  _inherits(ConcatenatedModule, _Module);

  function ConcatenatedModule(rootModule, modules, concatenationList) {
    var _this;

    _classCallCheck(this, ConcatenatedModule);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConcatenatedModule).call(this, "javascript/esm", null));

    _get(_getPrototypeOf(ConcatenatedModule.prototype), "setChunks", _assertThisInitialized(_this)).call(_assertThisInitialized(_this), rootModule._chunks); // Info from Factory


    _this.rootModule = rootModule;
    _this.factoryMeta = rootModule.factoryMeta; // Info from Compilation

    _this.index = rootModule.index;
    _this.index2 = rootModule.index2;
    _this.depth = rootModule.depth; // Info from Optimization

    _this.used = rootModule.used;
    _this.usedExports = rootModule.usedExports; // Info from Build

    _this.buildInfo = {
      strict: true,
      cacheable: modules.every(function (m) {
        return m.buildInfo.cacheable;
      }),
      moduleArgument: rootModule.buildInfo.moduleArgument,
      exportsArgument: rootModule.buildInfo.exportsArgument,
      fileDependencies: new Set(),
      contextDependencies: new Set(),
      assets: undefined
    };
    _this.built = modules.some(function (m) {
      return m.built;
    });
    _this.buildMeta = rootModule.buildMeta; // Caching

    _this._numberOfConcatenatedModules = modules.length; // Graph

    var modulesSet = new Set(modules);
    _this.reasons = rootModule.reasons.filter(function (reason) {
      return !(reason.dependency instanceof HarmonyImportDependency) || !modulesSet.has(reason.module);
    });
    _this.dependencies = [];
    _this.blocks = [];
    _this.warnings = [];
    _this.errors = [];
    _this._orderedConcatenationList = concatenationList || ConcatenatedModule.createConcatenationList(rootModule, modulesSet, null);
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = _this._orderedConcatenationList[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var info = _step7.value;

        if (info.type === "concatenated") {
          var m = info.module; // populate dependencies

          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = m.dependencies.filter(function (dep) {
              return !(dep instanceof HarmonyImportDependency) || !modulesSet.has(dep._module);
            })[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var d = _step8.value;

              _this.dependencies.push(d);
            } // populate blocks

          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }

          var _iteratorNormalCompletion9 = true;
          var _didIteratorError9 = false;
          var _iteratorError9 = undefined;

          try {
            for (var _iterator9 = m.blocks[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
              var _d2 = _step9.value;

              _this.blocks.push(_d2);
            } // populate file dependencies

          } catch (err) {
            _didIteratorError9 = true;
            _iteratorError9 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                _iterator9["return"]();
              }
            } finally {
              if (_didIteratorError9) {
                throw _iteratorError9;
              }
            }
          }

          if (m.buildInfo.fileDependencies) {
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
              for (var _iterator10 = m.buildInfo.fileDependencies[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                var file = _step10.value;

                _this.buildInfo.fileDependencies.add(file);
              }
            } catch (err) {
              _didIteratorError10 = true;
              _iteratorError10 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                  _iterator10["return"]();
                }
              } finally {
                if (_didIteratorError10) {
                  throw _iteratorError10;
                }
              }
            }
          } // populate context dependencies


          if (m.buildInfo.contextDependencies) {
            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
              for (var _iterator11 = m.buildInfo.contextDependencies[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                var context = _step11.value;

                _this.buildInfo.contextDependencies.add(context);
              }
            } catch (err) {
              _didIteratorError11 = true;
              _iteratorError11 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                  _iterator11["return"]();
                }
              } finally {
                if (_didIteratorError11) {
                  throw _iteratorError11;
                }
              }
            }
          } // populate warnings


          var _iteratorNormalCompletion12 = true;
          var _didIteratorError12 = false;
          var _iteratorError12 = undefined;

          try {
            for (var _iterator12 = m.warnings[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
              var warning = _step12.value;

              _this.warnings.push(warning);
            } // populate errors

          } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                _iterator12["return"]();
              }
            } finally {
              if (_didIteratorError12) {
                throw _iteratorError12;
              }
            }
          }

          var _iteratorNormalCompletion13 = true;
          var _didIteratorError13 = false;
          var _iteratorError13 = undefined;

          try {
            for (var _iterator13 = m.errors[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
              var error = _step13.value;

              _this.errors.push(error);
            }
          } catch (err) {
            _didIteratorError13 = true;
            _iteratorError13 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                _iterator13["return"]();
              }
            } finally {
              if (_didIteratorError13) {
                throw _iteratorError13;
              }
            }
          }

          if (m.buildInfo.assets) {
            if (_this.buildInfo.assets === undefined) {
              _this.buildInfo.assets = Object.create(null);
            }

            Object.assign(_this.buildInfo.assets, m.buildInfo.assets);
          }

          if (m.buildInfo.assetsInfo) {
            if (_this.buildInfo.assetsInfo === undefined) {
              _this.buildInfo.assetsInfo = new Map();
            }

            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
              for (var _iterator14 = m.buildInfo.assetsInfo[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                var _step14$value = _slicedToArray(_step14.value, 2),
                    key = _step14$value[0],
                    value = _step14$value[1];

                _this.buildInfo.assetsInfo.set(key, value);
              }
            } catch (err) {
              _didIteratorError14 = true;
              _iteratorError14 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                  _iterator14["return"]();
                }
              } finally {
                if (_didIteratorError14) {
                  throw _iteratorError14;
                }
              }
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
          _iterator7["return"]();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    _this._identifier = _this._createIdentifier();
    return _this;
  }

  _createClass(ConcatenatedModule, [{
    key: "identifier",
    value: function identifier() {
      return this._identifier;
    }
  }, {
    key: "readableIdentifier",
    value: function readableIdentifier(requestShortener) {
      return this.rootModule.readableIdentifier(requestShortener) + " + ".concat(this._numberOfConcatenatedModules - 1, " modules");
    }
  }, {
    key: "libIdent",
    value: function libIdent(options) {
      return this.rootModule.libIdent(options);
    }
  }, {
    key: "nameForCondition",
    value: function nameForCondition() {
      return this.rootModule.nameForCondition();
    }
  }, {
    key: "build",
    value: function build(options, compilation, resolver, fs, callback) {
      throw new Error("Cannot build this module. It should be already built.");
    }
  }, {
    key: "size",
    value: function size() {
      // Guess size from embedded modules
      return this._orderedConcatenationList.reduce(function (sum, info) {
        switch (info.type) {
          case "concatenated":
            return sum + info.module.size();

          case "external":
            return sum + 5;
        }

        return sum;
      }, 0);
    }
    /**
     * @param {Module} rootModule the root of the concatenation
     * @param {Set<Module>} modulesSet a set of modules which should be concatenated
     * @param {Compilation} compilation the compilation context
     * @returns {ConcatenationEntry[]} concatenation list
     */

  }, {
    key: "_createIdentifier",
    value: function _createIdentifier() {
      var orderedConcatenationListIdentifiers = "";

      for (var i = 0; i < this._orderedConcatenationList.length; i++) {
        if (this._orderedConcatenationList[i].type === "concatenated") {
          orderedConcatenationListIdentifiers += this._orderedConcatenationList[i].module.identifier();
          orderedConcatenationListIdentifiers += " ";
        }
      }

      var hash = createHash("md4");
      hash.update(orderedConcatenationListIdentifiers);
      return this.rootModule.identifier() + " " + hash.digest("hex");
    }
  }, {
    key: "source",
    value: function source(dependencyTemplates, runtimeTemplate) {
      var _this2 = this;

      var requestShortener = runtimeTemplate.requestShortener; // Metainfo for each module

      var modulesWithInfo = this._orderedConcatenationList.map(function (info, idx) {
        switch (info.type) {
          case "concatenated":
            {
              var exportMap = new Map();
              var reexportMap = new Map();
              var _iteratorNormalCompletion15 = true;
              var _didIteratorError15 = false;
              var _iteratorError15 = undefined;

              try {
                for (var _iterator15 = info.module.dependencies[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                  var dep = _step15.value;

                  if (dep instanceof HarmonyExportSpecifierDependency) {
                    if (!exportMap.has(dep.name)) {
                      exportMap.set(dep.name, dep.id);
                    }
                  } else if (dep instanceof HarmonyExportExpressionDependency) {
                    if (!exportMap.has("default")) {
                      exportMap.set("default", "__WEBPACK_MODULE_DEFAULT_EXPORT__");
                    }
                  } else if (dep instanceof HarmonyExportImportedSpecifierDependency) {
                    var exportName = dep.name;
                    var importName = dep._id;
                    var importedModule = dep._module;

                    if (exportName && importName) {
                      if (!reexportMap.has(exportName)) {
                        reexportMap.set(exportName, {
                          module: importedModule,
                          exportName: importName,
                          dependency: dep
                        });
                      }
                    } else if (exportName) {
                      if (!reexportMap.has(exportName)) {
                        reexportMap.set(exportName, {
                          module: importedModule,
                          exportName: true,
                          dependency: dep
                        });
                      }
                    } else if (importedModule) {
                      var _iteratorNormalCompletion16 = true;
                      var _didIteratorError16 = false;
                      var _iteratorError16 = undefined;

                      try {
                        for (var _iterator16 = importedModule.buildMeta.providedExports[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                          var name = _step16.value;

                          if (dep.activeExports.has(name) || name === "default") {
                            continue;
                          }

                          if (!reexportMap.has(name)) {
                            reexportMap.set(name, {
                              module: importedModule,
                              exportName: name,
                              dependency: dep
                            });
                          }
                        }
                      } catch (err) {
                        _didIteratorError16 = true;
                        _iteratorError16 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                            _iterator16["return"]();
                          }
                        } finally {
                          if (_didIteratorError16) {
                            throw _iteratorError16;
                          }
                        }
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError15 = true;
                _iteratorError15 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
                    _iterator15["return"]();
                  }
                } finally {
                  if (_didIteratorError15) {
                    throw _iteratorError15;
                  }
                }
              }

              return {
                type: "concatenated",
                module: info.module,
                index: idx,
                ast: undefined,
                internalSource: undefined,
                source: undefined,
                globalScope: undefined,
                moduleScope: undefined,
                internalNames: new Map(),
                globalExports: new Set(),
                exportMap: exportMap,
                reexportMap: reexportMap,
                hasNamespaceObject: false,
                namespaceObjectSource: null
              };
            }

          case "external":
            return {
              type: "external",
              module: info.module,
              index: idx,
              name: undefined,
              interopNamespaceObjectUsed: false,
              interopNamespaceObjectName: undefined,
              interopDefaultAccessUsed: false,
              interopDefaultAccessName: undefined
            };

          default:
            throw new Error("Unsupported concatenation entry type ".concat(info.type));
        }
      }); // Create mapping from module to info


      var moduleToInfoMap = new Map();
      var _iteratorNormalCompletion17 = true;
      var _didIteratorError17 = false;
      var _iteratorError17 = undefined;

      try {
        for (var _iterator17 = modulesWithInfo[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
          var m = _step17.value;
          moduleToInfoMap.set(m.module, m);
        } // Configure template decorators for dependencies

      } catch (err) {
        _didIteratorError17 = true;
        _iteratorError17 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
            _iterator17["return"]();
          }
        } finally {
          if (_didIteratorError17) {
            throw _iteratorError17;
          }
        }
      }

      var innerDependencyTemplates = new Map(dependencyTemplates);
      innerDependencyTemplates.set(HarmonyImportSpecifierDependency, new HarmonyImportSpecifierDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyImportSpecifierDependency), moduleToInfoMap));
      innerDependencyTemplates.set(HarmonyImportSideEffectDependency, new HarmonyImportSideEffectDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyImportSideEffectDependency), moduleToInfoMap));
      innerDependencyTemplates.set(HarmonyExportSpecifierDependency, new NullTemplate());
      innerDependencyTemplates.set(HarmonyExportExpressionDependency, new HarmonyExportExpressionDependencyConcatenatedTemplate(dependencyTemplates.get(HarmonyExportExpressionDependency), this.rootModule));
      innerDependencyTemplates.set(HarmonyExportImportedSpecifierDependency, new NullTemplate());
      innerDependencyTemplates.set(HarmonyCompatibilityDependency, new NullTemplate()); // Must use full identifier in our cache here to ensure that the source
      // is updated should our dependencies list change.
      // TODO webpack 5 refactor

      innerDependencyTemplates.set("hash", innerDependencyTemplates.get("hash") + this.identifier()); // Generate source code and analyse scopes
      // Prepare a ReplaceSource for the final source

      var _iteratorNormalCompletion18 = true;
      var _didIteratorError18 = false;
      var _iteratorError18 = undefined;

      try {
        for (var _iterator18 = modulesWithInfo[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
          var info = _step18.value;

          if (info.type === "concatenated") {
            var _m = info.module;

            var source = _m.source(innerDependencyTemplates, runtimeTemplate);

            var code = source.source();
            var ast = void 0;

            try {
              ast = Parser.parse(code, {
                sourceType: "module"
              });
            } catch (err) {
              if (err.loc && _typeof(err.loc) === "object" && typeof err.loc.line === "number") {
                var lineNumber = err.loc.line;
                var lines = code.split("\n");
                err.message += "\n| " + lines.slice(Math.max(0, lineNumber - 3), lineNumber + 2).join("\n| ");
              }

              throw err;
            }

            var scopeManager = eslintScope.analyze(ast, {
              ecmaVersion: 6,
              sourceType: "module",
              optimistic: true,
              ignoreEval: true,
              impliedStrict: true
            });
            var globalScope = scopeManager.acquire(ast);
            var moduleScope = globalScope.childScopes[0];
            var resultSource = new ReplaceSource(source);
            info.ast = ast;
            info.internalSource = source;
            info.source = resultSource;
            info.globalScope = globalScope;
            info.moduleScope = moduleScope;
          }
        } // List of all used names to avoid conflicts

      } catch (err) {
        _didIteratorError18 = true;
        _iteratorError18 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
            _iterator18["return"]();
          }
        } finally {
          if (_didIteratorError18) {
            throw _iteratorError18;
          }
        }
      }

      var allUsedNames = new Set(["__WEBPACK_MODULE_DEFAULT_EXPORT__", // avoid using this internal name
      "abstract", "arguments", "async", "await", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "eval", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "module", "__dirname", "__filename", "exports", "Array", "Date", "eval", "function", "hasOwnProperty", "Infinity", "isFinite", "isNaN", "isPrototypeOf", "length", "Math", "NaN", "name", "Number", "Object", "prototype", "String", "toString", "undefined", "valueOf", "alert", "all", "anchor", "anchors", "area", "assign", "blur", "button", "checkbox", "clearInterval", "clearTimeout", "clientInformation", "close", "closed", "confirm", "constructor", "crypto", "decodeURI", "decodeURIComponent", "defaultStatus", "document", "element", "elements", "embed", "embeds", "encodeURI", "encodeURIComponent", "escape", "event", "fileUpload", "focus", "form", "forms", "frame", "innerHeight", "innerWidth", "layer", "layers", "link", "location", "mimeTypes", "navigate", "navigator", "frames", "frameRate", "hidden", "history", "image", "images", "offscreenBuffering", "open", "opener", "option", "outerHeight", "outerWidth", "packages", "pageXOffset", "pageYOffset", "parent", "parseFloat", "parseInt", "password", "pkcs11", "plugin", "prompt", "propertyIsEnum", "radio", "reset", "screenX", "screenY", "scroll", "secure", "select", "self", "setInterval", "setTimeout", "status", "submit", "taint", "text", "textarea", "top", "unescape", "untaint", "window", "onblur", "onclick", "onerror", "onfocus", "onkeydown", "onkeypress", "onkeyup", "onmouseover", "onload", "onmouseup", "onmousedown", "onsubmit"]); // Set of already checked scopes

      var alreadyCheckedScopes = new Set(); // get all global names

      var _iteratorNormalCompletion19 = true;
      var _didIteratorError19 = false;
      var _iteratorError19 = undefined;

      try {
        for (var _iterator19 = modulesWithInfo[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
          var _info = _step19.value;
          var superClassExpressions = []; // ignore symbols from moduleScope

          if (_info.moduleScope) {
            alreadyCheckedScopes.add(_info.moduleScope); // The super class expression in class scopes behaves weird
            // We store ranges of all super class expressions to make
            // renaming to work correctly

            var _iteratorNormalCompletion26 = true;
            var _didIteratorError26 = false;
            var _iteratorError26 = undefined;

            try {
              for (var _iterator26 = _info.moduleScope.childScopes[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
                var childScope = _step26.value;
                if (childScope.type !== "class") continue;
                if (!childScope.block.superClass) continue;
                superClassExpressions.push({
                  range: childScope.block.superClass.range,
                  variables: childScope.variables
                });
              }
            } catch (err) {
              _didIteratorError26 = true;
              _iteratorError26 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion26 && _iterator26["return"] != null) {
                  _iterator26["return"]();
                }
              } finally {
                if (_didIteratorError26) {
                  throw _iteratorError26;
                }
              }
            }
          } // add global symbols


          if (_info.globalScope) {
            var _iteratorNormalCompletion27 = true;
            var _didIteratorError27 = false;
            var _iteratorError27 = undefined;

            try {
              for (var _iterator27 = _info.globalScope.through[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
                var reference = _step27.value;
                var name = reference.identifier.name;

                if (/^__WEBPACK_MODULE_REFERENCE__\d+_([\da-f]+|ns)(_call)?(_strict)?__$/.test(name)) {
                  var _iteratorNormalCompletion28 = true;
                  var _didIteratorError28 = false;
                  var _iteratorError28 = undefined;

                  try {
                    for (var _iterator28 = superClassExpressions[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
                      var expr = _step28.value;

                      if (expr.range[0] <= reference.identifier.range[0] && expr.range[1] >= reference.identifier.range[1]) {
                        var _iteratorNormalCompletion29 = true;
                        var _didIteratorError29 = false;
                        var _iteratorError29 = undefined;

                        try {
                          for (var _iterator29 = expr.variables[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                            var variable = _step29.value;
                            allUsedNames.add(variable.name);
                          }
                        } catch (err) {
                          _didIteratorError29 = true;
                          _iteratorError29 = err;
                        } finally {
                          try {
                            if (!_iteratorNormalCompletion29 && _iterator29["return"] != null) {
                              _iterator29["return"]();
                            }
                          } finally {
                            if (_didIteratorError29) {
                              throw _iteratorError29;
                            }
                          }
                        }
                      }
                    }
                  } catch (err) {
                    _didIteratorError28 = true;
                    _iteratorError28 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion28 && _iterator28["return"] != null) {
                        _iterator28["return"]();
                      }
                    } finally {
                      if (_didIteratorError28) {
                        throw _iteratorError28;
                      }
                    }
                  }

                  addScopeSymbols1(reference.from, allUsedNames, alreadyCheckedScopes);
                } else {
                  allUsedNames.add(name);
                }
              }
            } catch (err) {
              _didIteratorError27 = true;
              _iteratorError27 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion27 && _iterator27["return"] != null) {
                  _iterator27["return"]();
                }
              } finally {
                if (_didIteratorError27) {
                  throw _iteratorError27;
                }
              }
            }
          } // add exported globals


          if (_info.type === "concatenated") {
            var variables = new Set();
            var _iteratorNormalCompletion30 = true;
            var _didIteratorError30 = false;
            var _iteratorError30 = undefined;

            try {
              for (var _iterator30 = _info.moduleScope.variables[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                var _variable = _step30.value;
                variables.add(_variable.name);
              }
            } catch (err) {
              _didIteratorError30 = true;
              _iteratorError30 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion30 && _iterator30["return"] != null) {
                  _iterator30["return"]();
                }
              } finally {
                if (_didIteratorError30) {
                  throw _iteratorError30;
                }
              }
            }

            var _iteratorNormalCompletion31 = true;
            var _didIteratorError31 = false;
            var _iteratorError31 = undefined;

            try {
              for (var _iterator31 = _info.exportMap[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                var _step31$value = _slicedToArray(_step31.value, 2),
                    _variable2 = _step31$value[1];

                if (!variables.has(_variable2)) {
                  _info.globalExports.add(_variable2);
                }
              }
            } catch (err) {
              _didIteratorError31 = true;
              _iteratorError31 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion31 && _iterator31["return"] != null) {
                  _iterator31["return"]();
                }
              } finally {
                if (_didIteratorError31) {
                  throw _iteratorError31;
                }
              }
            }
          }
        } // generate names for symbols

      } catch (err) {
        _didIteratorError19 = true;
        _iteratorError19 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
            _iterator19["return"]();
          }
        } finally {
          if (_didIteratorError19) {
            throw _iteratorError19;
          }
        }
      }

      var _iteratorNormalCompletion20 = true;
      var _didIteratorError20 = false;
      var _iteratorError20 = undefined;

      try {
        for (var _iterator20 = modulesWithInfo[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
          var _info2 = _step20.value;

          switch (_info2.type) {
            case "concatenated":
              {
                var namespaceObjectName = this.findNewName("namespaceObject", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));
                allUsedNames.add(namespaceObjectName);

                _info2.internalNames.set(namespaceObjectName, namespaceObjectName);

                _info2.exportMap.set(true, namespaceObjectName);

                var _iteratorNormalCompletion32 = true;
                var _didIteratorError32 = false;
                var _iteratorError32 = undefined;

                try {
                  for (var _iterator32 = _info2.moduleScope.variables[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                    var _variable3 = _step32.value;
                    var _name = _variable3.name;

                    if (allUsedNames.has(_name)) {
                      var references = getAllReferences(_variable3);
                      var symbolsInReferences = new Set();
                      var alreadyCheckedInnerScopes = new Set();
                      var _iteratorNormalCompletion33 = true;
                      var _didIteratorError33 = false;
                      var _iteratorError33 = undefined;

                      try {
                        for (var _iterator33 = references[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                          var ref = _step33.value;
                          addScopeSymbols2(ref.from, symbolsInReferences, alreadyCheckedInnerScopes, alreadyCheckedScopes);
                        }
                      } catch (err) {
                        _didIteratorError33 = true;
                        _iteratorError33 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion33 && _iterator33["return"] != null) {
                            _iterator33["return"]();
                          }
                        } finally {
                          if (_didIteratorError33) {
                            throw _iteratorError33;
                          }
                        }
                      }

                      var newName = this.findNewName(_name, allUsedNames, symbolsInReferences, _info2.module.readableIdentifier(requestShortener));
                      allUsedNames.add(newName);

                      _info2.internalNames.set(_name, newName);

                      var _source = _info2.source;
                      var allIdentifiers = new Set(references.map(function (r) {
                        return r.identifier;
                      }).concat(_variable3.identifiers));
                      var _iteratorNormalCompletion34 = true;
                      var _didIteratorError34 = false;
                      var _iteratorError34 = undefined;

                      try {
                        for (var _iterator34 = allIdentifiers[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                          var identifier = _step34.value;
                          var r = identifier.range;
                          var path = getPathInAst(_info2.ast, identifier);

                          if (path && path.length > 1 && path[1].type === "Property" && path[1].shorthand) {
                            _source.insert(r[1], ": ".concat(newName));
                          } else {
                            _source.replace(r[0], r[1] - 1, newName);
                          }
                        }
                      } catch (err) {
                        _didIteratorError34 = true;
                        _iteratorError34 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion34 && _iterator34["return"] != null) {
                            _iterator34["return"]();
                          }
                        } finally {
                          if (_didIteratorError34) {
                            throw _iteratorError34;
                          }
                        }
                      }
                    } else {
                      allUsedNames.add(_name);

                      _info2.internalNames.set(_name, _name);
                    }
                  }
                } catch (err) {
                  _didIteratorError32 = true;
                  _iteratorError32 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion32 && _iterator32["return"] != null) {
                      _iterator32["return"]();
                    }
                  } finally {
                    if (_didIteratorError32) {
                      throw _iteratorError32;
                    }
                  }
                }

                break;
              }

            case "external":
              {
                var externalName = this.findNewName("", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));
                allUsedNames.add(externalName);
                _info2.name = externalName;

                if (_info2.module.buildMeta.exportsType === "named" || !_info2.module.buildMeta.exportsType) {
                  var externalNameInterop = this.findNewName("namespaceObject", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));
                  allUsedNames.add(externalNameInterop);
                  _info2.interopNamespaceObjectName = externalNameInterop;
                }

                if (!_info2.module.buildMeta.exportsType) {
                  var _externalNameInterop = this.findNewName("default", allUsedNames, null, _info2.module.readableIdentifier(requestShortener));

                  allUsedNames.add(_externalNameInterop);
                  _info2.interopDefaultAccessName = _externalNameInterop;
                }

                break;
              }
          }
        } // Find and replace referenced to modules

      } catch (err) {
        _didIteratorError20 = true;
        _iteratorError20 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
            _iterator20["return"]();
          }
        } finally {
          if (_didIteratorError20) {
            throw _iteratorError20;
          }
        }
      }

      var _iteratorNormalCompletion21 = true;
      var _didIteratorError21 = false;
      var _iteratorError21 = undefined;

      try {
        for (var _iterator21 = modulesWithInfo[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
          var _info3 = _step21.value;

          if (_info3.type === "concatenated") {
            var _iteratorNormalCompletion35 = true;
            var _didIteratorError35 = false;
            var _iteratorError35 = undefined;

            try {
              for (var _iterator35 = _info3.globalScope.through[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                var _reference = _step35.value;
                var _name2 = _reference.identifier.name;
                var match = /^__WEBPACK_MODULE_REFERENCE__(\d+)_([\da-f]+|ns)(_call)?(_strict)?__$/.exec(_name2);

                if (match) {
                  var referencedModule = modulesWithInfo[+match[1]];
                  var exportName = void 0;

                  if (match[2] === "ns") {
                    exportName = true;
                  } else {
                    var exportData = match[2];
                    exportName = Buffer.from(exportData, "hex").toString("utf-8");
                  }

                  var asCall = !!match[3];
                  var strictHarmonyModule = !!match[4];
                  var finalName = getFinalName(referencedModule, exportName, moduleToInfoMap, requestShortener, asCall, strictHarmonyModule);
                  var _r = _reference.identifier.range;
                  var _source2 = _info3.source;

                  _source2.replace(_r[0], _r[1] - 1, finalName);
                }
              }
            } catch (err) {
              _didIteratorError35 = true;
              _iteratorError35 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion35 && _iterator35["return"] != null) {
                  _iterator35["return"]();
                }
              } finally {
                if (_didIteratorError35) {
                  throw _iteratorError35;
                }
              }
            }
          }
        } // Map with all root exposed used exports

        /** @type {Map<string, function(RequestShortener): string>} */

      } catch (err) {
        _didIteratorError21 = true;
        _iteratorError21 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion21 && _iterator21["return"] != null) {
            _iterator21["return"]();
          }
        } finally {
          if (_didIteratorError21) {
            throw _iteratorError21;
          }
        }
      }

      var exportsMap = new Map(); // Set with all root exposed unused exports

      /** @type {Set<string>} */

      var unusedExports = new Set();
      var _iteratorNormalCompletion22 = true;
      var _didIteratorError22 = false;
      var _iteratorError22 = undefined;

      try {
        var _loop = function _loop() {
          var dep = _step22.value;

          if (dep instanceof HarmonyExportSpecifierDependency) {
            var used = _this2.rootModule.isUsed(dep.name);

            if (used) {
              var _info4 = moduleToInfoMap.get(_this2.rootModule);

              if (!exportsMap.has(used)) {
                exportsMap.set(used, function () {
                  return "/* binding */ ".concat(_info4.internalNames.get(dep.id));
                });
              }
            } else {
              unusedExports.add(dep.name || "namespace");
            }
          } else if (dep instanceof HarmonyExportImportedSpecifierDependency) {
            var exportDefs = getHarmonyExportImportedSpecifierDependencyExports(dep);
            var _iteratorNormalCompletion36 = true;
            var _didIteratorError36 = false;
            var _iteratorError36 = undefined;

            try {
              var _loop2 = function _loop2() {
                var def = _step36.value;
                var info = moduleToInfoMap.get(def.module);
                var used = dep.originModule.isUsed(def.name);

                if (used) {
                  if (!exportsMap.has(used)) {
                    exportsMap.set(used, function (requestShortener) {
                      var finalName = getFinalName(info, def.id, moduleToInfoMap, requestShortener, false, _this2.rootModule.buildMeta.strictHarmonyModule);
                      return "/* reexport */ ".concat(finalName);
                    });
                  }
                } else {
                  unusedExports.add(def.name);
                }
              };

              for (var _iterator36 = exportDefs[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
                _loop2();
              }
            } catch (err) {
              _didIteratorError36 = true;
              _iteratorError36 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion36 && _iterator36["return"] != null) {
                  _iterator36["return"]();
                }
              } finally {
                if (_didIteratorError36) {
                  throw _iteratorError36;
                }
              }
            }
          }
        };

        for (var _iterator22 = this.rootModule.dependencies[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError22 = true;
        _iteratorError22 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion22 && _iterator22["return"] != null) {
            _iterator22["return"]();
          }
        } finally {
          if (_didIteratorError22) {
            throw _iteratorError22;
          }
        }
      }

      var result = new ConcatSource(); // add harmony compatibility flag (must be first because of possible circular dependencies)

      var usedExports = this.rootModule.usedExports;

      if (usedExports === true || usedExports === null) {
        result.add("// ESM COMPAT FLAG\n");
        result.add(runtimeTemplate.defineEsModuleFlagStatement({
          exportsArgument: this.exportsArgument
        }));
      } // define exports


      if (exportsMap.size > 0) {
        result.add("\n// EXPORTS\n");
        var _iteratorNormalCompletion23 = true;
        var _didIteratorError23 = false;
        var _iteratorError23 = undefined;

        try {
          for (var _iterator23 = exportsMap[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
            var _step23$value = _slicedToArray(_step23.value, 2),
                key = _step23$value[0],
                value = _step23$value[1];

            result.add("__webpack_require__.d(".concat(this.exportsArgument, ", ").concat(JSON.stringify(key), ", function() { return ").concat(value(requestShortener), "; });\n"));
          }
        } catch (err) {
          _didIteratorError23 = true;
          _iteratorError23 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion23 && _iterator23["return"] != null) {
              _iterator23["return"]();
            }
          } finally {
            if (_didIteratorError23) {
              throw _iteratorError23;
            }
          }
        }
      } // list unused exports


      if (unusedExports.size > 0) {
        result.add("\n// UNUSED EXPORTS: ".concat(joinIterableWithComma(unusedExports), "\n"));
      } // define required namespace objects (must be before evaluation modules)


      var _iteratorNormalCompletion24 = true;
      var _didIteratorError24 = false;
      var _iteratorError24 = undefined;

      try {
        for (var _iterator24 = modulesWithInfo[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
          var _info5 = _step24.value;

          if (_info5.namespaceObjectSource) {
            result.add("\n// NAMESPACE OBJECT: ".concat(_info5.module.readableIdentifier(requestShortener), "\n"));
            result.add(_info5.namespaceObjectSource);
          }
        } // evaluate modules in order

      } catch (err) {
        _didIteratorError24 = true;
        _iteratorError24 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion24 && _iterator24["return"] != null) {
            _iterator24["return"]();
          }
        } finally {
          if (_didIteratorError24) {
            throw _iteratorError24;
          }
        }
      }

      var _iteratorNormalCompletion25 = true;
      var _didIteratorError25 = false;
      var _iteratorError25 = undefined;

      try {
        for (var _iterator25 = modulesWithInfo[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
          var _info6 = _step25.value;

          switch (_info6.type) {
            case "concatenated":
              result.add("\n// CONCATENATED MODULE: ".concat(_info6.module.readableIdentifier(requestShortener), "\n"));
              result.add(_info6.source);
              break;

            case "external":
              result.add("\n// EXTERNAL MODULE: ".concat(_info6.module.readableIdentifier(requestShortener), "\n"));
              result.add("var ".concat(_info6.name, " = __webpack_require__(").concat(JSON.stringify(_info6.module.id), ");\n"));

              if (_info6.interopNamespaceObjectUsed) {
                if (_info6.module.buildMeta.exportsType === "named") {
                  result.add("var ".concat(_info6.interopNamespaceObjectName, " = /*#__PURE__*/__webpack_require__.t(").concat(_info6.name, ", 2);\n"));
                } else if (!_info6.module.buildMeta.exportsType) {
                  result.add("var ".concat(_info6.interopNamespaceObjectName, " = /*#__PURE__*/__webpack_require__.t(").concat(_info6.name, ");\n"));
                }
              }

              if (_info6.interopDefaultAccessUsed) {
                result.add("var ".concat(_info6.interopDefaultAccessName, " = /*#__PURE__*/__webpack_require__.n(").concat(_info6.name, ");\n"));
              }

              break;

            default:
              throw new Error("Unsupported concatenation entry type ".concat(_info6.type));
          }
        }
      } catch (err) {
        _didIteratorError25 = true;
        _iteratorError25 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion25 && _iterator25["return"] != null) {
            _iterator25["return"]();
          }
        } finally {
          if (_didIteratorError25) {
            throw _iteratorError25;
          }
        }
      }

      return result;
    }
  }, {
    key: "findNewName",
    value: function findNewName(oldName, usedNamed1, usedNamed2, extraInfo) {
      var name = oldName;
      if (name === "__WEBPACK_MODULE_DEFAULT_EXPORT__") name = ""; // Remove uncool stuff

      extraInfo = extraInfo.replace(/\.+\/|(\/index)?\.([a-zA-Z0-9]{1,4})($|\s|\?)|\s*\+\s*\d+\s*modules/g, "");
      var splittedInfo = extraInfo.split("/");

      while (splittedInfo.length) {
        name = splittedInfo.pop() + (name ? "_" + name : "");
        var nameIdent = Template.toIdentifier(name);
        if (!usedNamed1.has(nameIdent) && (!usedNamed2 || !usedNamed2.has(nameIdent))) return nameIdent;
      }

      var i = 0;
      var nameWithNumber = Template.toIdentifier("".concat(name, "_").concat(i));

      while (usedNamed1.has(nameWithNumber) || usedNamed2 && usedNamed2.has(nameWithNumber)) {
        i++;
        nameWithNumber = Template.toIdentifier("".concat(name, "_").concat(i));
      }

      return nameWithNumber;
    }
    /**
     * @param {Hash} hash the hash used to track dependencies
     * @returns {void}
     */

  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      var _iteratorNormalCompletion37 = true;
      var _didIteratorError37 = false;
      var _iteratorError37 = undefined;

      try {
        for (var _iterator37 = this._orderedConcatenationList[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {
          var info = _step37.value;

          switch (info.type) {
            case "concatenated":
              info.module.updateHash(hash);
              break;

            case "external":
              hash.update("".concat(info.module.id));
              break;
          }
        }
      } catch (err) {
        _didIteratorError37 = true;
        _iteratorError37 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion37 && _iterator37["return"] != null) {
            _iterator37["return"]();
          }
        } finally {
          if (_didIteratorError37) {
            throw _iteratorError37;
          }
        }
      }

      _get(_getPrototypeOf(ConcatenatedModule.prototype), "updateHash", this).call(this, hash);
    }
  }, {
    key: "modules",
    get: function get() {
      return this._orderedConcatenationList.filter(function (info) {
        return info.type === "concatenated";
      }).map(function (info) {
        return info.module;
      });
    }
  }], [{
    key: "createConcatenationList",
    value: function createConcatenationList(rootModule, modulesSet, compilation) {
      var list = [];
      var set = new Set();
      /**
       * @param {Module} module a module
       * @returns {(function(): Module)[]} imported modules in order
       */

      var getConcatenatedImports = function getConcatenatedImports(module) {
        /** @type {WeakMap<DependencyReference, Dependency>} */
        var map = new WeakMap();
        var references = module.dependencies.filter(function (dep) {
          return dep instanceof HarmonyImportDependency;
        }).map(function (dep) {
          var ref = compilation.getDependencyReference(module, dep);
          if (ref) map.set(ref, dep);
          return ref;
        }).filter(function (ref) {
          return ref;
        });
        DependencyReference.sort(references); // TODO webpack 5: remove this hack, see also DependencyReference

        return references.map(function (ref) {
          var dep = map.get(ref);
          return function () {
            return compilation.getDependencyReference(module, dep).module;
          };
        });
      };

      var enterModule = function enterModule(getModule) {
        var module = getModule();
        if (!module) return;
        if (set.has(module)) return;
        set.add(module);

        if (modulesSet.has(module)) {
          var imports = getConcatenatedImports(module);
          imports.forEach(enterModule);
          list.push({
            type: "concatenated",
            module: module
          });
        } else {
          list.push({
            type: "external",

            get module() {
              // We need to use a getter here, because the module in the dependency
              // could be replaced by some other process (i. e. also replaced with a
              // concatenated module)
              return getModule();
            }

          });
        }
      };

      enterModule(function () {
        return rootModule;
      });
      return list;
    }
  }]);

  return ConcatenatedModule;
}(Module);

var HarmonyImportSpecifierDependencyConcatenatedTemplate =
/*#__PURE__*/
function () {
  function HarmonyImportSpecifierDependencyConcatenatedTemplate(originalTemplate, modulesMap) {
    _classCallCheck(this, HarmonyImportSpecifierDependencyConcatenatedTemplate);

    this.originalTemplate = originalTemplate;
    this.modulesMap = modulesMap;
  }

  _createClass(HarmonyImportSpecifierDependencyConcatenatedTemplate, [{
    key: "getHarmonyInitOrder",
    value: function getHarmonyInitOrder(dep) {
      var module = dep._module;
      var info = this.modulesMap.get(module);

      if (!info) {
        return this.originalTemplate.getHarmonyInitOrder(dep);
      }

      return NaN;
    }
  }, {
    key: "harmonyInit",
    value: function harmonyInit(dep, source, runtimeTemplate, dependencyTemplates) {
      var module = dep._module;
      var info = this.modulesMap.get(module);

      if (!info) {
        this.originalTemplate.harmonyInit(dep, source, runtimeTemplate, dependencyTemplates);
        return;
      }
    }
  }, {
    key: "apply",
    value: function apply(dep, source, runtime, dependencyTemplates) {
      var module = dep._module;
      var info = this.modulesMap.get(module);

      if (!info) {
        this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);
        return;
      }

      var content;
      var callFlag = dep.call ? "_call" : "";
      var strictFlag = dep.originModule.buildMeta.strictHarmonyModule ? "_strict" : "";

      if (dep._id === null) {
        content = "__WEBPACK_MODULE_REFERENCE__".concat(info.index, "_ns").concat(strictFlag, "__");
      } else if (dep.namespaceObjectAsContext) {
        content = "__WEBPACK_MODULE_REFERENCE__".concat(info.index, "_ns").concat(strictFlag, "__[").concat(JSON.stringify(dep._id), "]");
      } else {
        var exportData = Buffer.from(dep._id, "utf-8").toString("hex");
        content = "__WEBPACK_MODULE_REFERENCE__".concat(info.index, "_").concat(exportData).concat(callFlag).concat(strictFlag, "__");
      }

      if (dep.shorthand) {
        content = dep.name + ": " + content;
      }

      source.replace(dep.range[0], dep.range[1] - 1, content);
    }
  }]);

  return HarmonyImportSpecifierDependencyConcatenatedTemplate;
}();

var HarmonyImportSideEffectDependencyConcatenatedTemplate =
/*#__PURE__*/
function () {
  function HarmonyImportSideEffectDependencyConcatenatedTemplate(originalTemplate, modulesMap) {
    _classCallCheck(this, HarmonyImportSideEffectDependencyConcatenatedTemplate);

    this.originalTemplate = originalTemplate;
    this.modulesMap = modulesMap;
  }

  _createClass(HarmonyImportSideEffectDependencyConcatenatedTemplate, [{
    key: "getHarmonyInitOrder",
    value: function getHarmonyInitOrder(dep) {
      var module = dep._module;
      var info = this.modulesMap.get(module);

      if (!info) {
        return this.originalTemplate.getHarmonyInitOrder(dep);
      }

      return NaN;
    }
  }, {
    key: "harmonyInit",
    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {
      var module = dep._module;
      var info = this.modulesMap.get(module);

      if (!info) {
        this.originalTemplate.harmonyInit(dep, source, runtime, dependencyTemplates);
        return;
      }
    }
  }, {
    key: "apply",
    value: function apply(dep, source, runtime, dependencyTemplates) {
      var module = dep._module;
      var info = this.modulesMap.get(module);

      if (!info) {
        this.originalTemplate.apply(dep, source, runtime, dependencyTemplates);
        return;
      }
    }
  }]);

  return HarmonyImportSideEffectDependencyConcatenatedTemplate;
}();

var HarmonyExportExpressionDependencyConcatenatedTemplate =
/*#__PURE__*/
function () {
  function HarmonyExportExpressionDependencyConcatenatedTemplate(originalTemplate, rootModule) {
    _classCallCheck(this, HarmonyExportExpressionDependencyConcatenatedTemplate);

    this.originalTemplate = originalTemplate;
    this.rootModule = rootModule;
  }

  _createClass(HarmonyExportExpressionDependencyConcatenatedTemplate, [{
    key: "apply",
    value: function apply(dep, source, runtime, dependencyTemplates) {
      var content = "/* harmony default export */ var __WEBPACK_MODULE_DEFAULT_EXPORT__ = ";

      if (dep.originModule === this.rootModule) {
        var used = dep.originModule.isUsed("default");
        var exportsName = dep.originModule.exportsArgument;
        if (used) content += "".concat(exportsName, "[").concat(JSON.stringify(used), "] = ");
      }

      if (dep.range) {
        source.replace(dep.rangeStatement[0], dep.range[0] - 1, content + "(" + dep.prefix);
        source.replace(dep.range[1], dep.rangeStatement[1] - 1, ");");
        return;
      }

      source.replace(dep.rangeStatement[0], dep.rangeStatement[1] - 1, content + dep.prefix);
    }
  }]);

  return HarmonyExportExpressionDependencyConcatenatedTemplate;
}();

var NullTemplate =
/*#__PURE__*/
function () {
  function NullTemplate() {
    _classCallCheck(this, NullTemplate);
  }

  _createClass(NullTemplate, [{
    key: "apply",
    value: function apply() {}
  }]);

  return NullTemplate;
}();

module.exports = ConcatenatedModule;