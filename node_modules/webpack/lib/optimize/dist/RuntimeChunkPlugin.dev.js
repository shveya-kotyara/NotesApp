/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function RuntimeChunkPlugin(options) {
    _classCallCheck(this, RuntimeChunkPlugin);

    this.options = Object.assign({
      name: function name(entrypoint) {
        return "runtime~".concat(entrypoint.name);
      }
    }, options);
  }

  _createClass(RuntimeChunkPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.thisCompilation.tap("RuntimeChunkPlugin", function (compilation) {
        compilation.hooks.optimizeChunksAdvanced.tap("RuntimeChunkPlugin", function () {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = compilation.entrypoints.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var entrypoint = _step.value;
              var chunk = entrypoint.getRuntimeChunk();
              var name = _this.options.name;

              if (typeof name === "function") {
                name = name(entrypoint);
              }

              if (chunk.getNumberOfModules() > 0 || !chunk.preventIntegration || chunk.name !== name) {
                var newChunk = compilation.addChunk(name);
                newChunk.preventIntegration = true;
                entrypoint.unshiftChunk(newChunk);
                newChunk.addGroup(entrypoint);
                entrypoint.setRuntimeChunk(newChunk);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      });
    }
  }]);

  return RuntimeChunkPlugin;
}();