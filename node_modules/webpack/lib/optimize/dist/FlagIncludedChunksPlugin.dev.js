/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FlagIncludedChunksPlugin =
/*#__PURE__*/
function () {
  function FlagIncludedChunksPlugin() {
    _classCallCheck(this, FlagIncludedChunksPlugin);
  }

  _createClass(FlagIncludedChunksPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("FlagIncludedChunksPlugin", function (compilation) {
        compilation.hooks.optimizeChunkIds.tap("FlagIncludedChunksPlugin", function (chunks) {
          // prepare two bit integers for each module
          // 2^31 is the max number represented as SMI in v8
          // we want the bits distributed this way:
          // the bit 2^31 is pretty rar and only one module should get it
          // so it has a probability of 1 / modulesCount
          // the first bit (2^0) is the easiest and every module could get it
          // if it doesn't get a better bit
          // from bit 2^n to 2^(n+1) there is a probability of p
          // so 1 / modulesCount == p^31
          // <=> p = sqrt31(1 / modulesCount)
          // so we use a modulo of 1 / sqrt31(1 / modulesCount)
          var moduleBits = new WeakMap();
          var modulesCount = compilation.modules.length; // precalculate the modulo values for each bit

          var modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);
          var modulos = Array.from({
            length: 31
          }, function (x, i) {
            return Math.pow(modulo, i) | 0;
          }); // iterate all modules to generate bit values

          var i = 0;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = compilation.modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _module = _step.value;
              var bit = 30;

              while (i % modulos[bit] !== 0) {
                bit--;
              }

              moduleBits.set(_module, 1 << bit);
              i++;
            } // interate all chunks to generate bitmaps

          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var chunkModulesHash = new WeakMap();
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var chunk = _step2.value;
              var hash = 0;
              var _iteratorNormalCompletion4 = true;
              var _didIteratorError4 = false;
              var _iteratorError4 = undefined;

              try {
                for (var _iterator4 = chunk.modulesIterable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                  var _module2 = _step4.value;
                  hash |= moduleBits.get(_module2);
                }
              } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                    _iterator4["return"]();
                  }
                } finally {
                  if (_didIteratorError4) {
                    throw _iteratorError4;
                  }
                }
              }

              chunkModulesHash.set(chunk, hash);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = chunks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var chunkA = _step3.value;
              var chunkAHash = chunkModulesHash.get(chunkA);
              var chunkAModulesCount = chunkA.getNumberOfModules();
              if (chunkAModulesCount === 0) continue;
              var bestModule = undefined;
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = chunkA.modulesIterable[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var _module3 = _step5.value;
                  if (bestModule === undefined || bestModule.getNumberOfChunks() > _module3.getNumberOfChunks()) bestModule = _module3;
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                    _iterator5["return"]();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              var _iteratorNormalCompletion6 = true;
              var _didIteratorError6 = false;
              var _iteratorError6 = undefined;

              try {
                loopB: for (var _iterator6 = bestModule.chunksIterable[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                  var chunkB = _step6.value;
                  // as we iterate the same iterables twice
                  // skip if we find ourselves
                  if (chunkA === chunkB) continue;
                  var chunkBModulesCount = chunkB.getNumberOfModules(); // ids for empty chunks are not included

                  if (chunkBModulesCount === 0) continue; // instead of swapping A and B just bail
                  // as we loop twice the current A will be B and B then A

                  if (chunkAModulesCount > chunkBModulesCount) continue; // is chunkA in chunkB?
                  // we do a cheap check for the hash value

                  var chunkBHash = chunkModulesHash.get(chunkB);
                  if ((chunkBHash & chunkAHash) !== chunkAHash) continue; // compare all modules

                  var _iteratorNormalCompletion7 = true;
                  var _didIteratorError7 = false;
                  var _iteratorError7 = undefined;

                  try {
                    for (var _iterator7 = chunkA.modulesIterable[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                      var m = _step7.value;
                      if (!chunkB.containsModule(m)) continue loopB;
                    }
                  } catch (err) {
                    _didIteratorError7 = true;
                    _iteratorError7 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                        _iterator7["return"]();
                      }
                    } finally {
                      if (_didIteratorError7) {
                        throw _iteratorError7;
                      }
                    }
                  }

                  chunkB.ids.push(chunkA.id);
                }
              } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                    _iterator6["return"]();
                  }
                } finally {
                  if (_didIteratorError6) {
                    throw _iteratorError6;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        });
      });
    }
  }]);

  return FlagIncludedChunksPlugin;
}();

module.exports = FlagIncludedChunksPlugin;