/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CaseSensitiveModulesWarning = require("./CaseSensitiveModulesWarning");

var WarnCaseSensitiveModulesPlugin =
/*#__PURE__*/
function () {
  function WarnCaseSensitiveModulesPlugin() {
    _classCallCheck(this, WarnCaseSensitiveModulesPlugin);
  }

  _createClass(WarnCaseSensitiveModulesPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("WarnCaseSensitiveModulesPlugin", function (compilation) {
        compilation.hooks.seal.tap("WarnCaseSensitiveModulesPlugin", function () {
          var moduleWithoutCase = new Map();
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = compilation.modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _module = _step.value;

              var identifier = _module.identifier().toLowerCase();

              var array = moduleWithoutCase.get(identifier);

              if (array) {
                array.push(_module);
              } else {
                moduleWithoutCase.set(identifier, [_module]);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = moduleWithoutCase[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var pair = _step2.value;
              var _array = pair[1];

              if (_array.length > 1) {
                compilation.warnings.push(new CaseSensitiveModulesWarning(_array));
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        });
      });
    }
  }]);

  return WarnCaseSensitiveModulesPlugin;
}();

module.exports = WarnCaseSensitiveModulesPlugin;