/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Stats = require("./Stats");

var Watching =
/*#__PURE__*/
function () {
  function Watching(compiler, watchOptions, handler) {
    var _this = this;

    _classCallCheck(this, Watching);

    this.startTime = null;
    this.invalid = false;
    this.handler = handler;
    this.callbacks = [];
    this.closed = false;
    this.suspended = false;

    if (typeof watchOptions === "number") {
      this.watchOptions = {
        aggregateTimeout: watchOptions
      };
    } else if (watchOptions && _typeof(watchOptions) === "object") {
      this.watchOptions = Object.assign({}, watchOptions);
    } else {
      this.watchOptions = {};
    }

    this.watchOptions.aggregateTimeout = this.watchOptions.aggregateTimeout || 200;
    this.compiler = compiler;
    this.running = true;
    this.compiler.readRecords(function (err) {
      if (err) return _this._done(err);

      _this._go();
    });
  }

  _createClass(Watching, [{
    key: "_go",
    value: function _go() {
      var _this2 = this;

      this.startTime = Date.now();
      this.running = true;
      this.invalid = false;
      this.compiler.hooks.watchRun.callAsync(this.compiler, function (err) {
        if (err) return _this2._done(err);

        var onCompiled = function onCompiled(err, compilation) {
          if (err) return _this2._done(err);
          if (_this2.invalid) return _this2._done();

          if (_this2.compiler.hooks.shouldEmit.call(compilation) === false) {
            return _this2._done(null, compilation);
          }

          _this2.compiler.emitAssets(compilation, function (err) {
            if (err) return _this2._done(err);
            if (_this2.invalid) return _this2._done();

            _this2.compiler.emitRecords(function (err) {
              if (err) return _this2._done(err);

              if (compilation.hooks.needAdditionalPass.call()) {
                compilation.needAdditionalPass = true;
                var stats = new Stats(compilation);
                stats.startTime = _this2.startTime;
                stats.endTime = Date.now();

                _this2.compiler.hooks.done.callAsync(stats, function (err) {
                  if (err) return _this2._done(err);

                  _this2.compiler.hooks.additionalPass.callAsync(function (err) {
                    if (err) return _this2._done(err);

                    _this2.compiler.compile(onCompiled);
                  });
                });

                return;
              }

              return _this2._done(null, compilation);
            });
          });
        };

        _this2.compiler.compile(onCompiled);
      });
    }
  }, {
    key: "_getStats",
    value: function _getStats(compilation) {
      var stats = new Stats(compilation);
      stats.startTime = this.startTime;
      stats.endTime = Date.now();
      return stats;
    }
  }, {
    key: "_done",
    value: function _done(err, compilation) {
      var _this3 = this;

      this.running = false;
      if (this.invalid) return this._go();
      var stats = compilation ? this._getStats(compilation) : null;

      if (err) {
        this.compiler.hooks.failed.call(err);
        this.handler(err, stats);
        return;
      }

      this.compiler.hooks.done.callAsync(stats, function () {
        _this3.handler(null, stats);

        if (!_this3.closed) {
          _this3.watch(Array.from(compilation.fileDependencies), Array.from(compilation.contextDependencies), Array.from(compilation.missingDependencies));
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _this3.callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var cb = _step.value;
            cb();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        _this3.callbacks.length = 0;
      });
    }
  }, {
    key: "watch",
    value: function watch(files, dirs, missing) {
      var _this4 = this;

      this.pausedWatcher = null;
      this.watcher = this.compiler.watchFileSystem.watch(files, dirs, missing, this.startTime, this.watchOptions, function (err, filesModified, contextModified, missingModified, fileTimestamps, contextTimestamps, removedFiles) {
        _this4.pausedWatcher = _this4.watcher;
        _this4.watcher = null;

        if (err) {
          return _this4.handler(err);
        }

        _this4.compiler.fileTimestamps = fileTimestamps;
        _this4.compiler.contextTimestamps = contextTimestamps;
        _this4.compiler.removedFiles = removedFiles;

        if (!_this4.suspended) {
          _this4._invalidate();
        }
      }, function (fileName, changeTime) {
        _this4.compiler.hooks.invalid.call(fileName, changeTime);
      });
    }
  }, {
    key: "invalidate",
    value: function invalidate(callback) {
      if (callback) {
        this.callbacks.push(callback);
      }

      if (this.watcher) {
        this.compiler.fileTimestamps = this.watcher.getFileTimestamps();
        this.compiler.contextTimestamps = this.watcher.getContextTimestamps();
      }

      return this._invalidate();
    }
  }, {
    key: "_invalidate",
    value: function _invalidate() {
      if (this.watcher) {
        this.pausedWatcher = this.watcher;
        this.watcher.pause();
        this.watcher = null;
      }

      if (this.running) {
        this.invalid = true;
        return false;
      } else {
        this._go();
      }
    }
  }, {
    key: "suspend",
    value: function suspend() {
      this.suspended = true;
      this.invalid = false;
    }
  }, {
    key: "resume",
    value: function resume() {
      if (this.suspended) {
        this.suspended = false;

        this._invalidate();
      }
    }
  }, {
    key: "close",
    value: function close(callback) {
      var _this5 = this;

      var finalCallback = function finalCallback() {
        _this5.compiler.hooks.watchClose.call();

        _this5.compiler.running = false;
        _this5.compiler.watchMode = false;
        if (callback !== undefined) callback();
      };

      this.closed = true;

      if (this.watcher) {
        this.watcher.close();
        this.watcher = null;
      }

      if (this.pausedWatcher) {
        this.pausedWatcher.close();
        this.pausedWatcher = null;
      }

      if (this.running) {
        this.invalid = true;
        this._done = finalCallback;
      } else {
        finalCallback();
      }
    }
  }]);

  return Watching;
}();

module.exports = Watching;