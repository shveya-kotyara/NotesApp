/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DllEntryDependency = require("./dependencies/DllEntryDependency");

var SingleEntryDependency = require("./dependencies/SingleEntryDependency");

var DllModuleFactory = require("./DllModuleFactory");

var DllEntryPlugin =
/*#__PURE__*/
function () {
  function DllEntryPlugin(context, entries, name) {
    _classCallCheck(this, DllEntryPlugin);

    this.context = context;
    this.entries = entries;
    this.name = name;
  }

  _createClass(DllEntryPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("DllEntryPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        var dllModuleFactory = new DllModuleFactory();
        compilation.dependencyFactories.set(DllEntryDependency, dllModuleFactory);
        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
      });
      compiler.hooks.make.tapAsync("DllEntryPlugin", function (compilation, callback) {
        compilation.addEntry(_this.context, new DllEntryDependency(_this.entries.map(function (e, idx) {
          var dep = new SingleEntryDependency(e);
          dep.loc = {
            name: _this.name,
            index: idx
          };
          return dep;
        }), _this.name), _this.name, callback);
      });
    }
  }]);

  return DllEntryPlugin;
}();

module.exports = DllEntryPlugin;