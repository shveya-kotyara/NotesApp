/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./NormalModule")} NormalModule */

/** @typedef {import("./RuntimeTemplate")} RuntimeTemplate */

/** @typedef {import("webpack-sources").Source} Source */

/** @typedef {import("./Dependency").DependencyTemplate} DependencyTemplate */

/**
 *
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Generator =
/*#__PURE__*/
function () {
  function Generator() {
    _classCallCheck(this, Generator);
  }

  _createClass(Generator, [{
    key: "generate",

    /**
     * @abstract
     * @param {NormalModule} module module for which the code should be generated
     * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates
     * @param {RuntimeTemplate} runtimeTemplate the runtime template
     * @param {string} type which kind of code should be generated
     * @returns {Source} generated code
     */
    value: function generate(module, dependencyTemplates, runtimeTemplate, type) {
      throw new Error("Generator.generate: must be overridden");
    }
  }], [{
    key: "byType",
    value: function byType(map) {
      return new ByTypeGenerator(map);
    }
  }]);

  return Generator;
}();

var ByTypeGenerator =
/*#__PURE__*/
function (_Generator) {
  _inherits(ByTypeGenerator, _Generator);

  function ByTypeGenerator(map) {
    var _this;

    _classCallCheck(this, ByTypeGenerator);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ByTypeGenerator).call(this));
    _this.map = map;
    return _this;
  }
  /**
   * @param {NormalModule} module module for which the code should be generated
   * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates
   * @param {RuntimeTemplate} runtimeTemplate the runtime template
   * @param {string} type which kind of code should be generated
   * @returns {Source} generated code
   */


  _createClass(ByTypeGenerator, [{
    key: "generate",
    value: function generate(module, dependencyTemplates, runtimeTemplate, type) {
      var generator = this.map[type];

      if (!generator) {
        throw new Error("Generator.byType: no generator specified for ".concat(type));
      }

      return generator.generate(module, dependencyTemplates, runtimeTemplate, type);
    }
  }]);

  return ByTypeGenerator;
}(Generator);

module.exports = Generator;