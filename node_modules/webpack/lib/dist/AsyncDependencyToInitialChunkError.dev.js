/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Sean Larkin @thelarkinn
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WebpackError = require("./WebpackError");
/** @typedef {import("./Module")} Module */


var AsyncDependencyToInitialChunkError =
/*#__PURE__*/
function (_WebpackError) {
  _inherits(AsyncDependencyToInitialChunkError, _WebpackError);

  /**
   * Creates an instance of AsyncDependencyToInitialChunkError.
   * @param {string} chunkName Name of Chunk
   * @param {Module} module module tied to dependency
   * @param {TODO} loc location of dependency
   */
  function AsyncDependencyToInitialChunkError(chunkName, module, loc) {
    var _this;

    _classCallCheck(this, AsyncDependencyToInitialChunkError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncDependencyToInitialChunkError).call(this, "It's not allowed to load an initial chunk on demand. The chunk name \"".concat(chunkName, "\" is already used by an entrypoint.")));
    _this.name = "AsyncDependencyToInitialChunkError";
    _this.module = module;
    _this.loc = loc;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  return AsyncDependencyToInitialChunkError;
}(WebpackError);

module.exports = AsyncDependencyToInitialChunkError;