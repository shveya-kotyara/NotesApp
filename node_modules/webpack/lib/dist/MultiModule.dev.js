/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Module = require("./Module");

var Template = require("./Template");

var _require = require("webpack-sources"),
    RawSource = _require.RawSource;
/** @typedef {import("./util/createHash").Hash} Hash */


var MultiModule =
/*#__PURE__*/
function (_Module) {
  _inherits(MultiModule, _Module);

  function MultiModule(context, dependencies, name) {
    var _this;

    _classCallCheck(this, MultiModule);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiModule).call(this, "javascript/dynamic", context)); // Info from Factory

    _this.dependencies = dependencies;
    _this.name = name;
    _this._identifier = "multi ".concat(_this.dependencies.map(function (d) {
      return d.request;
    }).join(" "));
    return _this;
  }

  _createClass(MultiModule, [{
    key: "identifier",
    value: function identifier() {
      return this._identifier;
    }
  }, {
    key: "readableIdentifier",
    value: function readableIdentifier(requestShortener) {
      return "multi ".concat(this.dependencies.map(function (d) {
        return requestShortener.shorten(d.request);
      }).join(" "));
    }
  }, {
    key: "build",
    value: function build(options, compilation, resolver, fs, callback) {
      this.built = true;
      this.buildMeta = {};
      this.buildInfo = {};
      return callback();
    }
  }, {
    key: "needRebuild",
    value: function needRebuild() {
      return false;
    }
  }, {
    key: "size",
    value: function size() {
      return 16 + this.dependencies.length * 12;
    }
    /**
     * @param {Hash} hash the hash used to track dependencies
     * @returns {void}
     */

  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      hash.update("multi module");
      hash.update(this.name || "");

      _get(_getPrototypeOf(MultiModule.prototype), "updateHash", this).call(this, hash);
    }
  }, {
    key: "source",
    value: function source(dependencyTemplates, runtimeTemplate) {
      var str = [];
      var idx = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var dep = _step.value;

          if (dep.module) {
            if (idx === this.dependencies.length - 1) {
              str.push("module.exports = ");
            }

            str.push("__webpack_require__(");

            if (runtimeTemplate.outputOptions.pathinfo) {
              str.push(Template.toComment(dep.request));
            }

            str.push("".concat(JSON.stringify(dep.module.id)));
            str.push(")");
          } else {
            var content = require("./dependencies/WebpackMissingModule").module(dep.request);

            str.push(content);
          }

          str.push(";\n");
          idx++;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return new RawSource(str.join(""));
    }
  }]);

  return MultiModule;
}(Module);

module.exports = MultiModule;