/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var path = require("path");

var OptionsDefaulter = require("./OptionsDefaulter");

var Template = require("./Template");

var isProductionLikeMode = function isProductionLikeMode(options) {
  return options.mode === "production" || !options.mode;
};

var isWebLikeTarget = function isWebLikeTarget(options) {
  return options.target === "web" || options.target === "webworker";
};

var getDevtoolNamespace = function getDevtoolNamespace(library) {
  // if options.output.library is a string
  if (Array.isArray(library)) {
    return library.join(".");
  } else if (_typeof(library) === "object") {
    return getDevtoolNamespace(library.root);
  }

  return library || "";
};

var WebpackOptionsDefaulter =
/*#__PURE__*/
function (_OptionsDefaulter) {
  _inherits(WebpackOptionsDefaulter, _OptionsDefaulter);

  function WebpackOptionsDefaulter() {
    var _this;

    _classCallCheck(this, WebpackOptionsDefaulter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebpackOptionsDefaulter).call(this));

    _this.set("entry", "./src");

    _this.set("devtool", "make", function (options) {
      return options.mode === "development" ? "eval" : false;
    });

    _this.set("cache", "make", function (options) {
      return options.mode === "development";
    });

    _this.set("context", process.cwd());

    _this.set("target", "web");

    _this.set("module", "call", function (value) {
      return Object.assign({}, value);
    });

    _this.set("module.unknownContextRequest", ".");

    _this.set("module.unknownContextRegExp", false);

    _this.set("module.unknownContextRecursive", true);

    _this.set("module.unknownContextCritical", true);

    _this.set("module.exprContextRequest", ".");

    _this.set("module.exprContextRegExp", false);

    _this.set("module.exprContextRecursive", true);

    _this.set("module.exprContextCritical", true);

    _this.set("module.wrappedContextRegExp", /.*/);

    _this.set("module.wrappedContextRecursive", true);

    _this.set("module.wrappedContextCritical", false);

    _this.set("module.strictExportPresence", false);

    _this.set("module.strictThisContextOnImports", false);

    _this.set("module.unsafeCache", "make", function (options) {
      return !!options.cache;
    });

    _this.set("module.rules", []);

    _this.set("module.defaultRules", "make", function (options) {
      return [{
        type: "javascript/auto",
        resolve: {}
      }, {
        test: /\.mjs$/i,
        type: "javascript/esm",
        resolve: {
          mainFields: options.target === "web" || options.target === "webworker" || options.target === "electron-renderer" ? ["browser", "main"] : ["main"]
        }
      }, {
        test: /\.json$/i,
        type: "json"
      }, {
        test: /\.wasm$/i,
        type: "webassembly/experimental"
      }];
    });

    _this.set("output", "call", function (value, options) {
      if (typeof value === "string") {
        return {
          filename: value
        };
      } else if (_typeof(value) !== "object") {
        return {};
      } else {
        return Object.assign({}, value);
      }
    });

    _this.set("output.filename", "[name].js");

    _this.set("output.chunkFilename", "make", function (options) {
      var filename = options.output.filename;

      if (typeof filename !== "function") {
        var hasName = filename.includes("[name]");
        var hasId = filename.includes("[id]");
        var hasChunkHash = filename.includes("[chunkhash]"); // Anything changing depending on chunk is fine

        if (hasChunkHash || hasName || hasId) return filename; // Elsewise prefix "[id]." in front of the basename to make it changing

        return filename.replace(/(^|\/)([^/]*(?:\?|$))/, "$1[id].$2");
      }

      return "[id].js";
    });

    _this.set("output.webassemblyModuleFilename", "[modulehash].module.wasm");

    _this.set("output.library", "");

    _this.set("output.hotUpdateFunction", "make", function (options) {
      return Template.toIdentifier("webpackHotUpdate" + Template.toIdentifier(options.output.library));
    });

    _this.set("output.jsonpFunction", "make", function (options) {
      return Template.toIdentifier("webpackJsonp" + Template.toIdentifier(options.output.library));
    });

    _this.set("output.chunkCallbackName", "make", function (options) {
      return Template.toIdentifier("webpackChunk" + Template.toIdentifier(options.output.library));
    });

    _this.set("output.globalObject", "make", function (options) {
      switch (options.target) {
        case "web":
        case "electron-renderer":
        case "node-webkit":
          return "window";

        case "webworker":
          return "self";

        case "node":
        case "async-node":
        case "electron-main":
          return "global";

        default:
          return "self";
      }
    });

    _this.set("output.devtoolNamespace", "make", function (options) {
      return getDevtoolNamespace(options.output.library);
    });

    _this.set("output.libraryTarget", "var");

    _this.set("output.path", path.join(process.cwd(), "dist"));

    _this.set("output.pathinfo", "make", function (options) {
      return options.mode === "development";
    });

    _this.set("output.sourceMapFilename", "[file].map[query]");

    _this.set("output.hotUpdateChunkFilename", "[id].[hash].hot-update.js");

    _this.set("output.hotUpdateMainFilename", "[hash].hot-update.json");

    _this.set("output.crossOriginLoading", false);

    _this.set("output.jsonpScriptType", false);

    _this.set("output.chunkLoadTimeout", 120000);

    _this.set("output.hashFunction", "md4");

    _this.set("output.hashDigest", "hex");

    _this.set("output.hashDigestLength", 20);

    _this.set("output.devtoolLineToLine", false);

    _this.set("output.strictModuleExceptionHandling", false);

    _this.set("node", "call", function (value) {
      if (typeof value === "boolean") {
        return value;
      } else {
        return Object.assign({}, value);
      }
    });

    _this.set("node.console", false);

    _this.set("node.process", true);

    _this.set("node.global", true);

    _this.set("node.Buffer", true);

    _this.set("node.setImmediate", true);

    _this.set("node.__filename", "mock");

    _this.set("node.__dirname", "mock");

    _this.set("performance", "call", function (value, options) {
      if (value === false) return false;
      if (value === undefined && (!isProductionLikeMode(options) || !isWebLikeTarget(options))) return false;
      return Object.assign({}, value);
    });

    _this.set("performance.maxAssetSize", 250000);

    _this.set("performance.maxEntrypointSize", 250000);

    _this.set("performance.hints", "make", function (options) {
      return isProductionLikeMode(options) ? "warning" : false;
    });

    _this.set("optimization", "call", function (value) {
      return Object.assign({}, value);
    }); // TODO webpack 5: Disable by default in a modes


    _this.set("optimization.removeAvailableModules", "make", function (options) {
      return options.mode !== "development";
    });

    _this.set("optimization.removeEmptyChunks", true);

    _this.set("optimization.mergeDuplicateChunks", true);

    _this.set("optimization.flagIncludedChunks", "make", function (options) {
      return isProductionLikeMode(options);
    }); // TODO webpack 5 add `moduleIds: "named"` default for development
    // TODO webpack 5 add `moduleIds: "size"` default for production
    // TODO webpack 5 remove optimization.occurrenceOrder


    _this.set("optimization.occurrenceOrder", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.sideEffects", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.providedExports", true);

    _this.set("optimization.usedExports", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.concatenateModules", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.splitChunks", {});

    _this.set("optimization.splitChunks.hidePathInfo", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.splitChunks.chunks", "async");

    _this.set("optimization.splitChunks.minSize", "make", function (options) {
      return isProductionLikeMode(options) ? 30000 : 10000;
    });

    _this.set("optimization.splitChunks.minChunks", 1);

    _this.set("optimization.splitChunks.maxAsyncRequests", "make", function (options) {
      return isProductionLikeMode(options) ? 5 : Infinity;
    });

    _this.set("optimization.splitChunks.automaticNameDelimiter", "~");

    _this.set("optimization.splitChunks.automaticNameMaxLength", 109);

    _this.set("optimization.splitChunks.maxInitialRequests", "make", function (options) {
      return isProductionLikeMode(options) ? 3 : Infinity;
    });

    _this.set("optimization.splitChunks.name", true);

    _this.set("optimization.splitChunks.cacheGroups", {});

    _this.set("optimization.splitChunks.cacheGroups.default", {
      automaticNamePrefix: "",
      reuseExistingChunk: true,
      minChunks: 2,
      priority: -20
    });

    _this.set("optimization.splitChunks.cacheGroups.vendors", {
      automaticNamePrefix: "vendors",
      test: /[\\/]node_modules[\\/]/,
      priority: -10
    });

    _this.set("optimization.runtimeChunk", "call", function (value) {
      if (value === "single") {
        return {
          name: "runtime"
        };
      }

      if (value === true || value === "multiple") {
        return {
          name: function name(entrypoint) {
            return "runtime~".concat(entrypoint.name);
          }
        };
      }

      return value;
    });

    _this.set("optimization.noEmitOnErrors", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.checkWasmTypes", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.mangleWasmImports", false); // TODO webpack 5 remove optimization.namedModules


    _this.set("optimization.namedModules", "make", function (options) {
      return options.mode === "development";
    });

    _this.set("optimization.hashedModuleIds", false); // TODO webpack 5 add `chunkIds: "named"` default for development
    // TODO webpack 5 add `chunkIds: "size"` default for production
    // TODO webpack 5 remove optimization.namedChunks


    _this.set("optimization.namedChunks", "make", function (options) {
      return options.mode === "development";
    });

    _this.set("optimization.portableRecords", "make", function (options) {
      return !!(options.recordsInputPath || options.recordsOutputPath || options.recordsPath);
    });

    _this.set("optimization.minimize", "make", function (options) {
      return isProductionLikeMode(options);
    });

    _this.set("optimization.minimizer", "make", function (options) {
      return [{
        apply: function apply(compiler) {
          // Lazy load the Terser plugin
          var TerserPlugin = require("terser-webpack-plugin");

          var SourceMapDevToolPlugin = require("./SourceMapDevToolPlugin");

          new TerserPlugin({
            cache: true,
            parallel: true,
            sourceMap: options.devtool && /source-?map/.test(options.devtool) || options.plugins && options.plugins.some(function (p) {
              return p instanceof SourceMapDevToolPlugin;
            })
          }).apply(compiler);
        }
      }];
    });

    _this.set("optimization.nodeEnv", "make", function (options) {
      // TODO: In webpack 5, it should return `false` when mode is `none`
      return options.mode || "production";
    });

    _this.set("resolve", "call", function (value) {
      return Object.assign({}, value);
    });

    _this.set("resolve.unsafeCache", true);

    _this.set("resolve.modules", ["node_modules"]);

    _this.set("resolve.extensions", [".wasm", ".mjs", ".js", ".json"]);

    _this.set("resolve.mainFiles", ["index"]);

    _this.set("resolve.aliasFields", "make", function (options) {
      if (options.target === "web" || options.target === "webworker" || options.target === "electron-renderer") {
        return ["browser"];
      } else {
        return [];
      }
    });

    _this.set("resolve.mainFields", "make", function (options) {
      if (options.target === "web" || options.target === "webworker" || options.target === "electron-renderer") {
        return ["browser", "module", "main"];
      } else {
        return ["module", "main"];
      }
    });

    _this.set("resolve.cacheWithContext", "make", function (options) {
      return Array.isArray(options.resolve.plugins) && options.resolve.plugins.length > 0;
    });

    _this.set("resolveLoader", "call", function (value) {
      return Object.assign({}, value);
    });

    _this.set("resolveLoader.unsafeCache", true);

    _this.set("resolveLoader.mainFields", ["loader", "main"]);

    _this.set("resolveLoader.extensions", [".js", ".json"]);

    _this.set("resolveLoader.mainFiles", ["index"]);

    _this.set("resolveLoader.roots", "make", function (options) {
      return [options.context];
    });

    _this.set("resolveLoader.cacheWithContext", "make", function (options) {
      return Array.isArray(options.resolveLoader.plugins) && options.resolveLoader.plugins.length > 0;
    });

    _this.set("infrastructureLogging", "call", function (value) {
      return Object.assign({}, value);
    });

    _this.set("infrastructureLogging.level", "info");

    _this.set("infrastructureLogging.debug", false);

    return _this;
  }

  return WebpackOptionsDefaulter;
}(OptionsDefaulter);

module.exports = WebpackOptionsDefaulter;