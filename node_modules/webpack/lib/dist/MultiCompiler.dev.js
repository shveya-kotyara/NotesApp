/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("tapable"),
    Tapable = _require.Tapable,
    SyncHook = _require.SyncHook,
    MultiHook = _require.MultiHook;

var asyncLib = require("neo-async");

var MultiWatching = require("./MultiWatching");

var MultiStats = require("./MultiStats");

var ConcurrentCompilationError = require("./ConcurrentCompilationError");

module.exports =
/*#__PURE__*/
function (_Tapable) {
  _inherits(MultiCompiler, _Tapable);

  function MultiCompiler(compilers) {
    var _this;

    _classCallCheck(this, MultiCompiler);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiCompiler).call(this));
    _this.hooks = {
      done: new SyncHook(["stats"]),
      invalid: new MultiHook(compilers.map(function (c) {
        return c.hooks.invalid;
      })),
      run: new MultiHook(compilers.map(function (c) {
        return c.hooks.run;
      })),
      watchClose: new SyncHook([]),
      watchRun: new MultiHook(compilers.map(function (c) {
        return c.hooks.watchRun;
      })),
      infrastructureLog: new MultiHook(compilers.map(function (c) {
        return c.hooks.infrastructureLog;
      }))
    };

    if (!Array.isArray(compilers)) {
      compilers = Object.keys(compilers).map(function (name) {
        compilers[name].name = name;
        return compilers[name];
      });
    }

    _this.compilers = compilers;
    var doneCompilers = 0;
    var compilerStats = [];
    var index = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var compiler = _step.value;
        var compilerDone = false;
        var compilerIndex = index++; // eslint-disable-next-line no-loop-func

        compiler.hooks.done.tap("MultiCompiler", function (stats) {
          if (!compilerDone) {
            compilerDone = true;
            doneCompilers++;
          }

          compilerStats[compilerIndex] = stats;

          if (doneCompilers === _this.compilers.length) {
            _this.hooks.done.call(new MultiStats(compilerStats));
          }
        }); // eslint-disable-next-line no-loop-func

        compiler.hooks.invalid.tap("MultiCompiler", function () {
          if (compilerDone) {
            compilerDone = false;
            doneCompilers--;
          }
        });
      };

      for (var _iterator = _this.compilers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _this.running = false;
    return _this;
  }

  _createClass(MultiCompiler, [{
    key: "getInfrastructureLogger",
    value: function getInfrastructureLogger(name) {
      return this.compilers[0].getInfrastructureLogger(name);
    }
  }, {
    key: "validateDependencies",
    value: function validateDependencies(callback) {
      var _this2 = this;

      var edges = new Set();
      var missing = [];

      var targetFound = function targetFound(compiler) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = edges[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var edge = _step2.value;

            if (edge.target === compiler) {
              return true;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return false;
      };

      var sortEdges = function sortEdges(e1, e2) {
        return e1.source.name.localeCompare(e2.source.name) || e1.target.name.localeCompare(e2.target.name);
      };

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.compilers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var source = _step3.value;

          if (source.dependencies) {
            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              var _loop2 = function _loop2() {
                var dep = _step5.value;

                var target = _this2.compilers.find(function (c) {
                  return c.name === dep;
                });

                if (!target) {
                  missing.push(dep);
                } else {
                  edges.add({
                    source: source,
                    target: target
                  });
                }
              };

              for (var _iterator5 = source.dependencies[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                _loop2();
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                  _iterator5["return"]();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var errors = missing.map(function (m) {
        return "Compiler dependency `".concat(m, "` not found.");
      });
      var stack = this.compilers.filter(function (c) {
        return !targetFound(c);
      });

      while (stack.length > 0) {
        var current = stack.pop();
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = edges[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var edge = _step4.value;

            if (edge.source === current) {
              edges["delete"](edge);
              var target = edge.target;

              if (!targetFound(target)) {
                stack.push(target);
              }
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      if (edges.size > 0) {
        var lines = Array.from(edges).sort(sortEdges).map(function (edge) {
          return "".concat(edge.source.name, " -> ").concat(edge.target.name);
        });
        lines.unshift("Circular dependency found in compiler dependencies.");
        errors.unshift(lines.join("\n"));
      }

      if (errors.length > 0) {
        var message = errors.join("\n");
        callback(new Error(message));
        return false;
      }

      return true;
    }
  }, {
    key: "runWithDependencies",
    value: function runWithDependencies(compilers, fn, callback) {
      var fulfilledNames = new Set();
      var remainingCompilers = compilers;

      var isDependencyFulfilled = function isDependencyFulfilled(d) {
        return fulfilledNames.has(d);
      };

      var getReadyCompilers = function getReadyCompilers() {
        var readyCompilers = [];
        var list = remainingCompilers;
        remainingCompilers = [];
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = list[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var c = _step6.value;
            var ready = !c.dependencies || c.dependencies.every(isDependencyFulfilled);

            if (ready) {
              readyCompilers.push(c);
            } else {
              remainingCompilers.push(c);
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        return readyCompilers;
      };

      var runCompilers = function runCompilers(callback) {
        if (remainingCompilers.length === 0) return callback();
        asyncLib.map(getReadyCompilers(), function (compiler, callback) {
          fn(compiler, function (err) {
            if (err) return callback(err);
            fulfilledNames.add(compiler.name);
            runCompilers(callback);
          });
        }, callback);
      };

      runCompilers(callback);
    }
  }, {
    key: "watch",
    value: function watch(watchOptions, handler) {
      var _this3 = this;

      if (this.running) return handler(new ConcurrentCompilationError());
      var watchings = [];
      var allStats = this.compilers.map(function () {
        return null;
      });
      var compilerStatus = this.compilers.map(function () {
        return false;
      });

      if (this.validateDependencies(handler)) {
        this.running = true;
        this.runWithDependencies(this.compilers, function (compiler, callback) {
          var compilerIdx = _this3.compilers.indexOf(compiler);

          var firstRun = true;
          var watching = compiler.watch(Array.isArray(watchOptions) ? watchOptions[compilerIdx] : watchOptions, function (err, stats) {
            if (err) handler(err);

            if (stats) {
              allStats[compilerIdx] = stats;
              compilerStatus[compilerIdx] = "new";

              if (compilerStatus.every(Boolean)) {
                var freshStats = allStats.filter(function (s, idx) {
                  return compilerStatus[idx] === "new";
                });
                compilerStatus.fill(true);
                var multiStats = new MultiStats(freshStats);
                handler(null, multiStats);
              }
            }

            if (firstRun && !err) {
              firstRun = false;
              callback();
            }
          });
          watchings.push(watching);
        }, function () {// ignore
        });
      }

      return new MultiWatching(watchings, this);
    }
  }, {
    key: "run",
    value: function run(callback) {
      var _this4 = this;

      if (this.running) {
        return callback(new ConcurrentCompilationError());
      }

      var finalCallback = function finalCallback(err, stats) {
        _this4.running = false;

        if (callback !== undefined) {
          return callback(err, stats);
        }
      };

      var allStats = this.compilers.map(function () {
        return null;
      });

      if (this.validateDependencies(callback)) {
        this.running = true;
        this.runWithDependencies(this.compilers, function (compiler, callback) {
          var compilerIdx = _this4.compilers.indexOf(compiler);

          compiler.run(function (err, stats) {
            if (err) {
              return callback(err);
            }

            allStats[compilerIdx] = stats;
            callback();
          });
        }, function (err) {
          if (err) {
            return finalCallback(err);
          }

          finalCallback(null, new MultiStats(allStats));
        });
      }
    }
  }, {
    key: "purgeInputFileSystem",
    value: function purgeInputFileSystem() {
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = this.compilers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var compiler = _step7.value;

          if (compiler.inputFileSystem && compiler.inputFileSystem.purge) {
            compiler.inputFileSystem.purge();
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    }
  }, {
    key: "outputPath",
    get: function get() {
      var commonPath = this.compilers[0].outputPath;
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = this.compilers[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var compiler = _step8.value;

          while (compiler.outputPath.indexOf(commonPath) !== 0 && /[/\\]/.test(commonPath)) {
            commonPath = commonPath.replace(/[/\\][^/\\]*$/, "");
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
            _iterator8["return"]();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      if (!commonPath && this.compilers[0].outputPath[0] === "/") return "/";
      return commonPath;
    }
  }, {
    key: "inputFileSystem",
    get: function get() {
      throw new Error("Cannot read inputFileSystem of a MultiCompiler");
    },
    set: function set(value) {
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = this.compilers[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var compiler = _step9.value;
          compiler.inputFileSystem = value;
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
            _iterator9["return"]();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }
    }
  }, {
    key: "outputFileSystem",
    get: function get() {
      throw new Error("Cannot read outputFileSystem of a MultiCompiler");
    },
    set: function set(value) {
      var _iteratorNormalCompletion10 = true;
      var _didIteratorError10 = false;
      var _iteratorError10 = undefined;

      try {
        for (var _iterator10 = this.compilers[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
          var compiler = _step10.value;
          compiler.outputFileSystem = value;
        }
      } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
            _iterator10["return"]();
          }
        } finally {
          if (_didIteratorError10) {
            throw _iteratorError10;
          }
        }
      }
    }
  }]);

  return MultiCompiler;
}(Tapable);