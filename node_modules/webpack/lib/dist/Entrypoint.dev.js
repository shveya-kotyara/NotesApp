/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ChunkGroup = require("./ChunkGroup");
/** @typedef {import("./Chunk")} Chunk */

/**
 * Entrypoint serves as an encapsulation primitive for chunks that are
 * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a
 * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects
 * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.
 */


var Entrypoint =
/*#__PURE__*/
function (_ChunkGroup) {
  _inherits(Entrypoint, _ChunkGroup);

  /**
   * Creates an instance of Entrypoint.
   * @param {string} name the name of the entrypoint
   */
  function Entrypoint(name) {
    var _this;

    _classCallCheck(this, Entrypoint);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Entrypoint).call(this, name));
    /** @type {Chunk=} */

    _this.runtimeChunk = undefined;
    return _this;
  }
  /**
   * isInitial will always return true for Entrypoint ChunkGroup.
   * @returns {true} returns true as all entrypoints are initial ChunkGroups
   */


  _createClass(Entrypoint, [{
    key: "isInitial",
    value: function isInitial() {
      return true;
    }
    /**
     * Sets the runtimeChunk for an entrypoint.
     * @param {Chunk} chunk the chunk being set as the runtime chunk.
     * @returns {void}
     */

  }, {
    key: "setRuntimeChunk",
    value: function setRuntimeChunk(chunk) {
      this.runtimeChunk = chunk;
    }
    /**
     * Fetches the chunk reference containing the webpack bootstrap code
     * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`
     */

  }, {
    key: "getRuntimeChunk",
    value: function getRuntimeChunk() {
      return this.runtimeChunk || this.chunks[0];
    }
    /**
     * @param {Chunk} oldChunk chunk to be replaced
     * @param {Chunk} newChunk New chunk that will be replaced with
     * @returns {boolean} returns true if the replacement was successful
     */

  }, {
    key: "replaceChunk",
    value: function replaceChunk(oldChunk, newChunk) {
      if (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;
      return _get(_getPrototypeOf(Entrypoint.prototype), "replaceChunk", this).call(this, oldChunk, newChunk);
    }
  }]);

  return Entrypoint;
}(ChunkGroup);

module.exports = Entrypoint;