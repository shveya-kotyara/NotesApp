/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("webpack-sources"),
    OriginalSource = _require.OriginalSource,
    RawSource = _require.RawSource;

var Module = require("./Module");

var WebpackMissingModule = require("./dependencies/WebpackMissingModule");

var DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");

var DelegatedExportsDependency = require("./dependencies/DelegatedExportsDependency");
/** @typedef {import("./dependencies/ModuleDependency")} ModuleDependency */

/** @typedef {import("./util/createHash").Hash} Hash */


var DelegatedModule =
/*#__PURE__*/
function (_Module) {
  _inherits(DelegatedModule, _Module);

  function DelegatedModule(sourceRequest, data, type, userRequest, originalRequest) {
    var _this;

    _classCallCheck(this, DelegatedModule);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(DelegatedModule).call(this, "javascript/dynamic", null)); // Info from Factory

    _this.sourceRequest = sourceRequest;
    _this.request = data.id;
    _this.type = type;
    _this.userRequest = userRequest;
    _this.originalRequest = originalRequest;
    _this.delegateData = data; // Build info

    _this.delegatedSourceDependency = undefined;
    return _this;
  }

  _createClass(DelegatedModule, [{
    key: "libIdent",
    value: function libIdent(options) {
      return typeof this.originalRequest === "string" ? this.originalRequest : this.originalRequest.libIdent(options);
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return "delegated ".concat(JSON.stringify(this.request), " from ").concat(this.sourceRequest);
    }
  }, {
    key: "readableIdentifier",
    value: function readableIdentifier() {
      return "delegated ".concat(this.userRequest, " from ").concat(this.sourceRequest);
    }
  }, {
    key: "needRebuild",
    value: function needRebuild() {
      return false;
    }
  }, {
    key: "build",
    value: function build(options, compilation, resolver, fs, callback) {
      this.built = true;
      this.buildMeta = Object.assign({}, this.delegateData.buildMeta);
      this.buildInfo = {};
      this.delegatedSourceDependency = new DelegatedSourceDependency(this.sourceRequest);
      this.addDependency(this.delegatedSourceDependency);
      this.addDependency(new DelegatedExportsDependency(this, this.delegateData.exports || true));
      callback();
    }
  }, {
    key: "source",
    value: function source(depTemplates, runtime) {
      var dep =
      /** @type {DelegatedSourceDependency} */
      this.dependencies[0];
      var sourceModule = dep.module;
      var str;

      if (!sourceModule) {
        str = WebpackMissingModule.moduleCode(this.sourceRequest);
      } else {
        str = "module.exports = (".concat(runtime.moduleExports({
          module: sourceModule,
          request: dep.request
        }), ")");

        switch (this.type) {
          case "require":
            str += "(".concat(JSON.stringify(this.request), ")");
            break;

          case "object":
            str += "[".concat(JSON.stringify(this.request), "]");
            break;
        }

        str += ";";
      }

      if (this.useSourceMap) {
        return new OriginalSource(str, this.identifier());
      } else {
        return new RawSource(str);
      }
    }
  }, {
    key: "size",
    value: function size() {
      return 42;
    }
    /**
     * @param {Hash} hash the hash used to track dependencies
     * @returns {void}
     */

  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      hash.update(this.type);
      hash.update(JSON.stringify(this.request));

      _get(_getPrototypeOf(DelegatedModule.prototype), "updateHash", this).call(this, hash);
    }
  }]);

  return DelegatedModule;
}(Module);

module.exports = DelegatedModule;