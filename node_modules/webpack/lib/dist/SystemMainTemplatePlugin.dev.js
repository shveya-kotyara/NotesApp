/*
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Joel Denning @joeldenning
 */
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;

var Template = require("./Template");
/** @typedef {import("./Compilation")} Compilation */

/**
 * @typedef {Object} SystemMainTemplatePluginOptions
 * @param {string=} name the library name
 */


var SystemMainTemplatePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {SystemMainTemplatePluginOptions} options the plugin options
   */
  function SystemMainTemplatePlugin(options) {
    _classCallCheck(this, SystemMainTemplatePlugin);

    this.name = options.name;
  }
  /**
   * @param {Compilation} compilation the compilation instance
   * @returns {void}
   */


  _createClass(SystemMainTemplatePlugin, [{
    key: "apply",
    value: function apply(compilation) {
      var _this = this;

      var mainTemplate = compilation.mainTemplate,
          chunkTemplate = compilation.chunkTemplate;

      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {
        var externals = chunk.getModules().filter(function (m) {
          return m.external;
        }); // The name this bundle should be registered as with System

        var name = _this.name ? "".concat(JSON.stringify(mainTemplate.getAssetPath(_this.name, {
          hash: hash,
          chunk: chunk
        })), ", ") : ""; // The array of dependencies that are external to webpack and will be provided by System

        var systemDependencies = JSON.stringify(externals.map(function (m) {
          return _typeof(m.request) === "object" ? m.request.amd : m.request;
        })); // The name of the variable provided by System for exporting

        var dynamicExport = "__WEBPACK_DYNAMIC_EXPORT__"; // An array of the internal variable names for the webpack externals

        var externalWebpackNames = externals.map(function (m) {
          return "__WEBPACK_EXTERNAL_MODULE_".concat(Template.toIdentifier("".concat(m.id)), "__");
        }); // Declaring variables for the internal variable names for the webpack externals

        var externalVarDeclarations = externalWebpackNames.length > 0 ? "var ".concat(externalWebpackNames.join(", "), ";") : ""; // The system.register format requires an array of setter functions for externals.

        var setters = externalWebpackNames.length === 0 ? "" : Template.asString(["setters: [", Template.indent(externalWebpackNames.map(function (external) {
          return Template.asString(["function(module) {", Template.indent("".concat(external, " = module;")), "}"]);
        }).join(",\n")), "],"]);
        return new ConcatSource(Template.asString(["System.register(".concat(name).concat(systemDependencies, ", function(").concat(dynamicExport, ") {"), Template.indent([externalVarDeclarations, "return {", Template.indent([setters, "execute: function() {", Template.indent("".concat(dynamicExport, "("))])])]) + "\n", source, "\n" + Template.asString([Template.indent([Template.indent([Template.indent([");"]), "}"]), "};"]), "})"]));
      };

      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {
        var template = _arr[_i];
        template.hooks.renderWithEntry.tap("SystemMainTemplatePlugin", onRenderWithEntry);
      }

      mainTemplate.hooks.globalHashPaths.tap("SystemMainTemplatePlugin", function (paths) {
        if (_this.name) {
          paths.push(_this.name);
        }

        return paths;
      });
      mainTemplate.hooks.hash.tap("SystemMainTemplatePlugin", function (hash) {
        hash.update("exports system");

        if (_this.name) {
          hash.update(_this.name);
        }
      });
    }
  }]);

  return SystemMainTemplatePlugin;
}();

module.exports = SystemMainTemplatePlugin;