/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;

var Template = require("./Template");

var FunctionModuleTemplatePlugin =
/*#__PURE__*/
function () {
  function FunctionModuleTemplatePlugin() {
    _classCallCheck(this, FunctionModuleTemplatePlugin);
  }

  _createClass(FunctionModuleTemplatePlugin, [{
    key: "apply",
    value: function apply(moduleTemplate) {
      moduleTemplate.hooks.render.tap("FunctionModuleTemplatePlugin", function (moduleSource, module) {
        var source = new ConcatSource();
        var args = [module.moduleArgument]; // TODO remove HACK checking type for javascript

        if (module.type && module.type.startsWith("javascript")) {
          args.push(module.exportsArgument);

          if (module.hasDependencies(function (d) {
            return d.requireWebpackRequire !== false;
          })) {
            args.push("__webpack_require__");
          }
        } else if (module.type && module.type.startsWith("json")) {// no additional arguments needed
        } else {
          args.push(module.exportsArgument, "__webpack_require__");
        }

        source.add("/***/ (function(" + args.join(", ") + ") {\n\n");
        if (module.buildInfo.strict) source.add('"use strict";\n');
        source.add(moduleSource);
        source.add("\n\n/***/ })");
        return source;
      });
      moduleTemplate.hooks["package"].tap("FunctionModuleTemplatePlugin", function (moduleSource, module) {
        if (moduleTemplate.runtimeTemplate.outputOptions.pathinfo) {
          var source = new ConcatSource();
          var req = module.readableIdentifier(moduleTemplate.runtimeTemplate.requestShortener);
          var reqStr = req.replace(/\*\//g, "*_/");
          var reqStrStar = "*".repeat(reqStr.length);
          source.add("/*!****" + reqStrStar + "****!*\\\n");
          source.add("  !*** " + reqStr + " ***!\n");
          source.add("  \\****" + reqStrStar + "****/\n");

          if (Array.isArray(module.buildMeta.providedExports) && module.buildMeta.providedExports.length === 0) {
            source.add(Template.toComment("no exports provided") + "\n");
          } else if (Array.isArray(module.buildMeta.providedExports)) {
            source.add(Template.toComment("exports provided: " + module.buildMeta.providedExports.join(", ")) + "\n");
          } else if (module.buildMeta.providedExports) {
            source.add(Template.toComment("no static exports found") + "\n");
          }

          if (Array.isArray(module.usedExports) && module.usedExports.length === 0) {
            source.add(Template.toComment("no exports used") + "\n");
          } else if (Array.isArray(module.usedExports)) {
            source.add(Template.toComment("exports used: " + module.usedExports.join(", ")) + "\n");
          } else if (module.usedExports) {
            source.add(Template.toComment("all exports used") + "\n");
          }

          if (module.optimizationBailout) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = module.optimizationBailout[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var text = _step.value;
                var code = void 0;

                if (typeof text === "function") {
                  code = text(moduleTemplate.runtimeTemplate.requestShortener);
                } else {
                  code = text;
                }

                source.add(Template.toComment("".concat(code)) + "\n");
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }

          source.add(moduleSource);
          return source;
        }

        return moduleSource;
      });
      moduleTemplate.hooks.hash.tap("FunctionModuleTemplatePlugin", function (hash) {
        hash.update("FunctionModuleTemplatePlugin");
        hash.update("2");
      });
    }
  }]);

  return FunctionModuleTemplatePlugin;
}();

module.exports = FunctionModuleTemplatePlugin;