/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DelegatedModuleFactoryPlugin = require("./DelegatedModuleFactoryPlugin");

var DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");

var DelegatedExportsDependency = require("./dependencies/DelegatedExportsDependency");

var NullFactory = require("./NullFactory");

var DelegatedPlugin =
/*#__PURE__*/
function () {
  function DelegatedPlugin(options) {
    _classCallCheck(this, DelegatedPlugin);

    this.options = options;
  }

  _createClass(DelegatedPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("DelegatedPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);
        compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());
      });
      compiler.hooks.compile.tap("DelegatedPlugin", function (_ref2) {
        var normalModuleFactory = _ref2.normalModuleFactory;
        new DelegatedModuleFactoryPlugin(_this.options).apply(normalModuleFactory);
      });
    }
  }]);

  return DelegatedPlugin;
}();

module.exports = DelegatedPlugin;