/*
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Tobias Koppers @sokra
 */
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;

var Template = require("./Template");
/** @typedef {import("./Compilation")} Compilation */

/**
 * @typedef {Object} AmdMainTemplatePluginOptions
 * @param {string=} name the library name
 * @property {boolean=} requireAsWrapper
 */


var AmdMainTemplatePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {AmdMainTemplatePluginOptions} options the plugin options
   */
  function AmdMainTemplatePlugin(options) {
    _classCallCheck(this, AmdMainTemplatePlugin);

    if (!options || typeof options === "string") {
      this.name = options;
      this.requireAsWrapper = false;
    } else {
      this.name = options.name;
      this.requireAsWrapper = options.requireAsWrapper;
    }
  }
  /**
   * @param {Compilation} compilation the compilation instance
   * @returns {void}
   */


  _createClass(AmdMainTemplatePlugin, [{
    key: "apply",
    value: function apply(compilation) {
      var _this = this;

      var mainTemplate = compilation.mainTemplate,
          chunkTemplate = compilation.chunkTemplate;

      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {
        var externals = chunk.getModules().filter(function (m) {
          return m.external;
        });
        var externalsDepsArray = JSON.stringify(externals.map(function (m) {
          return _typeof(m.request) === "object" ? m.request.amd : m.request;
        }));
        var externalsArguments = externals.map(function (m) {
          return "__WEBPACK_EXTERNAL_MODULE_".concat(Template.toIdentifier("".concat(m.id)), "__");
        }).join(", ");

        if (_this.requireAsWrapper) {
          return new ConcatSource("require(".concat(externalsDepsArray, ", function(").concat(externalsArguments, ") { return "), source, "});");
        } else if (_this.name) {
          var name = mainTemplate.getAssetPath(_this.name, {
            hash: hash,
            chunk: chunk
          });
          return new ConcatSource("define(".concat(JSON.stringify(name), ", ").concat(externalsDepsArray, ", function(").concat(externalsArguments, ") { return "), source, "});");
        } else if (externalsArguments) {
          return new ConcatSource("define(".concat(externalsDepsArray, ", function(").concat(externalsArguments, ") { return "), source, "});");
        } else {
          return new ConcatSource("define(function() { return ", source, "});");
        }
      };

      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {
        var template = _arr[_i];
        template.hooks.renderWithEntry.tap("AmdMainTemplatePlugin", onRenderWithEntry);
      }

      mainTemplate.hooks.globalHashPaths.tap("AmdMainTemplatePlugin", function (paths) {
        if (_this.name) {
          paths.push(_this.name);
        }

        return paths;
      });
      mainTemplate.hooks.hash.tap("AmdMainTemplatePlugin", function (hash) {
        hash.update("exports amd");

        if (_this.name) {
          hash.update(_this.name);
        }
      });
    }
  }]);

  return AmdMainTemplatePlugin;
}();

module.exports = AmdMainTemplatePlugin;