/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
	*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DllEntryPlugin = require("./DllEntryPlugin");

var FlagAllModulesAsUsedPlugin = require("./FlagAllModulesAsUsedPlugin");

var LibManifestPlugin = require("./LibManifestPlugin");

var validateOptions = require("schema-utils");

var schema = require("../schemas/plugins/DllPlugin.json");
/** @typedef {import("../declarations/plugins/DllPlugin").DllPluginOptions} DllPluginOptions */


var DllPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {DllPluginOptions} options options object
   */
  function DllPlugin(options) {
    _classCallCheck(this, DllPlugin);

    validateOptions(schema, options, "Dll Plugin");
    this.options = options;
  }

  _createClass(DllPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.entryOption.tap("DllPlugin", function (context, entry) {
        var itemToPlugin = function itemToPlugin(item, name) {
          if (Array.isArray(item)) {
            return new DllEntryPlugin(context, item, name);
          }

          throw new Error("DllPlugin: supply an Array as entry");
        };

        if (_typeof(entry) === "object" && !Array.isArray(entry)) {
          Object.keys(entry).forEach(function (name) {
            itemToPlugin(entry[name], name).apply(compiler);
          });
        } else {
          itemToPlugin(entry, "main").apply(compiler);
        }

        return true;
      });
      new LibManifestPlugin(this.options).apply(compiler);

      if (!this.options.entryOnly) {
        new FlagAllModulesAsUsedPlugin("DllPlugin").apply(compiler);
      }
    }
  }]);

  return DllPlugin;
}();

module.exports = DllPlugin;