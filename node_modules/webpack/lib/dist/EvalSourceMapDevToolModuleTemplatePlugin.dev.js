/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    RawSource = _require.RawSource;

var ModuleFilenameHelpers = require("./ModuleFilenameHelpers");

var _require2 = require("./util/identifier"),
    absolutify = _require2.absolutify;

var cache = new WeakMap();

var EvalSourceMapDevToolModuleTemplatePlugin =
/*#__PURE__*/
function () {
  function EvalSourceMapDevToolModuleTemplatePlugin(compilation, options) {
    _classCallCheck(this, EvalSourceMapDevToolModuleTemplatePlugin);

    this.compilation = compilation;
    this.sourceMapComment = options.append || "//# sourceURL=[module]\n//# sourceMappingURL=[url]";
    this.moduleFilenameTemplate = options.moduleFilenameTemplate || "webpack://[namespace]/[resource-path]?[hash]";
    this.namespace = options.namespace || "";
    this.options = options;
  }

  _createClass(EvalSourceMapDevToolModuleTemplatePlugin, [{
    key: "apply",
    value: function apply(moduleTemplate) {
      var _this = this;

      var self = this;
      var options = this.options;
      var matchModule = ModuleFilenameHelpers.matchObject.bind(ModuleFilenameHelpers, options);
      moduleTemplate.hooks.module.tap("EvalSourceMapDevToolModuleTemplatePlugin", function (source, module) {
        var cachedSource = cache.get(source);

        if (cachedSource !== undefined) {
          return cachedSource;
        }

        if (!matchModule(module.resource)) {
          return source;
        }
        /** @type {{ [key: string]: TODO; }} */


        var sourceMap;
        var content;

        if (source.sourceAndMap) {
          var sourceAndMap = source.sourceAndMap(options);
          sourceMap = sourceAndMap.map;
          content = sourceAndMap.source;
        } else {
          sourceMap = source.map(options);
          content = source.source();
        }

        if (!sourceMap) {
          return source;
        } // Clone (flat) the sourcemap to ensure that the mutations below do not persist.


        sourceMap = Object.keys(sourceMap).reduce(function (obj, key) {
          obj[key] = sourceMap[key];
          return obj;
        }, {});
        var context = _this.compilation.compiler.options.context;
        var modules = sourceMap.sources.map(function (source) {
          if (source.startsWith("webpack://")) {
            source = absolutify(context, source.slice(10));
          }

          var module = self.compilation.findModule(source);
          return module || source;
        });
        var moduleFilenames = modules.map(function (module) {
          return ModuleFilenameHelpers.createFilename(module, {
            moduleFilenameTemplate: self.moduleFilenameTemplate,
            namespace: self.namespace
          }, moduleTemplate.runtimeTemplate.requestShortener);
        });
        moduleFilenames = ModuleFilenameHelpers.replaceDuplicates(moduleFilenames, function (filename, i, n) {
          for (var j = 0; j < n; j++) {
            filename += "*";
          }

          return filename;
        });
        sourceMap.sources = moduleFilenames;
        sourceMap.sourceRoot = options.sourceRoot || "";
        sourceMap.file = "".concat(module.id, ".js");
        var footer = self.sourceMapComment.replace(/\[url\]/g, "data:application/json;charset=utf-8;base64,".concat(Buffer.from(JSON.stringify(sourceMap), "utf8").toString("base64"))) + "\n//# sourceURL=webpack-internal:///".concat(module.id, "\n"); // workaround for chrome bug

        var evalSource = new RawSource("eval(".concat(JSON.stringify(content + footer), ");"));
        cache.set(source, evalSource);
        return evalSource;
      });
      moduleTemplate.hooks.hash.tap("EvalSourceMapDevToolModuleTemplatePlugin", function (hash) {
        hash.update("eval-source-map");
        hash.update("2");
      });
    }
  }]);

  return EvalSourceMapDevToolModuleTemplatePlugin;
}();

module.exports = EvalSourceMapDevToolModuleTemplatePlugin;