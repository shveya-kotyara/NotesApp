/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var createHash = require("./util/createHash");

var validateOptions = require("schema-utils");

var schema = require("../schemas/plugins/HashedModuleIdsPlugin.json");
/** @typedef {import("../declarations/plugins/HashedModuleIdsPlugin").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */


var HashedModuleIdsPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {HashedModuleIdsPluginOptions=} options options object
   */
  function HashedModuleIdsPlugin(options) {
    _classCallCheck(this, HashedModuleIdsPlugin);

    if (!options) options = {};
    validateOptions(schema, options, "Hashed Module Ids Plugin");
    /** @type {HashedModuleIdsPluginOptions} */

    this.options = Object.assign({
      context: null,
      hashFunction: "md4",
      hashDigest: "base64",
      hashDigestLength: 4
    }, options);
  }

  _createClass(HashedModuleIdsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      var options = this.options;
      compiler.hooks.compilation.tap("HashedModuleIdsPlugin", function (compilation) {
        var usedIds = new Set();
        compilation.hooks.beforeModuleIds.tap("HashedModuleIdsPlugin", function (modules) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _module = _step.value;

              if (_module.id === null && _module.libIdent) {
                var id = _module.libIdent({
                  context: _this.options.context || compiler.options.context
                });

                var hash = createHash(options.hashFunction);
                hash.update(id);
                var hashId =
                /** @type {string} */
                hash.digest(options.hashDigest);
                var len = options.hashDigestLength;

                while (usedIds.has(hashId.substr(0, len))) {
                  len++;
                }

                _module.id = hashId.substr(0, len);
                usedIds.add(_module.id);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      });
    }
  }]);

  return HashedModuleIdsPlugin;
}();

module.exports = HashedModuleIdsPlugin;