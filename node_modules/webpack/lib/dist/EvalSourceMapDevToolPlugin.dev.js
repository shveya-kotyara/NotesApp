/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EvalSourceMapDevToolModuleTemplatePlugin = require("./EvalSourceMapDevToolModuleTemplatePlugin");

var SourceMapDevToolModuleOptionsPlugin = require("./SourceMapDevToolModuleOptionsPlugin");

var EvalSourceMapDevToolPlugin =
/*#__PURE__*/
function () {
  function EvalSourceMapDevToolPlugin(options) {
    _classCallCheck(this, EvalSourceMapDevToolPlugin);

    if (arguments.length > 1) {
      throw new Error("EvalSourceMapDevToolPlugin only takes one argument (pass an options object)");
    }

    if (typeof options === "string") {
      options = {
        append: options
      };
    }

    if (!options) options = {};
    this.options = options;
  }

  _createClass(EvalSourceMapDevToolPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;
      compiler.hooks.compilation.tap("EvalSourceMapDevToolPlugin", function (compilation) {
        new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);
        new EvalSourceMapDevToolModuleTemplatePlugin(compilation, options).apply(compilation.moduleTemplates.javascript);
      });
    }
  }]);

  return EvalSourceMapDevToolPlugin;
}();

module.exports = EvalSourceMapDevToolPlugin;