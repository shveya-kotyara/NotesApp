/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("tapable"),
    Tapable = _require.Tapable,
    SyncWaterfallHook = _require.SyncWaterfallHook,
    SyncHook = _require.SyncHook;
/** @typedef {import("./ModuleTemplate")} ModuleTemplate */

/** @typedef {import("./Chunk")} Chunk */

/** @typedef {import("./Module")} Module} */

/** @typedef {import("./Dependency").DependencyTemplate} DependencyTemplate} */

/** @typedef {import("./util/createHash").Hash} Hash} */

/**
 * @typedef {Object} RenderManifestOptions
 * @property {Chunk} chunk the chunk used to render
 * @property {string} hash
 * @property {string} fullHash
 * @property {TODO} outputOptions
 * @property {{javascript: ModuleTemplate, webassembly: ModuleTemplate}} moduleTemplates
 * @property {Map<TODO, TODO>} dependencyTemplates
 */


module.exports =
/*#__PURE__*/
function (_Tapable) {
  _inherits(ChunkTemplate, _Tapable);

  function ChunkTemplate(outputOptions) {
    var _this;

    _classCallCheck(this, ChunkTemplate);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChunkTemplate).call(this));
    _this.outputOptions = outputOptions || {};
    _this.hooks = {
      /** @type {SyncWaterfallHook<TODO[], RenderManifestOptions>} */
      renderManifest: new SyncWaterfallHook(["result", "options"]),
      modules: new SyncWaterfallHook(["source", "chunk", "moduleTemplate", "dependencyTemplates"]),
      render: new SyncWaterfallHook(["source", "chunk", "moduleTemplate", "dependencyTemplates"]),
      renderWithEntry: new SyncWaterfallHook(["source", "chunk"]),
      hash: new SyncHook(["hash"]),
      hashForChunk: new SyncHook(["hash", "chunk"])
    };
    return _this;
  }
  /**
   *
   * @param {RenderManifestOptions} options render manifest options
   * @returns {TODO[]} returns render manifest
   */


  _createClass(ChunkTemplate, [{
    key: "getRenderManifest",
    value: function getRenderManifest(options) {
      var result = [];
      this.hooks.renderManifest.call(result, options);
      return result;
    }
    /**
     * Updates hash with information from this template
     * @param {Hash} hash the hash to update
     * @returns {void}
     */

  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      hash.update("ChunkTemplate");
      hash.update("2");
      this.hooks.hash.call(hash);
    }
    /**
     * TODO webpack 5: remove moduleTemplate and dependencyTemplates
     * Updates hash with chunk-specific information from this template
     * @param {Hash} hash the hash to update
     * @param {Chunk} chunk the chunk
     * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance for render
     * @param {Map<Function, DependencyTemplate>} dependencyTemplates dependency templates
     * @returns {void}
     */

  }, {
    key: "updateHashForChunk",
    value: function updateHashForChunk(hash, chunk, moduleTemplate, dependencyTemplates) {
      this.updateHash(hash);
      this.hooks.hashForChunk.call(hash, chunk);
    }
  }]);

  return ChunkTemplate;
}(Tapable);