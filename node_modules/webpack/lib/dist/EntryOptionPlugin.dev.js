/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SingleEntryPlugin = require("./SingleEntryPlugin");

var MultiEntryPlugin = require("./MultiEntryPlugin");

var DynamicEntryPlugin = require("./DynamicEntryPlugin");
/** @typedef {import("../declarations/WebpackOptions").EntryItem} EntryItem */

/** @typedef {import("./Compiler")} Compiler */

/**
 * @param {string} context context path
 * @param {EntryItem} item entry array or single path
 * @param {string} name entry key name
 * @returns {SingleEntryPlugin | MultiEntryPlugin} returns either a single or multi entry plugin
 */


var itemToPlugin = function itemToPlugin(context, item, name) {
  if (Array.isArray(item)) {
    return new MultiEntryPlugin(context, item, name);
  }

  return new SingleEntryPlugin(context, item, name);
};

module.exports =
/*#__PURE__*/
function () {
  function EntryOptionPlugin() {
    _classCallCheck(this, EntryOptionPlugin);
  }

  _createClass(EntryOptionPlugin, [{
    key: "apply",

    /**
     * @param {Compiler} compiler the compiler instance one is tapping into
     * @returns {void}
     */
    value: function apply(compiler) {
      compiler.hooks.entryOption.tap("EntryOptionPlugin", function (context, entry) {
        if (typeof entry === "string" || Array.isArray(entry)) {
          itemToPlugin(context, entry, "main").apply(compiler);
        } else if (_typeof(entry) === "object") {
          for (var _i = 0, _Object$keys = Object.keys(entry); _i < _Object$keys.length; _i++) {
            var name = _Object$keys[_i];
            itemToPlugin(context, entry[name], name).apply(compiler);
          }
        } else if (typeof entry === "function") {
          new DynamicEntryPlugin(context, entry).apply(compiler);
        }

        return true;
      });
    }
  }]);

  return EntryOptionPlugin;
}();