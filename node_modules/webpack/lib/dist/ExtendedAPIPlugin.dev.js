/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Template = require("./Template");

var ConstDependency = require("./dependencies/ConstDependency");

var ParserHelpers = require("./ParserHelpers");

var NullFactory = require("./NullFactory");

var REPLACEMENTS = {
  // eslint-disable-next-line camelcase
  __webpack_hash__: "__webpack_require__.h",
  // eslint-disable-next-line camelcase
  __webpack_chunkname__: "__webpack_require__.cn"
};
var REPLACEMENT_TYPES = {
  // eslint-disable-next-line camelcase
  __webpack_hash__: "string",
  // eslint-disable-next-line camelcase
  __webpack_chunkname__: "string"
};

var ExtendedAPIPlugin =
/*#__PURE__*/
function () {
  function ExtendedAPIPlugin() {
    _classCallCheck(this, ExtendedAPIPlugin);
  }

  _createClass(ExtendedAPIPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("ExtendedAPIPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(ConstDependency, new NullFactory());
        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
        var mainTemplate = compilation.mainTemplate;
        mainTemplate.hooks.requireExtensions.tap("ExtendedAPIPlugin", function (source, chunk, hash) {
          var buf = [source];
          buf.push("");
          buf.push("// __webpack_hash__");
          buf.push("".concat(mainTemplate.requireFn, ".h = ").concat(JSON.stringify(hash), ";"));
          buf.push("");
          buf.push("// __webpack_chunkname__");
          buf.push("".concat(mainTemplate.requireFn, ".cn = ").concat(JSON.stringify(chunk.name), ";"));
          return Template.asString(buf);
        });
        mainTemplate.hooks.globalHash.tap("ExtendedAPIPlugin", function () {
          return true;
        });

        var handler = function handler(parser, parserOptions) {
          Object.keys(REPLACEMENTS).forEach(function (key) {
            parser.hooks.expression["for"](key).tap("ExtendedAPIPlugin", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, REPLACEMENTS[key]));
            parser.hooks.evaluateTypeof["for"](key).tap("ExtendedAPIPlugin", ParserHelpers.evaluateToString(REPLACEMENT_TYPES[key]));
          });
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("ExtendedAPIPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("ExtendedAPIPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/esm").tap("ExtendedAPIPlugin", handler);
      });
    }
  }]);

  return ExtendedAPIPlugin;
}();

module.exports = ExtendedAPIPlugin;