/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Gajus Kuizinas @gajus
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WebpackError = require("./WebpackError");

var webpackOptionsSchema = require("../schemas/WebpackOptions.json");

var getSchemaPart = function getSchemaPart(path, parents, additionalPath) {
  parents = parents || 0;
  path = path.split("/");
  path = path.slice(0, path.length - parents);

  if (additionalPath) {
    additionalPath = additionalPath.split("/");
    path = path.concat(additionalPath);
  }

  var schemaPart = webpackOptionsSchema;

  for (var i = 1; i < path.length; i++) {
    var inner = schemaPart[path[i]];
    if (inner) schemaPart = inner;
  }

  return schemaPart;
};

var getSchemaPartText = function getSchemaPartText(schemaPart, additionalPath) {
  if (additionalPath) {
    for (var i = 0; i < additionalPath.length; i++) {
      var inner = schemaPart[additionalPath[i]];
      if (inner) schemaPart = inner;
    }
  }

  while (schemaPart.$ref) {
    schemaPart = getSchemaPart(schemaPart.$ref);
  }

  var schemaText = WebpackOptionsValidationError.formatSchema(schemaPart);

  if (schemaPart.description) {
    schemaText += "\n-> ".concat(schemaPart.description);
  }

  return schemaText;
};

var getSchemaPartDescription = function getSchemaPartDescription(schemaPart) {
  while (schemaPart.$ref) {
    schemaPart = getSchemaPart(schemaPart.$ref);
  }

  if (schemaPart.description) {
    return "\n-> ".concat(schemaPart.description);
  }

  return "";
};

var SPECIFICITY = {
  type: 1,
  oneOf: 1,
  anyOf: 1,
  allOf: 1,
  additionalProperties: 2,
  "enum": 1,
  "instanceof": 1,
  required: 2,
  minimum: 2,
  uniqueItems: 2,
  minLength: 2,
  minItems: 2,
  minProperties: 2,
  absolutePath: 2
};

var filterMax = function filterMax(array, fn) {
  var max = array.reduce(function (max, item) {
    return Math.max(max, fn(item));
  }, 0);
  return array.filter(function (item) {
    return fn(item) === max;
  });
};

var filterChildren = function filterChildren(children) {
  children = filterMax(children, function (err) {
    return err.dataPath ? err.dataPath.length : 0;
  });
  children = filterMax(children, function (err) {
    return SPECIFICITY[err.keyword] || 2;
  });
  return children;
};

var indent = function indent(str, prefix, firstLine) {
  if (firstLine) {
    return prefix + str.replace(/\n(?!$)/g, "\n" + prefix);
  } else {
    return str.replace(/\n(?!$)/g, "\n".concat(prefix));
  }
};

var WebpackOptionsValidationError =
/*#__PURE__*/
function (_WebpackError) {
  _inherits(WebpackOptionsValidationError, _WebpackError);

  function WebpackOptionsValidationError(validationErrors) {
    var _this;

    _classCallCheck(this, WebpackOptionsValidationError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebpackOptionsValidationError).call(this, "Invalid configuration object. " + "Webpack has been initialised using a configuration object that does not match the API schema.\n" + validationErrors.map(function (err) {
      return " - " + indent(WebpackOptionsValidationError.formatValidationError(err), "   ", false);
    }).join("\n")));
    _this.name = "WebpackOptionsValidationError";
    _this.validationErrors = validationErrors;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  _createClass(WebpackOptionsValidationError, null, [{
    key: "formatSchema",
    value: function formatSchema(schema, prevSchemas) {
      prevSchemas = prevSchemas || [];

      var formatInnerSchema = function formatInnerSchema(innerSchema, addSelf) {
        if (!addSelf) {
          return WebpackOptionsValidationError.formatSchema(innerSchema, prevSchemas);
        }

        if (prevSchemas.includes(innerSchema)) {
          return "(recursive)";
        }

        return WebpackOptionsValidationError.formatSchema(innerSchema, prevSchemas.concat(schema));
      };

      if (schema.type === "string") {
        if (schema.minLength === 1) {
          return "non-empty string";
        }

        if (schema.minLength > 1) {
          return "string (min length ".concat(schema.minLength, ")");
        }

        return "string";
      }

      if (schema.type === "boolean") {
        return "boolean";
      }

      if (schema.type === "number") {
        return "number";
      }

      if (schema.type === "object") {
        if (schema.properties) {
          var required = schema.required || [];
          return "object { ".concat(Object.keys(schema.properties).map(function (property) {
            if (!required.includes(property)) return property + "?";
            return property;
          }).concat(schema.additionalProperties ? ["â€¦"] : []).join(", "), " }");
        }

        if (schema.additionalProperties) {
          return "object { <key>: ".concat(formatInnerSchema(schema.additionalProperties), " }");
        }

        return "object";
      }

      if (schema.type === "array") {
        return "[".concat(formatInnerSchema(schema.items), "]");
      }

      switch (schema["instanceof"]) {
        case "Function":
          return "function";

        case "RegExp":
          return "RegExp";
      }

      if (schema["enum"]) {
        return schema["enum"].map(function (item) {
          return JSON.stringify(item);
        }).join(" | ");
      }

      if (schema.$ref) {
        return formatInnerSchema(getSchemaPart(schema.$ref), true);
      }

      if (schema.allOf) {
        return schema.allOf.map(formatInnerSchema).join(" & ");
      }

      if (schema.oneOf) {
        return schema.oneOf.map(formatInnerSchema).join(" | ");
      }

      if (schema.anyOf) {
        return schema.anyOf.map(formatInnerSchema).join(" | ");
      }

      return JSON.stringify(schema, null, 2);
    }
  }, {
    key: "formatValidationError",
    value: function formatValidationError(err) {
      var dataPath = "configuration".concat(err.dataPath);

      if (err.keyword === "additionalProperties") {
        var baseMessage = "".concat(dataPath, " has an unknown property '").concat(err.params.additionalProperty, "'. These properties are valid:\n").concat(getSchemaPartText(err.parentSchema));

        if (!err.dataPath) {
          switch (err.params.additionalProperty) {
            case "debug":
              return "".concat(baseMessage, "\n") + "The 'debug' property was removed in webpack 2.0.0.\n" + "Loaders should be updated to allow passing this option via loader options in module.rules.\n" + "Until loaders are updated one can use the LoaderOptionsPlugin to switch loaders into debug mode:\n" + "plugins: [\n" + "  new webpack.LoaderOptionsPlugin({\n" + "    debug: true\n" + "  })\n" + "]";
          }

          return "".concat(baseMessage, "\n") + "For typos: please correct them.\n" + "For loader options: webpack >= v2.0.0 no longer allows custom properties in configuration.\n" + "  Loaders should be updated to allow passing options via loader options in module.rules.\n" + "  Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:\n" + "  plugins: [\n" + "    new webpack.LoaderOptionsPlugin({\n" + "      // test: /\\.xxx$/, // may apply this only for some modules\n" + "      options: {\n" + "        ".concat(err.params.additionalProperty, ": \u2026\n") + "      }\n" + "    })\n" + "  ]";
        }

        return baseMessage;
      } else if (err.keyword === "oneOf" || err.keyword === "anyOf") {
        if (err.children && err.children.length > 0) {
          if (err.schema.length === 1) {
            var lastChild = err.children[err.children.length - 1];
            var remainingChildren = err.children.slice(0, err.children.length - 1);
            return WebpackOptionsValidationError.formatValidationError(Object.assign({}, lastChild, {
              children: remainingChildren,
              parentSchema: Object.assign({}, err.parentSchema, lastChild.parentSchema)
            }));
          }

          var children = filterChildren(err.children);

          if (children.length === 1) {
            return WebpackOptionsValidationError.formatValidationError(children[0]);
          }

          return "".concat(dataPath, " should be one of these:\n").concat(getSchemaPartText(err.parentSchema), "\n") + "Details:\n".concat(children.map(function (err) {
            return " * " + indent(WebpackOptionsValidationError.formatValidationError(err), "   ", false);
          }).join("\n"));
        }

        return "".concat(dataPath, " should be one of these:\n").concat(getSchemaPartText(err.parentSchema));
      } else if (err.keyword === "enum") {
        if (err.parentSchema && err.parentSchema["enum"] && err.parentSchema["enum"].length === 1) {
          return "".concat(dataPath, " should be ").concat(getSchemaPartText(err.parentSchema));
        }

        return "".concat(dataPath, " should be one of these:\n").concat(getSchemaPartText(err.parentSchema));
      } else if (err.keyword === "allOf") {
        return "".concat(dataPath, " should be:\n").concat(getSchemaPartText(err.parentSchema));
      } else if (err.keyword === "type") {
        switch (err.params.type) {
          case "object":
            return "".concat(dataPath, " should be an object.").concat(getSchemaPartDescription(err.parentSchema));

          case "string":
            return "".concat(dataPath, " should be a string.").concat(getSchemaPartDescription(err.parentSchema));

          case "boolean":
            return "".concat(dataPath, " should be a boolean.").concat(getSchemaPartDescription(err.parentSchema));

          case "number":
            return "".concat(dataPath, " should be a number.").concat(getSchemaPartDescription(err.parentSchema));

          case "array":
            return "".concat(dataPath, " should be an array:\n").concat(getSchemaPartText(err.parentSchema));
        }

        return "".concat(dataPath, " should be ").concat(err.params.type, ":\n").concat(getSchemaPartText(err.parentSchema));
      } else if (err.keyword === "instanceof") {
        return "".concat(dataPath, " should be an instance of ").concat(getSchemaPartText(err.parentSchema));
      } else if (err.keyword === "required") {
        var missingProperty = err.params.missingProperty.replace(/^\./, "");
        return "".concat(dataPath, " misses the property '").concat(missingProperty, "'.\n").concat(getSchemaPartText(err.parentSchema, ["properties", missingProperty]));
      } else if (err.keyword === "minimum") {
        return "".concat(dataPath, " ").concat(err.message, ".").concat(getSchemaPartDescription(err.parentSchema));
      } else if (err.keyword === "uniqueItems") {
        return "".concat(dataPath, " should not contain the item '").concat(err.data[err.params.i], "' twice.").concat(getSchemaPartDescription(err.parentSchema));
      } else if (err.keyword === "minLength" || err.keyword === "minItems" || err.keyword === "minProperties") {
        if (err.params.limit === 1) {
          switch (err.keyword) {
            case "minLength":
              return "".concat(dataPath, " should be an non-empty string.").concat(getSchemaPartDescription(err.parentSchema));

            case "minItems":
              return "".concat(dataPath, " should be an non-empty array.").concat(getSchemaPartDescription(err.parentSchema));

            case "minProperties":
              return "".concat(dataPath, " should be an non-empty object.").concat(getSchemaPartDescription(err.parentSchema));
          }

          return "".concat(dataPath, " should be not empty.").concat(getSchemaPartDescription(err.parentSchema));
        } else {
          return "".concat(dataPath, " ").concat(err.message).concat(getSchemaPartDescription(err.parentSchema));
        }
      } else if (err.keyword === "not") {
        return "".concat(dataPath, " should not be ").concat(getSchemaPartText(err.schema), "\n").concat(getSchemaPartText(err.parentSchema));
      } else if (err.keyword === "absolutePath") {
        var _baseMessage = "".concat(dataPath, ": ").concat(err.message).concat(getSchemaPartDescription(err.parentSchema));

        if (dataPath === "configuration.output.filename") {
          return "".concat(_baseMessage, "\n") + "Please use output.path to specify absolute path and output.filename for the file name.";
        }

        return _baseMessage;
      } else {
        return "".concat(dataPath, " ").concat(err.message, " (").concat(JSON.stringify(err, null, 2), ").\n").concat(getSchemaPartText(err.parentSchema));
      }
    }
  }]);

  return WebpackOptionsValidationError;
}(WebpackError);

module.exports = WebpackOptionsValidationError;