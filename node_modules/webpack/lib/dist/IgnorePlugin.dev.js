/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var validateOptions = require("schema-utils");

var schema = require("../schemas/plugins/IgnorePlugin.json");
/** @typedef {import("../declarations/plugins/IgnorePlugin").IgnorePluginOptions} IgnorePluginOptions */

/** @typedef {import("./Compiler")} Compiler */


var IgnorePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {IgnorePluginOptions} options IgnorePlugin options
   */
  function IgnorePlugin(options) {
    _classCallCheck(this, IgnorePlugin);

    // TODO webpack 5 remove this compat-layer
    if (arguments.length > 1 || options instanceof RegExp) {
      options = {
        resourceRegExp: arguments[0],
        contextRegExp: arguments[1]
      };
    }

    validateOptions(schema, options, "IgnorePlugin");
    this.options = options;
    /** @private @type {Function} */

    this.checkIgnore = this.checkIgnore.bind(this);
  }
  /**
   * Note that if "contextRegExp" is given, both the "resourceRegExp"
   * and "contextRegExp" have to match.
   *
   * @param {TODO} result result
   * @returns {TODO|null} returns result or null if result should be ignored
   */


  _createClass(IgnorePlugin, [{
    key: "checkIgnore",
    value: function checkIgnore(result) {
      if (!result) return result;

      if ("checkResource" in this.options && this.options.checkResource && this.options.checkResource(result.request, result.context)) {
        // TODO webpack 5 remove checkContext, as checkResource already gets context
        if ("checkContext" in this.options && this.options.checkContext) {
          if (this.options.checkContext(result.context)) {
            return null;
          }
        } else {
          return null;
        }
      }

      if ("resourceRegExp" in this.options && this.options.resourceRegExp && this.options.resourceRegExp.test(result.request)) {
        if ("contextRegExp" in this.options && this.options.contextRegExp) {
          // if "contextRegExp" is given,
          // both the "resourceRegExp" and "contextRegExp" have to match.
          if (this.options.contextRegExp.test(result.context)) {
            return null;
          }
        } else {
          return null;
        }
      }

      return result;
    }
    /**
     * @param {Compiler} compiler Webpack Compiler
     * @returns {void}
     */

  }, {
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.normalModuleFactory.tap("IgnorePlugin", function (nmf) {
        nmf.hooks.beforeResolve.tap("IgnorePlugin", _this.checkIgnore);
      });
      compiler.hooks.contextModuleFactory.tap("IgnorePlugin", function (cmf) {
        cmf.hooks.beforeResolve.tap("IgnorePlugin", _this.checkIgnore);
      });
    }
  }]);

  return IgnorePlugin;
}();

module.exports = IgnorePlugin;