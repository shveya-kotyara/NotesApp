/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Dependency").DependencyLocation} DependencyLocation */

/** @typedef {import("./Dependency").SourcePosition} SourcePosition */
// TODO webpack 5: pos must be SourcePosition

/**
 * @param {SourcePosition|DependencyLocation|string} pos position
 * @returns {string} formatted position
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var formatPosition = function formatPosition(pos) {
  if (pos === null) return ""; // TODO webpack 5: Simplify this

  if (typeof pos === "string") return pos;
  if (typeof pos === "number") return "".concat(pos);

  if (_typeof(pos) === "object") {
    if ("line" in pos && "column" in pos) {
      return "".concat(pos.line, ":").concat(pos.column);
    } else if ("line" in pos) {
      return "".concat(pos.line, ":?");
    } else if ("index" in pos) {
      // TODO webpack 5 remove this case
      return "+".concat(pos.index);
    } else {
      return "";
    }
  }

  return "";
}; // TODO webpack 5: loc must be DependencyLocation

/**
 * @param {DependencyLocation|SourcePosition|string} loc location
 * @returns {string} formatted location
 */


var formatLocation = function formatLocation(loc) {
  if (loc === null) return ""; // TODO webpack 5: Simplify this

  if (typeof loc === "string") return loc;
  if (typeof loc === "number") return "".concat(loc);

  if (_typeof(loc) === "object") {
    if ("start" in loc && loc.start && "end" in loc && loc.end) {
      if (_typeof(loc.start) === "object" && typeof loc.start.line === "number" && _typeof(loc.end) === "object" && typeof loc.end.line === "number" && typeof loc.end.column === "number" && loc.start.line === loc.end.line) {
        return "".concat(formatPosition(loc.start), "-").concat(loc.end.column);
      } else {
        return "".concat(formatPosition(loc.start), "-").concat(formatPosition(loc.end));
      }
    }

    if ("start" in loc && loc.start) {
      return formatPosition(loc.start);
    }

    if ("name" in loc && "index" in loc) {
      return "".concat(loc.name, "[").concat(loc.index, "]");
    }

    if ("name" in loc) {
      return loc.name;
    }

    return formatPosition(loc);
  }

  return "";
};

module.exports = formatLocation;