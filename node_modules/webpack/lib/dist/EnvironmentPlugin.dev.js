/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Authors Simen Brekken @simenbrekken, Einar LÃ¶ve @einarlove
*/
"use strict";
/** @typedef {import("./Compiler")} Compiler */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var WebpackError = require("./WebpackError");

var DefinePlugin = require("./DefinePlugin");

var needsEnvVarFix = ["8", "9"].indexOf(process.versions.node.split(".")[0]) >= 0 && process.platform === "win32";

var EnvironmentPlugin =
/*#__PURE__*/
function () {
  function EnvironmentPlugin() {
    _classCallCheck(this, EnvironmentPlugin);

    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {
      keys[_key] = arguments[_key];
    }

    if (keys.length === 1 && Array.isArray(keys[0])) {
      this.keys = keys[0];
      this.defaultValues = {};
    } else if (keys.length === 1 && keys[0] && _typeof(keys[0]) === "object") {
      this.keys = Object.keys(keys[0]);
      this.defaultValues = keys[0];
    } else {
      this.keys = keys;
      this.defaultValues = {};
    }
  }
  /**
   * @param {Compiler} compiler webpack compiler instance
   * @returns {void}
   */


  _createClass(EnvironmentPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      var definitions = this.keys.reduce(function (defs, key) {
        // TODO remove once the fix has made its way into Node 8.
        // Work around https://github.com/nodejs/node/pull/18463,
        // affecting Node 8 & 9 by performing an OS-level
        // operation that always succeeds before reading
        // environment variables:
        if (needsEnvVarFix) require("os").cpus();
        var value = process.env[key] !== undefined ? process.env[key] : _this.defaultValues[key];

        if (value === undefined) {
          compiler.hooks.thisCompilation.tap("EnvironmentPlugin", function (compilation) {
            var error = new WebpackError("EnvironmentPlugin - ".concat(key, " environment variable is undefined.\n\n") + "You can pass an object with default values to suppress this warning.\n" + "See https://webpack.js.org/plugins/environment-plugin for example.");
            error.name = "EnvVariableNotDefinedError";
            compilation.warnings.push(error);
          });
        }

        defs["process.env.".concat(key)] = value === undefined ? "undefined" : JSON.stringify(value);
        return defs;
      }, {});
      new DefinePlugin(definitions).apply(compiler);
    }
  }]);

  return EnvironmentPlugin;
}();

module.exports = EnvironmentPlugin;