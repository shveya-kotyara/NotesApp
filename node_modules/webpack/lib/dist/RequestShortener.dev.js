/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require("path");

var NORMALIZE_SLASH_DIRECTION_REGEXP = /\\/g;
var PATH_CHARS_REGEXP = /[-[\]{}()*+?.,\\^$|#\s]/g;
var SEPARATOR_REGEXP = /[/\\]$/;
var FRONT_OR_BACK_BANG_REGEXP = /^!|!$/g;
var INDEX_JS_REGEXP = /\/index.js(!|\?|\(query\))/g;
var MATCH_RESOURCE_REGEXP = /!=!/;

var normalizeBackSlashDirection = function normalizeBackSlashDirection(request) {
  return request.replace(NORMALIZE_SLASH_DIRECTION_REGEXP, "/");
};

var createRegExpForPath = function createRegExpForPath(path) {
  var regexpTypePartial = path.replace(PATH_CHARS_REGEXP, "\\$&");
  return new RegExp("(^|!)".concat(regexpTypePartial), "g");
};

var RequestShortener =
/*#__PURE__*/
function () {
  function RequestShortener(directory) {
    _classCallCheck(this, RequestShortener);

    directory = normalizeBackSlashDirection(directory);

    if (SEPARATOR_REGEXP.test(directory)) {
      directory = directory.substr(0, directory.length - 1);
    }

    if (directory) {
      this.currentDirectoryRegExp = createRegExpForPath(directory);
    }

    var dirname = path.dirname(directory);
    var endsWithSeparator = SEPARATOR_REGEXP.test(dirname);
    var parentDirectory = endsWithSeparator ? dirname.substr(0, dirname.length - 1) : dirname;

    if (parentDirectory && parentDirectory !== directory) {
      this.parentDirectoryRegExp = createRegExpForPath("".concat(parentDirectory, "/"));
    }

    if (__dirname.length >= 2) {
      var buildins = normalizeBackSlashDirection(path.join(__dirname, ".."));
      var buildinsAsModule = this.currentDirectoryRegExp && this.currentDirectoryRegExp.test(buildins);
      this.buildinsAsModule = buildinsAsModule;
      this.buildinsRegExp = createRegExpForPath(buildins);
    }

    this.cache = new Map();
  }

  _createClass(RequestShortener, [{
    key: "shorten",
    value: function shorten(request) {
      if (!request) return request;
      var cacheEntry = this.cache.get(request);

      if (cacheEntry !== undefined) {
        return cacheEntry;
      }

      var result = normalizeBackSlashDirection(request);

      if (this.buildinsAsModule && this.buildinsRegExp) {
        result = result.replace(this.buildinsRegExp, "!(webpack)");
      }

      if (this.currentDirectoryRegExp) {
        result = result.replace(this.currentDirectoryRegExp, "!.");
      }

      if (this.parentDirectoryRegExp) {
        result = result.replace(this.parentDirectoryRegExp, "!../");
      }

      if (!this.buildinsAsModule && this.buildinsRegExp) {
        result = result.replace(this.buildinsRegExp, "!(webpack)");
      }

      result = result.replace(INDEX_JS_REGEXP, "$1");
      result = result.replace(FRONT_OR_BACK_BANG_REGEXP, "");
      result = result.replace(MATCH_RESOURCE_REGEXP, " = ");
      this.cache.set(request, result);
      return result;
    }
  }]);

  return RequestShortener;
}();

module.exports = RequestShortener;