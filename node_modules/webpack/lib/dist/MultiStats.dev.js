/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Stats = require("./Stats");

var optionOrFallback = function optionOrFallback(optionValue, fallbackValue) {
  return optionValue !== undefined ? optionValue : fallbackValue;
};

var MultiStats =
/*#__PURE__*/
function () {
  function MultiStats(stats) {
    _classCallCheck(this, MultiStats);

    this.stats = stats;
    this.hash = stats.map(function (stat) {
      return stat.hash;
    }).join("");
  }

  _createClass(MultiStats, [{
    key: "hasErrors",
    value: function hasErrors() {
      return this.stats.map(function (stat) {
        return stat.hasErrors();
      }).reduce(function (a, b) {
        return a || b;
      }, false);
    }
  }, {
    key: "hasWarnings",
    value: function hasWarnings() {
      return this.stats.map(function (stat) {
        return stat.hasWarnings();
      }).reduce(function (a, b) {
        return a || b;
      }, false);
    }
  }, {
    key: "toJson",
    value: function toJson(options, forToString) {
      if (typeof options === "boolean" || typeof options === "string") {
        options = Stats.presetToOptions(options);
      } else if (!options) {
        options = {};
      }

      var jsons = this.stats.map(function (stat, idx) {
        var childOptions = Stats.getChildOptions(options, idx);
        var obj = stat.toJson(childOptions, forToString);
        obj.name = stat.compilation && stat.compilation.name;
        return obj;
      });
      var showVersion = options.version === undefined ? jsons.every(function (j) {
        return j.version;
      }) : options.version !== false;
      var showHash = options.hash === undefined ? jsons.every(function (j) {
        return j.hash;
      }) : options.hash !== false;

      if (showVersion) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = jsons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var j = _step.value;
            delete j.version;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      var obj = {
        errors: jsons.reduce(function (arr, j) {
          return arr.concat(j.errors.map(function (msg) {
            return "(".concat(j.name, ") ").concat(msg);
          }));
        }, []),
        warnings: jsons.reduce(function (arr, j) {
          return arr.concat(j.warnings.map(function (msg) {
            return "(".concat(j.name, ") ").concat(msg);
          }));
        }, [])
      };
      if (showVersion) obj.version = require("../package.json").version;
      if (showHash) obj.hash = this.hash;
      if (options.children !== false) obj.children = jsons;
      return obj;
    }
  }, {
    key: "toString",
    value: function toString(options) {
      if (typeof options === "boolean" || typeof options === "string") {
        options = Stats.presetToOptions(options);
      } else if (!options) {
        options = {};
      }

      var useColors = optionOrFallback(options.colors, false);
      var obj = this.toJson(options, true);
      return Stats.jsonToString(obj, useColors);
    }
  }]);

  return MultiStats;
}();

module.exports = MultiStats;