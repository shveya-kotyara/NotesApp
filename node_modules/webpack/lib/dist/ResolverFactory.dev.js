/*
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Tobias Koppers @sokra
 */
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("tapable"),
    Tapable = _require.Tapable,
    HookMap = _require.HookMap,
    SyncHook = _require.SyncHook,
    SyncWaterfallHook = _require.SyncWaterfallHook;

var Factory = require("enhanced-resolve").ResolverFactory;

var _require2 = require("./util/cleverMerge"),
    cachedCleverMerge = _require2.cachedCleverMerge;
/** @typedef {import("enhanced-resolve").Resolver} Resolver */


var EMTPY_RESOLVE_OPTIONS = {};

module.exports =
/*#__PURE__*/
function (_Tapable) {
  _inherits(ResolverFactory, _Tapable);

  function ResolverFactory() {
    var _this;

    _classCallCheck(this, ResolverFactory);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResolverFactory).call(this));
    _this.hooks = {
      resolveOptions: new HookMap(function () {
        return new SyncWaterfallHook(["resolveOptions"]);
      }),
      resolver: new HookMap(function () {
        return new SyncHook(["resolver", "resolveOptions"]);
      })
    };

    _this._pluginCompat.tap("ResolverFactory", function (options) {
      var match;
      match = /^resolve-options (.+)$/.exec(options.name);

      if (match) {
        _this.hooks.resolveOptions["for"](match[1]).tap(options.fn.name || "unnamed compat plugin", options.fn);

        return true;
      }

      match = /^resolver (.+)$/.exec(options.name);

      if (match) {
        _this.hooks.resolver["for"](match[1]).tap(options.fn.name || "unnamed compat plugin", options.fn);

        return true;
      }
    });

    _this.cache2 = new Map();
    return _this;
  }

  _createClass(ResolverFactory, [{
    key: "get",
    value: function get(type, resolveOptions) {
      resolveOptions = resolveOptions || EMTPY_RESOLVE_OPTIONS;
      var ident = "".concat(type, "|").concat(JSON.stringify(resolveOptions));
      var resolver = this.cache2.get(ident);
      if (resolver) return resolver;

      var newResolver = this._create(type, resolveOptions);

      this.cache2.set(ident, newResolver);
      return newResolver;
    }
  }, {
    key: "_create",
    value: function _create(type, resolveOptions) {
      var _this2 = this;

      var originalResolveOptions = Object.assign({}, resolveOptions);
      resolveOptions = this.hooks.resolveOptions["for"](type).call(resolveOptions);
      var resolver = Factory.createResolver(resolveOptions);

      if (!resolver) {
        throw new Error("No resolver created");
      }
      /** @type {Map<Object, Resolver>} */


      var childCache = new Map();

      resolver.withOptions = function (options) {
        var cacheEntry = childCache.get(options);
        if (cacheEntry !== undefined) return cacheEntry;
        var mergedOptions = cachedCleverMerge(originalResolveOptions, options);

        var resolver = _this2.get(type, mergedOptions);

        childCache.set(options, resolver);
        return resolver;
      };

      this.hooks.resolver["for"](type).call(resolver, resolveOptions);
      return resolver;
    }
  }]);

  return ResolverFactory;
}(Tapable);