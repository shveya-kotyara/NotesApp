/*
 MIT License http://www.opensource.org/licenses/mit-license.php
 Author Tobias Koppers @sokra
 */
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;

var ModuleFilenameHelpers = require("./ModuleFilenameHelpers");

var Template = require("./Template");

var validateOptions = require("schema-utils");

var schema = require("../schemas/plugins/BannerPlugin.json");
/** @typedef {import("../declarations/plugins/BannerPlugin").BannerPluginArgument} BannerPluginArgument */

/** @typedef {import("../declarations/plugins/BannerPlugin").BannerPluginOptions} BannerPluginOptions */


var wrapComment = function wrapComment(str) {
  if (!str.includes("\n")) {
    return Template.toComment(str);
  }

  return "/*!\n * ".concat(str.replace(/\*\//g, "* /").split("\n").join("\n * "), "\n */");
};

var BannerPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {BannerPluginArgument} options options object
   */
  function BannerPlugin(options) {
    _classCallCheck(this, BannerPlugin);

    if (arguments.length > 1) {
      throw new Error("BannerPlugin only takes one argument (pass an options object)");
    }

    validateOptions(schema, options, "Banner Plugin");

    if (typeof options === "string" || typeof options === "function") {
      options = {
        banner: options
      };
    }
    /** @type {BannerPluginOptions} */


    this.options = options;
    var bannerOption = options.banner;

    if (typeof bannerOption === "function") {
      var getBanner = bannerOption;
      this.banner = this.options.raw ? getBanner : function (data) {
        return wrapComment(getBanner(data));
      };
    } else {
      var banner = this.options.raw ? bannerOption : wrapComment(bannerOption);

      this.banner = function () {
        return banner;
      };
    }
  }

  _createClass(BannerPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;
      var banner = this.banner;
      var matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);
      compiler.hooks.compilation.tap("BannerPlugin", function (compilation) {
        compilation.hooks.optimizeChunkAssets.tap("BannerPlugin", function (chunks) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var chunk = _step.value;

              if (options.entryOnly && !chunk.canBeInitial()) {
                continue;
              }

              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                var _loop = function _loop() {
                  var file = _step2.value;

                  if (!matchObject(file)) {
                    return "continue";
                  }

                  var query = "";
                  var filename = file;
                  var hash = compilation.hash;
                  var querySplit = filename.indexOf("?");

                  if (querySplit >= 0) {
                    query = filename.substr(querySplit);
                    filename = filename.substr(0, querySplit);
                  }

                  var lastSlashIndex = filename.lastIndexOf("/");
                  var basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);
                  var data = {
                    hash: hash,
                    chunk: chunk,
                    filename: filename,
                    basename: basename,
                    query: query
                  };
                  var comment = compilation.getPath(banner(data), data);
                  compilation.updateAsset(file, function (old) {
                    return new ConcatSource(comment, "\n", old);
                  });
                };

                for (var _iterator2 = chunk.files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var _ret = _loop();

                  if (_ret === "continue") continue;
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      });
    }
  }]);

  return BannerPlugin;
}();

module.exports = BannerPlugin;