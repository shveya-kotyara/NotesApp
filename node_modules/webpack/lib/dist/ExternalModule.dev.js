/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require("webpack-sources"),
    OriginalSource = _require.OriginalSource,
    RawSource = _require.RawSource;

var Module = require("./Module");

var WebpackMissingModule = require("./dependencies/WebpackMissingModule");

var Template = require("./Template");
/** @typedef {import("./util/createHash").Hash} Hash */


var ExternalModule =
/*#__PURE__*/
function (_Module) {
  _inherits(ExternalModule, _Module);

  function ExternalModule(request, type, userRequest) {
    var _this;

    _classCallCheck(this, ExternalModule);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExternalModule).call(this, "javascript/dynamic", null)); // Info from Factory

    _this.request = request;
    _this.externalType = type;
    _this.userRequest = userRequest;
    _this.external = true;
    return _this;
  }

  _createClass(ExternalModule, [{
    key: "libIdent",
    value: function libIdent() {
      return this.userRequest;
    }
  }, {
    key: "chunkCondition",
    value: function chunkCondition(chunk) {
      return chunk.hasEntryModule();
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return "external " + JSON.stringify(this.request);
    }
  }, {
    key: "readableIdentifier",
    value: function readableIdentifier() {
      return "external " + JSON.stringify(this.request);
    }
  }, {
    key: "needRebuild",
    value: function needRebuild() {
      return false;
    }
  }, {
    key: "build",
    value: function build(options, compilation, resolver, fs, callback) {
      this.built = true;
      this.buildMeta = {};
      this.buildInfo = {};
      callback();
    }
  }, {
    key: "getSourceForGlobalVariableExternal",
    value: function getSourceForGlobalVariableExternal(variableName, type) {
      if (!Array.isArray(variableName)) {
        // make it an array as the look up works the same basically
        variableName = [variableName];
      } // needed for e.g. window["some"]["thing"]


      var objectLookup = variableName.map(function (r) {
        return "[".concat(JSON.stringify(r), "]");
      }).join("");
      return "(function() { module.exports = ".concat(type).concat(objectLookup, "; }());");
    }
  }, {
    key: "getSourceForCommonJsExternal",
    value: function getSourceForCommonJsExternal(moduleAndSpecifiers) {
      if (!Array.isArray(moduleAndSpecifiers)) {
        return "module.exports = require(".concat(JSON.stringify(moduleAndSpecifiers), ");");
      }

      var moduleName = moduleAndSpecifiers[0];
      var objectLookup = moduleAndSpecifiers.slice(1).map(function (r) {
        return "[".concat(JSON.stringify(r), "]");
      }).join("");
      return "module.exports = require(".concat(JSON.stringify(moduleName), ")").concat(objectLookup, ";");
    }
  }, {
    key: "checkExternalVariable",
    value: function checkExternalVariable(variableToCheck, request) {
      return "if(typeof ".concat(variableToCheck, " === 'undefined') {").concat(WebpackMissingModule.moduleCode(request), "}\n");
    }
  }, {
    key: "getSourceForAmdOrUmdExternal",
    value: function getSourceForAmdOrUmdExternal(id, optional, request) {
      var externalVariable = "__WEBPACK_EXTERNAL_MODULE_".concat(Template.toIdentifier("".concat(id)), "__");
      var missingModuleError = optional ? this.checkExternalVariable(externalVariable, request) : "";
      return "".concat(missingModuleError, "module.exports = ").concat(externalVariable, ";");
    }
  }, {
    key: "getSourceForDefaultCase",
    value: function getSourceForDefaultCase(optional, request) {
      if (!Array.isArray(request)) {
        // make it an array as the look up works the same basically
        request = [request];
      }

      var variableName = request[0];
      var missingModuleError = optional ? this.checkExternalVariable(variableName, request.join(".")) : "";
      var objectLookup = request.slice(1).map(function (r) {
        return "[".concat(JSON.stringify(r), "]");
      }).join("");
      return "".concat(missingModuleError, "module.exports = ").concat(variableName).concat(objectLookup, ";");
    }
  }, {
    key: "getSourceString",
    value: function getSourceString(runtime) {
      var request = _typeof(this.request) === "object" && !Array.isArray(this.request) ? this.request[this.externalType] : this.request;

      switch (this.externalType) {
        case "this":
        case "window":
        case "self":
          return this.getSourceForGlobalVariableExternal(request, this.externalType);

        case "global":
          return this.getSourceForGlobalVariableExternal(request, runtime.outputOptions.globalObject);

        case "commonjs":
        case "commonjs2":
          return this.getSourceForCommonJsExternal(request);

        case "amd":
        case "amd-require":
        case "umd":
        case "umd2":
        case "system":
          return this.getSourceForAmdOrUmdExternal(this.id, this.optional, request);

        default:
          return this.getSourceForDefaultCase(this.optional, request);
      }
    }
  }, {
    key: "getSource",
    value: function getSource(sourceString) {
      if (this.useSourceMap) {
        return new OriginalSource(sourceString, this.identifier());
      }

      return new RawSource(sourceString);
    }
  }, {
    key: "source",
    value: function source(dependencyTemplates, runtime) {
      return this.getSource(this.getSourceString(runtime));
    }
  }, {
    key: "size",
    value: function size() {
      return 42;
    }
    /**
     * @param {Hash} hash the hash used to track dependencies
     * @returns {void}
     */

  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      hash.update(this.externalType);
      hash.update(JSON.stringify(this.request));
      hash.update(JSON.stringify(Boolean(this.optional)));

      _get(_getPrototypeOf(ExternalModule.prototype), "updateHash", this).call(this, hash);
    }
  }]);

  return ExternalModule;
}(Module);

module.exports = ExternalModule;