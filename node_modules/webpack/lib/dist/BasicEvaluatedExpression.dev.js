/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TypeUnknown = 0;
var TypeNull = 1;
var TypeString = 2;
var TypeNumber = 3;
var TypeBoolean = 4;
var TypeRegExp = 5;
var TypeConditional = 6;
var TypeArray = 7;
var TypeConstArray = 8;
var TypeIdentifier = 9;
var TypeWrapped = 10;
var TypeTemplateString = 11;

var BasicEvaluatedExpression =
/*#__PURE__*/
function () {
  function BasicEvaluatedExpression() {
    _classCallCheck(this, BasicEvaluatedExpression);

    this.type = TypeUnknown;
    this.range = null;
    this.falsy = false;
    this.truthy = false;
    this.bool = null;
    this.number = null;
    this.regExp = null;
    this.string = null;
    this.quasis = null;
    this.parts = null;
    this.array = null;
    this.items = null;
    this.options = null;
    this.prefix = null;
    this.postfix = null;
    this.wrappedInnerExpressions = null;
    this.expression = null;
  }

  _createClass(BasicEvaluatedExpression, [{
    key: "isNull",
    value: function isNull() {
      return this.type === TypeNull;
    }
  }, {
    key: "isString",
    value: function isString() {
      return this.type === TypeString;
    }
  }, {
    key: "isNumber",
    value: function isNumber() {
      return this.type === TypeNumber;
    }
  }, {
    key: "isBoolean",
    value: function isBoolean() {
      return this.type === TypeBoolean;
    }
  }, {
    key: "isRegExp",
    value: function isRegExp() {
      return this.type === TypeRegExp;
    }
  }, {
    key: "isConditional",
    value: function isConditional() {
      return this.type === TypeConditional;
    }
  }, {
    key: "isArray",
    value: function isArray() {
      return this.type === TypeArray;
    }
  }, {
    key: "isConstArray",
    value: function isConstArray() {
      return this.type === TypeConstArray;
    }
  }, {
    key: "isIdentifier",
    value: function isIdentifier() {
      return this.type === TypeIdentifier;
    }
  }, {
    key: "isWrapped",
    value: function isWrapped() {
      return this.type === TypeWrapped;
    }
  }, {
    key: "isTemplateString",
    value: function isTemplateString() {
      return this.type === TypeTemplateString;
    }
  }, {
    key: "isTruthy",
    value: function isTruthy() {
      return this.truthy;
    }
  }, {
    key: "isFalsy",
    value: function isFalsy() {
      return this.falsy;
    }
  }, {
    key: "asBool",
    value: function asBool() {
      if (this.truthy) return true;
      if (this.falsy) return false;
      if (this.isBoolean()) return this.bool;
      if (this.isNull()) return false;
      if (this.isString()) return this.string !== "";
      if (this.isNumber()) return this.number !== 0;
      if (this.isRegExp()) return true;
      if (this.isArray()) return true;
      if (this.isConstArray()) return true;

      if (this.isWrapped()) {
        return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;
      }

      if (this.isTemplateString()) {
        var str = this.asString();
        if (typeof str === "string") return str !== "";
      }

      return undefined;
    }
  }, {
    key: "asString",
    value: function asString() {
      if (this.isBoolean()) return "".concat(this.bool);
      if (this.isNull()) return "null";
      if (this.isString()) return this.string;
      if (this.isNumber()) return "".concat(this.number);
      if (this.isRegExp()) return "".concat(this.regExp);

      if (this.isArray()) {
        var array = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            var itemStr = item.asString();
            if (itemStr === undefined) return undefined;
            array.push(itemStr);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return "".concat(array);
      }

      if (this.isConstArray()) return "".concat(this.array);

      if (this.isTemplateString()) {
        var str = "";
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.parts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var part = _step2.value;
            var partStr = part.asString();
            if (partStr === undefined) return undefined;
            str += partStr;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return str;
      }

      return undefined;
    }
  }, {
    key: "setString",
    value: function setString(string) {
      this.type = TypeString;
      this.string = string;
      return this;
    }
  }, {
    key: "setNull",
    value: function setNull() {
      this.type = TypeNull;
      return this;
    }
  }, {
    key: "setNumber",
    value: function setNumber(number) {
      this.type = TypeNumber;
      this.number = number;
      return this;
    }
  }, {
    key: "setBoolean",
    value: function setBoolean(bool) {
      this.type = TypeBoolean;
      this.bool = bool;
      return this;
    }
  }, {
    key: "setRegExp",
    value: function setRegExp(regExp) {
      this.type = TypeRegExp;
      this.regExp = regExp;
      return this;
    }
  }, {
    key: "setIdentifier",
    value: function setIdentifier(identifier) {
      this.type = TypeIdentifier;
      this.identifier = identifier;
      return this;
    }
  }, {
    key: "setWrapped",
    value: function setWrapped(prefix, postfix, innerExpressions) {
      this.type = TypeWrapped;
      this.prefix = prefix;
      this.postfix = postfix;
      this.wrappedInnerExpressions = innerExpressions;
      return this;
    }
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      this.type = TypeConditional;
      this.options = options;
      return this;
    }
  }, {
    key: "addOptions",
    value: function addOptions(options) {
      if (!this.options) {
        this.type = TypeConditional;
        this.options = [];
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = options[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var item = _step3.value;
          this.options.push(item);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return this;
    }
  }, {
    key: "setItems",
    value: function setItems(items) {
      this.type = TypeArray;
      this.items = items;
      return this;
    }
  }, {
    key: "setArray",
    value: function setArray(array) {
      this.type = TypeConstArray;
      this.array = array;
      return this;
    }
  }, {
    key: "setTemplateString",
    value: function setTemplateString(quasis, parts, kind) {
      this.type = TypeTemplateString;
      this.quasis = quasis;
      this.parts = parts;
      this.templateStringKind = kind;
      return this;
    }
  }, {
    key: "setTruthy",
    value: function setTruthy() {
      this.falsy = false;
      this.truthy = true;
      return this;
    }
  }, {
    key: "setFalsy",
    value: function setFalsy() {
      this.falsy = true;
      this.truthy = false;
      return this;
    }
  }, {
    key: "setRange",
    value: function setRange(range) {
      this.range = range;
      return this;
    }
  }, {
    key: "setExpression",
    value: function setExpression(expression) {
      this.expression = expression;
      return this;
    }
  }]);

  return BasicEvaluatedExpression;
}();

module.exports = BasicEvaluatedExpression;