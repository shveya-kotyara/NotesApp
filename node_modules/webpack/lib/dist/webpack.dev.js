/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Compiler = require("./Compiler");

var MultiCompiler = require("./MultiCompiler");

var NodeEnvironmentPlugin = require("./node/NodeEnvironmentPlugin");

var WebpackOptionsApply = require("./WebpackOptionsApply");

var WebpackOptionsDefaulter = require("./WebpackOptionsDefaulter");

var validateSchema = require("./validateSchema");

var WebpackOptionsValidationError = require("./WebpackOptionsValidationError");

var webpackOptionsSchema = require("../schemas/WebpackOptions.json");

var RemovedPluginError = require("./RemovedPluginError");

var version = require("../package.json").version;
/** @typedef {import("../declarations/WebpackOptions").WebpackOptions} WebpackOptions */

/**
 * @param {WebpackOptions} options options object
 * @param {function(Error=, Stats=): void=} callback callback
 * @returns {Compiler | MultiCompiler} the compiler object
 */


var webpack = function webpack(options, callback) {
  var webpackOptionsValidationErrors = validateSchema(webpackOptionsSchema, options);

  if (webpackOptionsValidationErrors.length) {
    throw new WebpackOptionsValidationError(webpackOptionsValidationErrors);
  }

  var compiler;

  if (Array.isArray(options)) {
    compiler = new MultiCompiler(Array.from(options).map(function (options) {
      return webpack(options);
    }));
  } else if (_typeof(options) === "object") {
    options = new WebpackOptionsDefaulter().process(options);
    compiler = new Compiler(options.context);
    compiler.options = options;
    new NodeEnvironmentPlugin({
      infrastructureLogging: options.infrastructureLogging
    }).apply(compiler);

    if (options.plugins && Array.isArray(options.plugins)) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = options.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var plugin = _step.value;

          if (typeof plugin === "function") {
            plugin.call(compiler, compiler);
          } else {
            plugin.apply(compiler);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    compiler.hooks.environment.call();
    compiler.hooks.afterEnvironment.call();
    compiler.options = new WebpackOptionsApply().process(options, compiler);
  } else {
    throw new Error("Invalid argument: options");
  }

  if (callback) {
    if (typeof callback !== "function") {
      throw new Error("Invalid argument: callback");
    }

    if (options.watch === true || Array.isArray(options) && options.some(function (o) {
      return o.watch;
    })) {
      var watchOptions = Array.isArray(options) ? options.map(function (o) {
        return o.watchOptions || {};
      }) : options.watchOptions || {};
      return compiler.watch(watchOptions, callback);
    }

    compiler.run(callback);
  }

  return compiler;
};

exports = module.exports = webpack;
exports.version = version;
webpack.WebpackOptionsDefaulter = WebpackOptionsDefaulter;
webpack.WebpackOptionsApply = WebpackOptionsApply;
webpack.Compiler = Compiler;
webpack.MultiCompiler = MultiCompiler;
webpack.NodeEnvironmentPlugin = NodeEnvironmentPlugin; // @ts-ignore Global @this directive is not supported

webpack.validate = validateSchema.bind(void 0, webpackOptionsSchema);
webpack.validateSchema = validateSchema;
webpack.WebpackOptionsValidationError = WebpackOptionsValidationError;

var exportPlugins = function exportPlugins(obj, mappings) {
  for (var _i = 0, _Object$keys = Object.keys(mappings); _i < _Object$keys.length; _i++) {
    var name = _Object$keys[_i];
    Object.defineProperty(obj, name, {
      configurable: false,
      enumerable: true,
      get: mappings[name]
    });
  }
};

exportPlugins(exports, {
  AutomaticPrefetchPlugin: function AutomaticPrefetchPlugin() {
    return require("./AutomaticPrefetchPlugin");
  },
  BannerPlugin: function BannerPlugin() {
    return require("./BannerPlugin");
  },
  CachePlugin: function CachePlugin() {
    return require("./CachePlugin");
  },
  ContextExclusionPlugin: function ContextExclusionPlugin() {
    return require("./ContextExclusionPlugin");
  },
  ContextReplacementPlugin: function ContextReplacementPlugin() {
    return require("./ContextReplacementPlugin");
  },
  DefinePlugin: function DefinePlugin() {
    return require("./DefinePlugin");
  },
  Dependency: function Dependency() {
    return require("./Dependency");
  },
  DllPlugin: function DllPlugin() {
    return require("./DllPlugin");
  },
  DllReferencePlugin: function DllReferencePlugin() {
    return require("./DllReferencePlugin");
  },
  EnvironmentPlugin: function EnvironmentPlugin() {
    return require("./EnvironmentPlugin");
  },
  EvalDevToolModulePlugin: function EvalDevToolModulePlugin() {
    return require("./EvalDevToolModulePlugin");
  },
  EvalSourceMapDevToolPlugin: function EvalSourceMapDevToolPlugin() {
    return require("./EvalSourceMapDevToolPlugin");
  },
  ExtendedAPIPlugin: function ExtendedAPIPlugin() {
    return require("./ExtendedAPIPlugin");
  },
  ExternalsPlugin: function ExternalsPlugin() {
    return require("./ExternalsPlugin");
  },
  HashedModuleIdsPlugin: function HashedModuleIdsPlugin() {
    return require("./HashedModuleIdsPlugin");
  },
  HotModuleReplacementPlugin: function HotModuleReplacementPlugin() {
    return require("./HotModuleReplacementPlugin");
  },
  IgnorePlugin: function IgnorePlugin() {
    return require("./IgnorePlugin");
  },
  LibraryTemplatePlugin: function LibraryTemplatePlugin() {
    return require("./LibraryTemplatePlugin");
  },
  LoaderOptionsPlugin: function LoaderOptionsPlugin() {
    return require("./LoaderOptionsPlugin");
  },
  LoaderTargetPlugin: function LoaderTargetPlugin() {
    return require("./LoaderTargetPlugin");
  },
  MemoryOutputFileSystem: function MemoryOutputFileSystem() {
    return require("./MemoryOutputFileSystem");
  },
  Module: function Module() {
    return require("./Module");
  },
  ModuleFilenameHelpers: function ModuleFilenameHelpers() {
    return require("./ModuleFilenameHelpers");
  },
  NamedChunksPlugin: function NamedChunksPlugin() {
    return require("./NamedChunksPlugin");
  },
  NamedModulesPlugin: function NamedModulesPlugin() {
    return require("./NamedModulesPlugin");
  },
  NoEmitOnErrorsPlugin: function NoEmitOnErrorsPlugin() {
    return require("./NoEmitOnErrorsPlugin");
  },
  NormalModuleReplacementPlugin: function NormalModuleReplacementPlugin() {
    return require("./NormalModuleReplacementPlugin");
  },
  PrefetchPlugin: function PrefetchPlugin() {
    return require("./PrefetchPlugin");
  },
  ProgressPlugin: function ProgressPlugin() {
    return require("./ProgressPlugin");
  },
  ProvidePlugin: function ProvidePlugin() {
    return require("./ProvidePlugin");
  },
  SetVarMainTemplatePlugin: function SetVarMainTemplatePlugin() {
    return require("./SetVarMainTemplatePlugin");
  },
  SingleEntryPlugin: function SingleEntryPlugin() {
    return require("./SingleEntryPlugin");
  },
  SourceMapDevToolPlugin: function SourceMapDevToolPlugin() {
    return require("./SourceMapDevToolPlugin");
  },
  Stats: function Stats() {
    return require("./Stats");
  },
  Template: function Template() {
    return require("./Template");
  },
  UmdMainTemplatePlugin: function UmdMainTemplatePlugin() {
    return require("./UmdMainTemplatePlugin");
  },
  WatchIgnorePlugin: function WatchIgnorePlugin() {
    return require("./WatchIgnorePlugin");
  }
});
exportPlugins(exports.dependencies = {}, {
  DependencyReference: function DependencyReference() {
    return require("./dependencies/DependencyReference");
  }
});
exportPlugins(exports.optimize = {}, {
  AggressiveMergingPlugin: function AggressiveMergingPlugin() {
    return require("./optimize/AggressiveMergingPlugin");
  },
  AggressiveSplittingPlugin: function AggressiveSplittingPlugin() {
    return require("./optimize/AggressiveSplittingPlugin");
  },
  ChunkModuleIdRangePlugin: function ChunkModuleIdRangePlugin() {
    return require("./optimize/ChunkModuleIdRangePlugin");
  },
  LimitChunkCountPlugin: function LimitChunkCountPlugin() {
    return require("./optimize/LimitChunkCountPlugin");
  },
  MinChunkSizePlugin: function MinChunkSizePlugin() {
    return require("./optimize/MinChunkSizePlugin");
  },
  ModuleConcatenationPlugin: function ModuleConcatenationPlugin() {
    return require("./optimize/ModuleConcatenationPlugin");
  },
  OccurrenceOrderPlugin: function OccurrenceOrderPlugin() {
    return require("./optimize/OccurrenceOrderPlugin");
  },
  OccurrenceModuleOrderPlugin: function OccurrenceModuleOrderPlugin() {
    return require("./optimize/OccurrenceModuleOrderPlugin");
  },
  OccurrenceChunkOrderPlugin: function OccurrenceChunkOrderPlugin() {
    return require("./optimize/OccurrenceChunkOrderPlugin");
  },
  RuntimeChunkPlugin: function RuntimeChunkPlugin() {
    return require("./optimize/RuntimeChunkPlugin");
  },
  SideEffectsFlagPlugin: function SideEffectsFlagPlugin() {
    return require("./optimize/SideEffectsFlagPlugin");
  },
  SplitChunksPlugin: function SplitChunksPlugin() {
    return require("./optimize/SplitChunksPlugin");
  }
});
exportPlugins(exports.web = {}, {
  FetchCompileWasmTemplatePlugin: function FetchCompileWasmTemplatePlugin() {
    return require("./web/FetchCompileWasmTemplatePlugin");
  },
  JsonpTemplatePlugin: function JsonpTemplatePlugin() {
    return require("./web/JsonpTemplatePlugin");
  }
});
exportPlugins(exports.webworker = {}, {
  WebWorkerTemplatePlugin: function WebWorkerTemplatePlugin() {
    return require("./webworker/WebWorkerTemplatePlugin");
  }
});
exportPlugins(exports.node = {}, {
  NodeTemplatePlugin: function NodeTemplatePlugin() {
    return require("./node/NodeTemplatePlugin");
  },
  ReadFileCompileWasmTemplatePlugin: function ReadFileCompileWasmTemplatePlugin() {
    return require("./node/ReadFileCompileWasmTemplatePlugin");
  }
});
exportPlugins(exports.debug = {}, {
  ProfilingPlugin: function ProfilingPlugin() {
    return require("./debug/ProfilingPlugin");
  }
});
exportPlugins(exports.util = {}, {
  createHash: function createHash() {
    return require("./util/createHash");
  }
});

var defineMissingPluginError = function defineMissingPluginError(namespace, pluginName, errorMessage) {
  Object.defineProperty(namespace, pluginName, {
    configurable: false,
    enumerable: true,
    get: function get() {
      throw new RemovedPluginError(errorMessage);
    }
  });
}; // TODO remove in webpack 5


defineMissingPluginError(exports.optimize, "UglifyJsPlugin", "webpack.optimize.UglifyJsPlugin has been removed, please use config.optimization.minimize instead."); // TODO remove in webpack 5

defineMissingPluginError(exports.optimize, "CommonsChunkPlugin", "webpack.optimize.CommonsChunkPlugin has been removed, please use config.optimization.splitChunks instead.");