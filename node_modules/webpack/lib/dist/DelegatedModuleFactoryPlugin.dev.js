/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DelegatedModule = require("./DelegatedModule"); // options.source
// options.type
// options.context
// options.scope
// options.content


var DelegatedModuleFactoryPlugin =
/*#__PURE__*/
function () {
  function DelegatedModuleFactoryPlugin(options) {
    _classCallCheck(this, DelegatedModuleFactoryPlugin);

    this.options = options;
    options.type = options.type || "require";
    options.extensions = options.extensions || ["", ".wasm", ".mjs", ".js", ".json"];
  }

  _createClass(DelegatedModuleFactoryPlugin, [{
    key: "apply",
    value: function apply(normalModuleFactory) {
      var _this = this;

      var scope = this.options.scope;

      if (scope) {
        normalModuleFactory.hooks.factory.tap("DelegatedModuleFactoryPlugin", function (factory) {
          return function (data, callback) {
            var dependency = data.dependencies[0];
            var request = dependency.request;

            if (request && request.indexOf(scope + "/") === 0) {
              var innerRequest = "." + request.substr(scope.length);
              var resolved;

              if (innerRequest in _this.options.content) {
                resolved = _this.options.content[innerRequest];
                return callback(null, new DelegatedModule(_this.options.source, resolved, _this.options.type, innerRequest, request));
              }

              for (var i = 0; i < _this.options.extensions.length; i++) {
                var extension = _this.options.extensions[i];
                var requestPlusExt = innerRequest + extension;

                if (requestPlusExt in _this.options.content) {
                  resolved = _this.options.content[requestPlusExt];
                  return callback(null, new DelegatedModule(_this.options.source, resolved, _this.options.type, requestPlusExt, request + extension));
                }
              }
            }

            return factory(data, callback);
          };
        });
      } else {
        normalModuleFactory.hooks.module.tap("DelegatedModuleFactoryPlugin", function (module) {
          if (module.libIdent) {
            var request = module.libIdent(_this.options);

            if (request && request in _this.options.content) {
              var resolved = _this.options.content[request];
              return new DelegatedModule(_this.options.source, resolved, _this.options.type, request, module);
            }
          }

          return module;
        });
      }
    }
  }]);

  return DelegatedModuleFactoryPlugin;
}();

module.exports = DelegatedModuleFactoryPlugin;