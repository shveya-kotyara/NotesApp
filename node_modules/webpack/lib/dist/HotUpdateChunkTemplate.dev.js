/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Template = require("./Template");

var HotUpdateChunk = require("./HotUpdateChunk");

var _require = require("tapable"),
    Tapable = _require.Tapable,
    SyncWaterfallHook = _require.SyncWaterfallHook,
    SyncHook = _require.SyncHook;

module.exports =
/*#__PURE__*/
function (_Tapable) {
  _inherits(HotUpdateChunkTemplate, _Tapable);

  function HotUpdateChunkTemplate(outputOptions) {
    var _this;

    _classCallCheck(this, HotUpdateChunkTemplate);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HotUpdateChunkTemplate).call(this));
    _this.outputOptions = outputOptions || {};
    _this.hooks = {
      modules: new SyncWaterfallHook(["source", "modules", "removedModules", "moduleTemplate", "dependencyTemplates"]),
      render: new SyncWaterfallHook(["source", "modules", "removedModules", "hash", "id", "moduleTemplate", "dependencyTemplates"]),
      hash: new SyncHook(["hash"])
    };
    return _this;
  }

  _createClass(HotUpdateChunkTemplate, [{
    key: "render",
    value: function render(id, modules, removedModules, hash, moduleTemplate, dependencyTemplates) {
      var hotUpdateChunk = new HotUpdateChunk();
      hotUpdateChunk.id = id;
      hotUpdateChunk.setModules(modules);
      hotUpdateChunk.removedModules = removedModules;
      var modulesSource = Template.renderChunkModules(hotUpdateChunk, function (m) {
        return typeof m.source === "function";
      }, moduleTemplate, dependencyTemplates);
      var core = this.hooks.modules.call(modulesSource, modules, removedModules, moduleTemplate, dependencyTemplates);
      var source = this.hooks.render.call(core, modules, removedModules, hash, id, moduleTemplate, dependencyTemplates);
      return source;
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      hash.update("HotUpdateChunkTemplate");
      hash.update("1");
      this.hooks.hash.call(hash);
    }
  }]);

  return HotUpdateChunkTemplate;
}(Tapable);