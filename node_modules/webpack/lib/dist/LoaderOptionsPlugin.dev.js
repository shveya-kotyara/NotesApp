/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ModuleFilenameHelpers = require("./ModuleFilenameHelpers");

var validateOptions = require("schema-utils");

var schema = require("../schemas/plugins/LoaderOptionsPlugin.json");
/** @typedef {import("../declarations/plugins/LoaderOptionsPlugin").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */


var LoaderOptionsPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {LoaderOptionsPluginOptions} options options object
   */
  function LoaderOptionsPlugin(options) {
    _classCallCheck(this, LoaderOptionsPlugin);

    validateOptions(schema, options || {}, "Loader Options Plugin");
    if (_typeof(options) !== "object") options = {};

    if (!options.test) {
      options.test = {
        test: function test() {
          return true;
        }
      };
    }

    this.options = options;
  }

  _createClass(LoaderOptionsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;
      compiler.hooks.compilation.tap("LoaderOptionsPlugin", function (compilation) {
        compilation.hooks.normalModuleLoader.tap("LoaderOptionsPlugin", function (context, module) {
          var resource = module.resource;
          if (!resource) return;
          var i = resource.indexOf("?");

          if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.substr(0, i))) {
            for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {
              var key = _Object$keys[_i];

              if (key === "include" || key === "exclude" || key === "test") {
                continue;
              }

              context[key] = options[key];
            }
          }
        });
      });
    }
  }]);

  return LoaderOptionsPlugin;
}();

module.exports = LoaderOptionsPlugin;