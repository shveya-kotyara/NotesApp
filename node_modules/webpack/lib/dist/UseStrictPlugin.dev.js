/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ConstDependency = require("./dependencies/ConstDependency");
/** @typedef {import("./Compiler")} Compiler */


var UseStrictPlugin =
/*#__PURE__*/
function () {
  function UseStrictPlugin() {
    _classCallCheck(this, UseStrictPlugin);
  }

  _createClass(UseStrictPlugin, [{
    key: "apply",

    /**
     * @param {Compiler} compiler Webpack Compiler
     * @returns {void}
     */
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("UseStrictPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;

        var handler = function handler(parser) {
          parser.hooks.program.tap("UseStrictPlugin", function (ast) {
            var firstNode = ast.body[0];

            if (firstNode && firstNode.type === "ExpressionStatement" && firstNode.expression.type === "Literal" && firstNode.expression.value === "use strict") {
              // Remove "use strict" expression. It will be added later by the renderer again.
              // This is necessary in order to not break the strict mode when webpack prepends code.
              // @see https://github.com/webpack/webpack/issues/1970
              var dep = new ConstDependency("", firstNode.range);
              dep.loc = firstNode.loc;
              parser.state.current.addDependency(dep);
              parser.state.module.buildInfo.strict = true;
            }
          });
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("UseStrictPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("UseStrictPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/esm").tap("UseStrictPlugin", handler);
      });
    }
  }]);

  return UseStrictPlugin;
}();

module.exports = UseStrictPlugin;