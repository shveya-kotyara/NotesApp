/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var parseJson = require("json-parse-better-errors");

var DelegatedSourceDependency = require("./dependencies/DelegatedSourceDependency");

var DelegatedModuleFactoryPlugin = require("./DelegatedModuleFactoryPlugin");

var ExternalModuleFactoryPlugin = require("./ExternalModuleFactoryPlugin");

var DelegatedExportsDependency = require("./dependencies/DelegatedExportsDependency");

var NullFactory = require("./NullFactory");

var makePathsRelative = require("./util/identifier").makePathsRelative;

var WebpackError = require("./WebpackError");

var validateOptions = require("schema-utils");

var schema = require("../schemas/plugins/DllReferencePlugin.json");
/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptions} DllReferencePluginOptions */

/** @typedef {import("../declarations/plugins/DllReferencePlugin").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */


var DllReferencePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {DllReferencePluginOptions} options options object
   */
  function DllReferencePlugin(options) {
    _classCallCheck(this, DllReferencePlugin);

    validateOptions(schema, options, "Dll Reference Plugin");
    this.options = options;
  }

  _createClass(DllReferencePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("DllReferencePlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);
        compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());
      });
      compiler.hooks.beforeCompile.tapAsync("DllReferencePlugin", function (params, callback) {
        if ("manifest" in _this.options) {
          var manifest = _this.options.manifest;

          if (typeof manifest === "string") {
            params.compilationDependencies.add(manifest);
            compiler.inputFileSystem.readFile(manifest, function (err, result) {
              if (err) return callback(err); // Catch errors parsing the manifest so that blank
              // or malformed manifest files don't kill the process.

              try {
                params["dll reference " + manifest] = parseJson(result.toString("utf-8"));
              } catch (e) {
                // Store the error in the params so that it can
                // be added as a compilation error later on.
                var manifestPath = makePathsRelative(compiler.options.context, manifest);
                params["dll reference parse error " + manifest] = new DllManifestError(manifestPath, e.message);
              }

              return callback();
            });
            return;
          }
        }

        return callback();
      });
      compiler.hooks.compile.tap("DllReferencePlugin", function (params) {
        var name = _this.options.name;
        var sourceType = _this.options.sourceType;
        var content = "content" in _this.options ? _this.options.content : undefined;

        if ("manifest" in _this.options) {
          var manifestParameter = _this.options.manifest;
          var manifest;

          if (typeof manifestParameter === "string") {
            // If there was an error parsing the manifest
            // file, exit now because the error will be added
            // as a compilation error in the "compilation" hook.
            if (params["dll reference parse error " + manifestParameter]) {
              return;
            }

            manifest =
            /** @type {DllReferencePluginOptionsManifest} */
            params["dll reference " + manifestParameter];
          } else {
            manifest = manifestParameter;
          }

          if (manifest) {
            if (!name) name = manifest.name;
            if (!sourceType) sourceType = manifest.type;
            if (!content) content = manifest.content;
          }
        }

        var externals = {};
        var source = "dll-reference " + name;
        externals[source] = name;
        var normalModuleFactory = params.normalModuleFactory;
        new ExternalModuleFactoryPlugin(sourceType || "var", externals).apply(normalModuleFactory);
        new DelegatedModuleFactoryPlugin({
          source: source,
          type: _this.options.type,
          scope: _this.options.scope,
          context: _this.options.context || compiler.options.context,
          content: content,
          extensions: _this.options.extensions
        }).apply(normalModuleFactory);
      });
      compiler.hooks.compilation.tap("DllReferencePlugin", function (compilation, params) {
        if ("manifest" in _this.options) {
          var manifest = _this.options.manifest;

          if (typeof manifest === "string") {
            // If there was an error parsing the manifest file, add the
            // error as a compilation error to make the compilation fail.
            var e = params["dll reference parse error " + manifest];

            if (e) {
              compilation.errors.push(e);
            }
          }
        }
      });
    }
  }]);

  return DllReferencePlugin;
}();

var DllManifestError =
/*#__PURE__*/
function (_WebpackError) {
  _inherits(DllManifestError, _WebpackError);

  function DllManifestError(filename, message) {
    var _this2;

    _classCallCheck(this, DllManifestError);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DllManifestError).call(this));
    _this2.name = "DllManifestError";
    _this2.message = "Dll manifest ".concat(filename, "\n").concat(message);
    Error.captureStackTrace(_assertThisInitialized(_this2), _this2.constructor);
    return _this2;
  }

  return DllManifestError;
}(WebpackError);

module.exports = DllReferencePlugin;