/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource,
    RawSource = _require.RawSource;

var stringifySafe = function stringifySafe(data) {
  var stringified = JSON.stringify(data);

  if (!stringified) {
    return undefined; // Invalid JSON
  }

  return stringified.replace(/\u2028|\u2029/g, function (str) {
    return str === "\u2029" ? "\\u2029" : "\\u2028";
  }); // invalid in JavaScript but valid JSON
};

var JsonGenerator =
/*#__PURE__*/
function () {
  function JsonGenerator() {
    _classCallCheck(this, JsonGenerator);
  }

  _createClass(JsonGenerator, [{
    key: "generate",
    value: function generate(module, dependencyTemplates, runtimeTemplate) {
      var source = new ConcatSource();
      var data = module.buildInfo.jsonData;

      if (data === undefined) {
        return new RawSource(runtimeTemplate.missingModuleStatement({
          request: module.rawRequest
        }));
      }

      var finalJson;

      if (Array.isArray(module.buildMeta.providedExports) && !module.isUsed("default")) {
        // Only some exports are used: We can optimize here, by only generating a part of the JSON
        var reducedJson = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = module.buildMeta.providedExports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var exportName = _step.value;
            if (exportName === "default") continue;
            var used = module.isUsed(exportName);

            if (used) {
              reducedJson[used] = data[exportName];
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        finalJson = reducedJson;
      } else {
        finalJson = data;
      } // Use JSON because JSON.parse() is much faster than JavaScript evaluation


      var jsonSource = JSON.stringify(stringifySafe(finalJson));
      var jsonExpr = "JSON.parse(".concat(jsonSource, ")");
      source.add("".concat(module.moduleArgument, ".exports = ").concat(jsonExpr, ";"));
      return source;
    }
  }]);

  return JsonGenerator;
}();

module.exports = JsonGenerator;