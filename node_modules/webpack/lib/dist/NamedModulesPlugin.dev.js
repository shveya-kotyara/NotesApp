/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var createHash = require("./util/createHash");

var RequestShortener = require("./RequestShortener");

var getHash = function getHash(str) {
  var hash = createHash("md4");
  hash.update(str);
  var digest =
  /** @type {string} */
  hash.digest("hex");
  return digest.substr(0, 4);
};

var NamedModulesPlugin =
/*#__PURE__*/
function () {
  function NamedModulesPlugin(options) {
    _classCallCheck(this, NamedModulesPlugin);

    this.options = options || {};
  }

  _createClass(NamedModulesPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("NamedModulesPlugin", function (compilation) {
        compilation.hooks.beforeModuleIds.tap("NamedModulesPlugin", function (modules) {
          var namedModules = new Map();
          var context = _this.options.context || compiler.options.context;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _module = _step.value;

              if (_module.id === null && _module.libIdent) {
                _module.id = _module.libIdent({
                  context: context
                });
              }

              if (_module.id !== null) {
                var namedModule = namedModules.get(_module.id);

                if (namedModule !== undefined) {
                  namedModule.push(_module);
                } else {
                  namedModules.set(_module.id, [_module]);
                }
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = namedModules.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _namedModule = _step2.value;

              if (_namedModule.length > 1) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = _namedModule[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var _module2 = _step3.value;
                    var requestShortener = new RequestShortener(context);
                    _module2.id = "".concat(_module2.id, "?").concat(getHash(requestShortener.shorten(_module2.identifier())));
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                      _iterator3["return"]();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        });
      });
    }
  }]);

  return NamedModulesPlugin;
}();

module.exports = NamedModulesPlugin;