/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;
/** @typedef {import("./Compilation")} Compilation */


var SetVarMainTemplatePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {string} varExpression the accessor where the library is exported
   * @param {boolean} copyObject specify copying the exports
   */
  function SetVarMainTemplatePlugin(varExpression, copyObject) {
    _classCallCheck(this, SetVarMainTemplatePlugin);

    /** @type {string} */
    this.varExpression = varExpression;
    /** @type {boolean} */

    this.copyObject = copyObject;
  }
  /**
   * @param {Compilation} compilation the compilation instance
   * @returns {void}
   */


  _createClass(SetVarMainTemplatePlugin, [{
    key: "apply",
    value: function apply(compilation) {
      var _this = this;

      var mainTemplate = compilation.mainTemplate,
          chunkTemplate = compilation.chunkTemplate;

      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {
        var varExpression = mainTemplate.getAssetPath(_this.varExpression, {
          hash: hash,
          chunk: chunk
        });

        if (_this.copyObject) {
          return new ConcatSource("(function(e, a) { for(var i in a) e[i] = a[i]; }(".concat(varExpression, ", "), source, "))");
        } else {
          var prefix = "".concat(varExpression, " =\n");
          return new ConcatSource(prefix, source);
        }
      };

      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {
        var template = _arr[_i];
        template.hooks.renderWithEntry.tap("SetVarMainTemplatePlugin", onRenderWithEntry);
      }

      mainTemplate.hooks.globalHashPaths.tap("SetVarMainTemplatePlugin", function (paths) {
        if (_this.varExpression) paths.push(_this.varExpression);
        return paths;
      });
      mainTemplate.hooks.hash.tap("SetVarMainTemplatePlugin", function (hash) {
        hash.update("set var");
        hash.update("".concat(_this.varExpression));
        hash.update("".concat(_this.copyObject));
      });
    }
  }]);

  return SetVarMainTemplatePlugin;
}();

module.exports = SetVarMainTemplatePlugin;