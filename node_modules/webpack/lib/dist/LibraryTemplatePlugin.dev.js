/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var SetVarMainTemplatePlugin = require("./SetVarMainTemplatePlugin");
/** @typedef {import("../declarations/WebpackOptions").LibraryCustomUmdObject} LibraryCustomUmdObject */

/** @typedef {import("./Compiler")} Compiler */

/**
 * @param {string[]} accessor the accessor to convert to path
 * @returns {string} the path
 */


var accessorToObjectAccess = function accessorToObjectAccess(accessor) {
  return accessor.map(function (a) {
    return "[".concat(JSON.stringify(a), "]");
  }).join("");
};
/**
 * @param {string=} base the path prefix
 * @param {string|string[]|LibraryCustomUmdObject} accessor the accessor
 * @param {"amd" | "commonjs" | "root"} umdProperty property used when a custom umd object is provided
 * @param {string=} joinWith the element separator
 * @returns {string} the path
 */


var accessorAccess = function accessorAccess(base, accessor, umdProperty) {
  var joinWith = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "; ";
  var normalizedAccessor = _typeof(accessor) === "object" && !Array.isArray(accessor) ? accessor[umdProperty] : accessor;
  var accessors = Array.isArray(normalizedAccessor) ? normalizedAccessor : [normalizedAccessor];
  return accessors.map(function (_, idx) {
    var a = base ? base + accessorToObjectAccess(accessors.slice(0, idx + 1)) : accessors[0] + accessorToObjectAccess(accessors.slice(1, idx + 1));
    if (idx === accessors.length - 1) return a;

    if (idx === 0 && base === undefined) {
      return "".concat(a, " = typeof ").concat(a, " === \"object\" ? ").concat(a, " : {}");
    }

    return "".concat(a, " = ").concat(a, " || {}");
  }).join(joinWith);
};

var LibraryTemplatePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {string|string[]|LibraryCustomUmdObject} name name of library
   * @param {string} target type of library
   * @param {boolean} umdNamedDefine setting this to true will name the UMD module
   * @param {string|TODO} auxiliaryComment comment in the UMD wrapper
   * @param {string|string[]} exportProperty which export should be exposed as library
   */
  function LibraryTemplatePlugin(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {
    _classCallCheck(this, LibraryTemplatePlugin);

    this.name = name;
    this.target = target;
    this.umdNamedDefine = umdNamedDefine;
    this.auxiliaryComment = auxiliaryComment;
    this.exportProperty = exportProperty;
  }
  /**
   * @param {Compiler} compiler the compiler instance
   * @returns {void}
   */


  _createClass(LibraryTemplatePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.thisCompilation.tap("LibraryTemplatePlugin", function (compilation) {
        if (_this.exportProperty) {
          var ExportPropertyMainTemplatePlugin = require("./ExportPropertyMainTemplatePlugin");

          new ExportPropertyMainTemplatePlugin(_this.exportProperty).apply(compilation);
        }

        switch (_this.target) {
          case "var":
            if (!_this.name || _typeof(_this.name) === "object" && !Array.isArray(_this.name)) {
              throw new Error("library name must be set and not an UMD custom object for non-UMD target");
            }

            new SetVarMainTemplatePlugin("var ".concat(accessorAccess(undefined, _this.name, "root")), false).apply(compilation);
            break;

          case "assign":
            new SetVarMainTemplatePlugin(accessorAccess(undefined, _this.name, "root"), false).apply(compilation);
            break;

          case "this":
          case "self":
          case "window":
            if (_this.name) {
              new SetVarMainTemplatePlugin(accessorAccess(_this.target, _this.name, "root"), false).apply(compilation);
            } else {
              new SetVarMainTemplatePlugin(_this.target, true).apply(compilation);
            }

            break;

          case "global":
            if (_this.name) {
              new SetVarMainTemplatePlugin(accessorAccess(compilation.runtimeTemplate.outputOptions.globalObject, _this.name, "root"), false).apply(compilation);
            } else {
              new SetVarMainTemplatePlugin(compilation.runtimeTemplate.outputOptions.globalObject, true).apply(compilation);
            }

            break;

          case "commonjs":
            if (_this.name) {
              new SetVarMainTemplatePlugin(accessorAccess("exports", _this.name, "commonjs"), false).apply(compilation);
            } else {
              new SetVarMainTemplatePlugin("exports", true).apply(compilation);
            }

            break;

          case "commonjs2":
          case "commonjs-module":
            new SetVarMainTemplatePlugin("module.exports", false).apply(compilation);
            break;

          case "amd":
          case "amd-require":
            {
              var AmdMainTemplatePlugin = require("./AmdMainTemplatePlugin");

              if (_this.name && typeof _this.name !== "string") {
                throw new Error("library name must be a string for amd target");
              }

              new AmdMainTemplatePlugin({
                name: _this.name,
                requireAsWrapper: _this.target === "amd-require"
              }).apply(compilation);
              break;
            }

          case "umd":
          case "umd2":
            {
              var UmdMainTemplatePlugin = require("./UmdMainTemplatePlugin");

              new UmdMainTemplatePlugin(_this.name, {
                optionalAmdExternalAsGlobal: _this.target === "umd2",
                namedDefine: _this.umdNamedDefine,
                auxiliaryComment: _this.auxiliaryComment
              }).apply(compilation);
              break;
            }

          case "jsonp":
            {
              var JsonpExportMainTemplatePlugin = require("./web/JsonpExportMainTemplatePlugin");

              if (typeof _this.name !== "string") throw new Error("library name must be a string for jsonp target");
              new JsonpExportMainTemplatePlugin(_this.name).apply(compilation);
              break;
            }

          case "system":
            {
              var SystemMainTemplatePlugin = require("./SystemMainTemplatePlugin");

              new SystemMainTemplatePlugin({
                name: _this.name
              }).apply(compilation);
              break;
            }

          default:
            throw new Error("".concat(_this.target, " is not a valid Library target"));
        }
      });
    }
  }]);

  return LibraryTemplatePlugin;
}();

module.exports = LibraryTemplatePlugin;