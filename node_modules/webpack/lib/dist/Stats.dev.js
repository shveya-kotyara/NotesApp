/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var RequestShortener = require("./RequestShortener");

var SizeFormatHelpers = require("./SizeFormatHelpers");

var formatLocation = require("./formatLocation");

var identifierUtils = require("./util/identifier");

var compareLocations = require("./compareLocations");

var _require = require("./logging/Logger"),
    LogType = _require.LogType;

var optionsOrFallback = function optionsOrFallback() {
  var optionValues = [];
  optionValues.push.apply(optionValues, arguments);
  return optionValues.find(function (optionValue) {
    return optionValue !== undefined;
  });
};

var compareId = function compareId(a, b) {
  if (_typeof(a) !== _typeof(b)) {
    return _typeof(a) < _typeof(b) ? -1 : 1;
  }

  if (a < b) return -1;
  if (a > b) return 1;
  return 0;
};

var Stats =
/*#__PURE__*/
function () {
  function Stats(compilation) {
    _classCallCheck(this, Stats);

    this.compilation = compilation;
    this.hash = compilation.hash;
    this.startTime = undefined;
    this.endTime = undefined;
  }

  _createClass(Stats, [{
    key: "formatFilePath",
    value: function formatFilePath(filePath) {
      var OPTIONS_REGEXP = /^(\s|\S)*!/;
      return filePath.includes("!") ? "".concat(filePath.replace(OPTIONS_REGEXP, ""), " (").concat(filePath, ")") : "".concat(filePath);
    }
  }, {
    key: "hasWarnings",
    value: function hasWarnings() {
      return this.compilation.warnings.length > 0 || this.compilation.children.some(function (child) {
        return child.getStats().hasWarnings();
      });
    }
  }, {
    key: "hasErrors",
    value: function hasErrors() {
      return this.compilation.errors.length > 0 || this.compilation.children.some(function (child) {
        return child.getStats().hasErrors();
      });
    } // remove a prefixed "!" that can be specified to reverse sort order

  }, {
    key: "normalizeFieldKey",
    value: function normalizeFieldKey(field) {
      if (field[0] === "!") {
        return field.substr(1);
      }

      return field;
    } // if a field is prefixed by a "!" reverse sort order

  }, {
    key: "sortOrderRegular",
    value: function sortOrderRegular(field) {
      if (field[0] === "!") {
        return false;
      }

      return true;
    }
  }, {
    key: "toJson",
    value: function toJson(options, forToString) {
      var _this = this;

      if (typeof options === "boolean" || typeof options === "string") {
        options = Stats.presetToOptions(options);
      } else if (!options) {
        options = {};
      }

      var optionOrLocalFallback = function optionOrLocalFallback(v, def) {
        return v !== undefined ? v : options.all !== undefined ? options.all : def;
      };

      var testAgainstGivenOption = function testAgainstGivenOption(item) {
        if (typeof item === "string") {
          var regExp = new RegExp("[\\\\/]".concat(item.replace( // eslint-disable-next-line no-useless-escape
          /[-[\]{}()*+?.\\^$|]/g, "\\$&"), "([\\\\/]|$|!|\\?)"));
          return function (ident) {
            return regExp.test(ident);
          };
        }

        if (item && _typeof(item) === "object" && typeof item.test === "function") {
          return function (ident) {
            return item.test(ident);
          };
        }

        if (typeof item === "function") {
          return item;
        }

        if (typeof item === "boolean") {
          return function () {
            return item;
          };
        }
      };

      var compilation = this.compilation;
      var context = optionsOrFallback(options.context, compilation.compiler.context);
      var requestShortener = compilation.compiler.context === context ? compilation.requestShortener : new RequestShortener(context);
      var showPerformance = optionOrLocalFallback(options.performance, true);
      var showHash = optionOrLocalFallback(options.hash, true);
      var showEnv = optionOrLocalFallback(options.env, false);
      var showVersion = optionOrLocalFallback(options.version, true);
      var showTimings = optionOrLocalFallback(options.timings, true);
      var showBuiltAt = optionOrLocalFallback(options.builtAt, true);
      var showAssets = optionOrLocalFallback(options.assets, true);
      var showEntrypoints = optionOrLocalFallback(options.entrypoints, true);
      var showChunkGroups = optionOrLocalFallback(options.chunkGroups, !forToString);
      var showChunks = optionOrLocalFallback(options.chunks, !forToString);
      var showChunkModules = optionOrLocalFallback(options.chunkModules, true);
      var showChunkOrigins = optionOrLocalFallback(options.chunkOrigins, !forToString);
      var showModules = optionOrLocalFallback(options.modules, true);
      var showNestedModules = optionOrLocalFallback(options.nestedModules, true);
      var showModuleAssets = optionOrLocalFallback(options.moduleAssets, !forToString);
      var showDepth = optionOrLocalFallback(options.depth, !forToString);
      var showCachedModules = optionOrLocalFallback(options.cached, true);
      var showCachedAssets = optionOrLocalFallback(options.cachedAssets, true);
      var showReasons = optionOrLocalFallback(options.reasons, !forToString);
      var showUsedExports = optionOrLocalFallback(options.usedExports, !forToString);
      var showProvidedExports = optionOrLocalFallback(options.providedExports, !forToString);
      var showOptimizationBailout = optionOrLocalFallback(options.optimizationBailout, !forToString);
      var showChildren = optionOrLocalFallback(options.children, true);
      var showSource = optionOrLocalFallback(options.source, !forToString);
      var showModuleTrace = optionOrLocalFallback(options.moduleTrace, true);
      var showErrors = optionOrLocalFallback(options.errors, true);
      var showErrorDetails = optionOrLocalFallback(options.errorDetails, !forToString);
      var showWarnings = optionOrLocalFallback(options.warnings, true);
      var warningsFilter = optionsOrFallback(options.warningsFilter, null);
      var showPublicPath = optionOrLocalFallback(options.publicPath, !forToString);
      var showLogging = optionOrLocalFallback(options.logging, forToString ? "info" : true);
      var showLoggingTrace = optionOrLocalFallback(options.loggingTrace, !forToString);
      var loggingDebug = [].concat(optionsOrFallback(options.loggingDebug, [])).map(testAgainstGivenOption);
      var excludeModules = [].concat(optionsOrFallback(options.excludeModules, options.exclude, [])).map(testAgainstGivenOption);
      var excludeAssets = [].concat(optionsOrFallback(options.excludeAssets, [])).map(testAgainstGivenOption);
      var maxModules = optionsOrFallback(options.maxModules, forToString ? 15 : Infinity);
      var sortModules = optionsOrFallback(options.modulesSort, "id");
      var sortChunks = optionsOrFallback(options.chunksSort, "id");
      var sortAssets = optionsOrFallback(options.assetsSort, "");
      var showOutputPath = optionOrLocalFallback(options.outputPath, !forToString);

      if (!showCachedModules) {
        excludeModules.push(function (ident, module) {
          return !module.built;
        });
      }

      var createModuleFilter = function createModuleFilter() {
        var i = 0;
        return function (module) {
          if (excludeModules.length > 0) {
            var ident = requestShortener.shorten(module.resource);
            var excluded = excludeModules.some(function (fn) {
              return fn(ident, module);
            });
            if (excluded) return false;
          }

          var result = i < maxModules;
          i++;
          return result;
        };
      };

      var createAssetFilter = function createAssetFilter() {
        return function (asset) {
          if (excludeAssets.length > 0) {
            var ident = asset.name;
            var excluded = excludeAssets.some(function (fn) {
              return fn(ident, asset);
            });
            if (excluded) return false;
          }

          return showCachedAssets || asset.emitted;
        };
      };

      var sortByFieldAndOrder = function sortByFieldAndOrder(fieldKey, a, b) {
        if (a[fieldKey] === null && b[fieldKey] === null) return 0;
        if (a[fieldKey] === null) return 1;
        if (b[fieldKey] === null) return -1;
        if (a[fieldKey] === b[fieldKey]) return 0;
        if (_typeof(a[fieldKey]) !== _typeof(b[fieldKey])) return _typeof(a[fieldKey]) < _typeof(b[fieldKey]) ? -1 : 1;
        return a[fieldKey] < b[fieldKey] ? -1 : 1;
      };

      var sortByField = function sortByField(field, originalArray) {
        var originalMap = originalArray.reduce(function (map, v, i) {
          map.set(v, i);
          return map;
        }, new Map());
        return function (a, b) {
          if (field) {
            var fieldKey = _this.normalizeFieldKey(field); // if a field is prefixed with a "!" the sort is reversed!


            var sortIsRegular = _this.sortOrderRegular(field);

            var cmp = sortByFieldAndOrder(fieldKey, sortIsRegular ? a : b, sortIsRegular ? b : a);
            if (cmp) return cmp;
          }

          return originalMap.get(a) - originalMap.get(b);
        };
      };

      var formatError = function formatError(e) {
        var text = "";

        if (typeof e === "string") {
          e = {
            message: e
          };
        }

        if (e.chunk) {
          text += "chunk ".concat(e.chunk.name || e.chunk.id).concat(e.chunk.hasRuntime() ? " [entry]" : e.chunk.canBeInitial() ? " [initial]" : "", "\n");
        }

        if (e.file) {
          text += "".concat(e.file, "\n");
        }

        if (e.module && e.module.readableIdentifier && typeof e.module.readableIdentifier === "function") {
          text += _this.formatFilePath(e.module.readableIdentifier(requestShortener));

          if (_typeof(e.loc) === "object") {
            var locInfo = formatLocation(e.loc);
            if (locInfo) text += " ".concat(locInfo);
          }

          text += "\n";
        }

        text += e.message;

        if (showErrorDetails && e.details) {
          text += "\n".concat(e.details);
        }

        if (showErrorDetails && e.missing) {
          text += e.missing.map(function (item) {
            return "\n[".concat(item, "]");
          }).join("");
        }

        if (showModuleTrace && e.origin) {
          text += "\n @ ".concat(_this.formatFilePath(e.origin.readableIdentifier(requestShortener)));

          if (_typeof(e.originLoc) === "object") {
            var _locInfo = formatLocation(e.originLoc);

            if (_locInfo) text += " ".concat(_locInfo);
          }

          if (e.dependencies) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = e.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var dep = _step.value;
                if (!dep.loc) continue;
                if (typeof dep.loc === "string") continue;

                var _locInfo2 = formatLocation(dep.loc);

                if (!_locInfo2) continue;
                text += " ".concat(_locInfo2);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }

          var current = e.origin;

          while (current.issuer) {
            current = current.issuer;
            text += "\n @ ".concat(current.readableIdentifier(requestShortener));
          }
        }

        return text;
      };

      var obj = {
        errors: compilation.errors.map(formatError),
        warnings: Stats.filterWarnings(compilation.warnings.map(formatError), warningsFilter)
      }; //We just hint other renderers since actually omitting
      //errors/warnings from the JSON would be kind of weird.

      Object.defineProperty(obj, "_showWarnings", {
        value: showWarnings,
        enumerable: false
      });
      Object.defineProperty(obj, "_showErrors", {
        value: showErrors,
        enumerable: false
      });

      if (showVersion) {
        obj.version = require("../package.json").version;
      }

      if (showHash) obj.hash = this.hash;

      if (showTimings && this.startTime && this.endTime) {
        obj.time = this.endTime - this.startTime;
      }

      if (showBuiltAt && this.endTime) {
        obj.builtAt = this.endTime;
      }

      if (showEnv && options._env) {
        obj.env = options._env;
      }

      if (compilation.needAdditionalPass) {
        obj.needAdditionalPass = true;
      }

      if (showPublicPath) {
        obj.publicPath = this.compilation.mainTemplate.getPublicPath({
          hash: this.compilation.hash
        });
      }

      if (showOutputPath) {
        obj.outputPath = this.compilation.mainTemplate.outputOptions.path;
      }

      if (showAssets) {
        var assetsByFile = {};
        var compilationAssets = compilation.getAssets().sort(function (a, b) {
          return a.name < b.name ? -1 : 1;
        });
        obj.assetsByChunkName = {};
        obj.assets = compilationAssets.map(function (_ref) {
          var name = _ref.name,
              source = _ref.source,
              info = _ref.info;
          var obj = {
            name: name,
            size: source.size(),
            chunks: [],
            chunkNames: [],
            info: info,
            // TODO webpack 5: remove .emitted
            emitted: source.emitted || compilation.emittedAssets.has(name)
          };

          if (showPerformance) {
            obj.isOverSizeLimit = source.isOverSizeLimit;
          }

          assetsByFile[name] = obj;
          return obj;
        }).filter(createAssetFilter());
        obj.filteredAssets = compilationAssets.length - obj.assets.length;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = compilation.chunks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var chunk = _step2.value;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = chunk.files[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var asset = _step3.value;

                if (assetsByFile[asset]) {
                  var _iteratorNormalCompletion4 = true;
                  var _didIteratorError4 = false;
                  var _iteratorError4 = undefined;

                  try {
                    for (var _iterator4 = chunk.ids[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                      var id = _step4.value;
                      assetsByFile[asset].chunks.push(id);
                    }
                  } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                        _iterator4["return"]();
                      }
                    } finally {
                      if (_didIteratorError4) {
                        throw _iteratorError4;
                      }
                    }
                  }

                  if (chunk.name) {
                    assetsByFile[asset].chunkNames.push(chunk.name);

                    if (obj.assetsByChunkName[chunk.name]) {
                      obj.assetsByChunkName[chunk.name] = [].concat(obj.assetsByChunkName[chunk.name]).concat([asset]);
                    } else {
                      obj.assetsByChunkName[chunk.name] = asset;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        obj.assets.sort(sortByField(sortAssets, obj.assets));
      }

      var fnChunkGroup = function fnChunkGroup(groupMap) {
        var obj = {};
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          var _loop = function _loop() {
            var keyValuePair = _step5.value;
            var name = keyValuePair[0];
            var cg = keyValuePair[1];
            var children = cg.getChildrenByOrders();
            obj[name] = {
              chunks: cg.chunks.map(function (c) {
                return c.id;
              }),
              assets: cg.chunks.reduce(function (array, c) {
                return array.concat(c.files || []);
              }, []),
              children: Object.keys(children).reduce(function (obj, key) {
                var groups = children[key];
                obj[key] = groups.map(function (group) {
                  return {
                    name: group.name,
                    chunks: group.chunks.map(function (c) {
                      return c.id;
                    }),
                    assets: group.chunks.reduce(function (array, c) {
                      return array.concat(c.files || []);
                    }, [])
                  };
                });
                return obj;
              }, Object.create(null)),
              childAssets: Object.keys(children).reduce(function (obj, key) {
                var groups = children[key];
                obj[key] = Array.from(groups.reduce(function (set, group) {
                  var _iteratorNormalCompletion6 = true;
                  var _didIteratorError6 = false;
                  var _iteratorError6 = undefined;

                  try {
                    for (var _iterator6 = group.chunks[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                      var _chunk = _step6.value;
                      var _iteratorNormalCompletion7 = true;
                      var _didIteratorError7 = false;
                      var _iteratorError7 = undefined;

                      try {
                        for (var _iterator7 = _chunk.files[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                          var _asset = _step7.value;
                          set.add(_asset);
                        }
                      } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                            _iterator7["return"]();
                          }
                        } finally {
                          if (_didIteratorError7) {
                            throw _iteratorError7;
                          }
                        }
                      }
                    }
                  } catch (err) {
                    _didIteratorError6 = true;
                    _iteratorError6 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                        _iterator6["return"]();
                      }
                    } finally {
                      if (_didIteratorError6) {
                        throw _iteratorError6;
                      }
                    }
                  }

                  return set;
                }, new Set()));
                return obj;
              }, Object.create(null))
            };

            if (showPerformance) {
              obj[name].isOverSizeLimit = cg.isOverSizeLimit;
            }
          };

          for (var _iterator5 = groupMap[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            _loop();
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        return obj;
      };

      if (showEntrypoints) {
        obj.entrypoints = fnChunkGroup(compilation.entrypoints);
      }

      if (showChunkGroups) {
        obj.namedChunkGroups = fnChunkGroup(compilation.namedChunkGroups);
      }

      var fnModule = function fnModule(module) {
        var path = [];
        var current = module;

        while (current.issuer) {
          path.push(current = current.issuer);
        }

        path.reverse();
        var obj = {
          id: module.id,
          identifier: module.identifier(),
          name: module.readableIdentifier(requestShortener),
          index: module.index,
          index2: module.index2,
          size: module.size(),
          cacheable: module.buildInfo.cacheable,
          built: !!module.built,
          optional: module.optional,
          prefetched: module.prefetched,
          chunks: Array.from(module.chunksIterable, function (chunk) {
            return chunk.id;
          }),
          issuer: module.issuer && module.issuer.identifier(),
          issuerId: module.issuer && module.issuer.id,
          issuerName: module.issuer && module.issuer.readableIdentifier(requestShortener),
          issuerPath: module.issuer && path.map(function (module) {
            return {
              id: module.id,
              identifier: module.identifier(),
              name: module.readableIdentifier(requestShortener),
              profile: module.profile
            };
          }),
          profile: module.profile,
          failed: !!module.error,
          errors: module.errors ? module.errors.length : 0,
          warnings: module.warnings ? module.warnings.length : 0
        };

        if (showModuleAssets) {
          obj.assets = Object.keys(module.buildInfo.assets || {});
        }

        if (showReasons) {
          obj.reasons = module.reasons.sort(function (a, b) {
            if (a.module && !b.module) return -1;
            if (!a.module && b.module) return 1;

            if (a.module && b.module) {
              var cmp = compareId(a.module.id, b.module.id);
              if (cmp) return cmp;
            }

            if (a.dependency && !b.dependency) return -1;
            if (!a.dependency && b.dependency) return 1;

            if (a.dependency && b.dependency) {
              var _cmp = compareLocations(a.dependency.loc, b.dependency.loc);

              if (_cmp) return _cmp;
              if (a.dependency.type < b.dependency.type) return -1;
              if (a.dependency.type > b.dependency.type) return 1;
            }

            return 0;
          }).map(function (reason) {
            var obj = {
              moduleId: reason.module ? reason.module.id : null,
              moduleIdentifier: reason.module ? reason.module.identifier() : null,
              module: reason.module ? reason.module.readableIdentifier(requestShortener) : null,
              moduleName: reason.module ? reason.module.readableIdentifier(requestShortener) : null,
              type: reason.dependency ? reason.dependency.type : null,
              explanation: reason.explanation,
              userRequest: reason.dependency ? reason.dependency.userRequest : null
            };

            if (reason.dependency) {
              var locInfo = formatLocation(reason.dependency.loc);

              if (locInfo) {
                obj.loc = locInfo;
              }
            }

            return obj;
          });
        }

        if (showUsedExports) {
          if (module.used === true) {
            obj.usedExports = module.usedExports;
          } else if (module.used === false) {
            obj.usedExports = false;
          }
        }

        if (showProvidedExports) {
          obj.providedExports = Array.isArray(module.buildMeta.providedExports) ? module.buildMeta.providedExports : null;
        }

        if (showOptimizationBailout) {
          obj.optimizationBailout = module.optimizationBailout.map(function (item) {
            if (typeof item === "function") return item(requestShortener);
            return item;
          });
        }

        if (showDepth) {
          obj.depth = module.depth;
        }

        if (showNestedModules) {
          if (module.modules) {
            var modules = module.modules;
            obj.modules = modules.sort(sortByField("depth", modules)).filter(createModuleFilter()).map(fnModule);
            obj.filteredModules = modules.length - obj.modules.length;
            obj.modules.sort(sortByField(sortModules, obj.modules));
          }
        }

        if (showSource && module._source) {
          obj.source = module._source.source();
        }

        return obj;
      };

      if (showChunks) {
        obj.chunks = compilation.chunks.map(function (chunk) {
          var parents = new Set();
          var children = new Set();
          var siblings = new Set();
          var childIdByOrder = chunk.getChildIdsByOrders();
          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = chunk.groupsIterable[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var chunkGroup = _step8.value;
              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = undefined;

              try {
                for (var _iterator9 = chunkGroup.parentsIterable[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var parentGroup = _step9.value;
                  var _iteratorNormalCompletion12 = true;
                  var _didIteratorError12 = false;
                  var _iteratorError12 = undefined;

                  try {
                    for (var _iterator12 = parentGroup.chunks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                      var _chunk2 = _step12.value;
                      parents.add(_chunk2.id);
                    }
                  } catch (err) {
                    _didIteratorError12 = true;
                    _iteratorError12 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                        _iterator12["return"]();
                      }
                    } finally {
                      if (_didIteratorError12) {
                        throw _iteratorError12;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                    _iterator9["return"]();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }

              var _iteratorNormalCompletion10 = true;
              var _didIteratorError10 = false;
              var _iteratorError10 = undefined;

              try {
                for (var _iterator10 = chunkGroup.childrenIterable[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                  var childGroup = _step10.value;
                  var _iteratorNormalCompletion13 = true;
                  var _didIteratorError13 = false;
                  var _iteratorError13 = undefined;

                  try {
                    for (var _iterator13 = childGroup.chunks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                      var _chunk3 = _step13.value;
                      children.add(_chunk3.id);
                    }
                  } catch (err) {
                    _didIteratorError13 = true;
                    _iteratorError13 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion13 && _iterator13["return"] != null) {
                        _iterator13["return"]();
                      }
                    } finally {
                      if (_didIteratorError13) {
                        throw _iteratorError13;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                    _iterator10["return"]();
                  }
                } finally {
                  if (_didIteratorError10) {
                    throw _iteratorError10;
                  }
                }
              }

              var _iteratorNormalCompletion11 = true;
              var _didIteratorError11 = false;
              var _iteratorError11 = undefined;

              try {
                for (var _iterator11 = chunkGroup.chunks[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                  var sibling = _step11.value;
                  if (sibling !== chunk) siblings.add(sibling.id);
                }
              } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
                    _iterator11["return"]();
                  }
                } finally {
                  if (_didIteratorError11) {
                    throw _iteratorError11;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }

          var obj = {
            id: chunk.id,
            rendered: chunk.rendered,
            initial: chunk.canBeInitial(),
            entry: chunk.hasRuntime(),
            recorded: chunk.recorded,
            reason: chunk.chunkReason,
            size: chunk.modulesSize(),
            names: chunk.name ? [chunk.name] : [],
            files: chunk.files.slice(),
            hash: chunk.renderedHash,
            siblings: Array.from(siblings).sort(compareId),
            parents: Array.from(parents).sort(compareId),
            children: Array.from(children).sort(compareId),
            childrenByOrder: childIdByOrder
          };

          if (showChunkModules) {
            var modules = chunk.getModules();
            obj.modules = modules.slice().sort(sortByField("depth", modules)).filter(createModuleFilter()).map(fnModule);
            obj.filteredModules = chunk.getNumberOfModules() - obj.modules.length;
            obj.modules.sort(sortByField(sortModules, obj.modules));
          }

          if (showChunkOrigins) {
            obj.origins = Array.from(chunk.groupsIterable, function (g) {
              return g.origins;
            }).reduce(function (a, b) {
              return a.concat(b);
            }, []).map(function (origin) {
              return {
                moduleId: origin.module ? origin.module.id : undefined,
                module: origin.module ? origin.module.identifier() : "",
                moduleIdentifier: origin.module ? origin.module.identifier() : "",
                moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : "",
                loc: formatLocation(origin.loc),
                request: origin.request,
                reasons: origin.reasons || []
              };
            }).sort(function (a, b) {
              var cmp1 = compareId(a.moduleId, b.moduleId);
              if (cmp1) return cmp1;
              var cmp2 = compareId(a.loc, b.loc);
              if (cmp2) return cmp2;
              var cmp3 = compareId(a.request, b.request);
              if (cmp3) return cmp3;
              return 0;
            });
          }

          return obj;
        });
        obj.chunks.sort(sortByField(sortChunks, obj.chunks));
      }

      if (showModules) {
        obj.modules = compilation.modules.slice().sort(sortByField("depth", compilation.modules)).filter(createModuleFilter()).map(fnModule);
        obj.filteredModules = compilation.modules.length - obj.modules.length;
        obj.modules.sort(sortByField(sortModules, obj.modules));
      }

      if (showLogging) {
        (function () {
          var util = require("util");

          obj.logging = {};
          var acceptedTypes;
          var collapsedGroups = false;

          switch (showLogging) {
            case "none":
              acceptedTypes = new Set([]);
              break;

            case "error":
              acceptedTypes = new Set([LogType.error]);
              break;

            case "warn":
              acceptedTypes = new Set([LogType.error, LogType.warn]);
              break;

            case "info":
              acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info]);
              break;

            case true:
            case "log":
              acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.clear]);
              break;

            case "verbose":
              acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.profile, LogType.profileEnd, LogType.time, LogType.status, LogType.clear]);
              collapsedGroups = true;
              break;
          }

          var _iteratorNormalCompletion14 = true;
          var _didIteratorError14 = false;
          var _iteratorError14 = undefined;

          try {
            var _loop2 = function _loop2() {
              var _step14$value = _slicedToArray(_step14.value, 2),
                  origin = _step14$value[0],
                  logEntries = _step14$value[1];

              var debugMode = loggingDebug.some(function (fn) {
                return fn(origin);
              });
              var collapseCounter = 0;
              var processedLogEntries = logEntries;

              if (!debugMode) {
                processedLogEntries = processedLogEntries.filter(function (entry) {
                  if (!acceptedTypes.has(entry.type)) return false;

                  if (!collapsedGroups) {
                    switch (entry.type) {
                      case LogType.groupCollapsed:
                        collapseCounter++;
                        return collapseCounter === 1;

                      case LogType.group:
                        if (collapseCounter > 0) collapseCounter++;
                        return collapseCounter === 0;

                      case LogType.groupEnd:
                        if (collapseCounter > 0) {
                          collapseCounter--;
                          return false;
                        }

                        return true;

                      default:
                        return collapseCounter === 0;
                    }
                  }

                  return true;
                });
              }

              processedLogEntries = processedLogEntries.map(function (entry) {
                var message = undefined;

                if (entry.type === LogType.time) {
                  message = "".concat(entry.args[0], ": ").concat(entry.args[1] * 1000 + entry.args[2] / 1000000, "ms");
                } else if (entry.args && entry.args.length > 0) {
                  message = util.format.apply(util, [entry.args[0]].concat(_toConsumableArray(entry.args.slice(1))));
                }

                return {
                  type: (debugMode || collapsedGroups) && entry.type === LogType.groupCollapsed ? LogType.group : entry.type,
                  message: message,
                  trace: showLoggingTrace && entry.trace ? entry.trace : undefined
                };
              });
              var name = identifierUtils.makePathsRelative(context, origin, compilation.cache).replace(/\|/g, " ");

              if (name in obj.logging) {
                var i = 1;

                while ("".concat(name, "#").concat(i) in obj.logging) {
                  i++;
                }

                name = "".concat(name, "#").concat(i);
              }

              obj.logging[name] = {
                entries: processedLogEntries,
                filteredEntries: logEntries.length - processedLogEntries.length,
                debug: debugMode
              };
            };

            for (var _iterator14 = compilation.logging[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
              _loop2();
            }
          } catch (err) {
            _didIteratorError14 = true;
            _iteratorError14 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion14 && _iterator14["return"] != null) {
                _iterator14["return"]();
              }
            } finally {
              if (_didIteratorError14) {
                throw _iteratorError14;
              }
            }
          }
        })();
      }

      if (showChildren) {
        obj.children = compilation.children.map(function (child, idx) {
          var childOptions = Stats.getChildOptions(options, idx);
          var obj = new Stats(child).toJson(childOptions, forToString);
          delete obj.hash;
          delete obj.version;

          if (child.name) {
            obj.name = identifierUtils.makePathsRelative(context, child.name, compilation.cache);
          }

          return obj;
        });
      }

      return obj;
    }
  }, {
    key: "toString",
    value: function toString(options) {
      if (typeof options === "boolean" || typeof options === "string") {
        options = Stats.presetToOptions(options);
      } else if (!options) {
        options = {};
      }

      var useColors = optionsOrFallback(options.colors, false);
      var obj = this.toJson(options, true);
      return Stats.jsonToString(obj, useColors);
    }
  }], [{
    key: "filterWarnings",
    value: function filterWarnings(warnings, warningsFilter) {
      // we dont have anything to filter so all warnings can be shown
      if (!warningsFilter) {
        return warnings;
      } // create a chain of filters
      // if they return "true" a warning should be suppressed


      var normalizedWarningsFilters = [].concat(warningsFilter).map(function (filter) {
        if (typeof filter === "string") {
          return function (warning) {
            return warning.includes(filter);
          };
        }

        if (filter instanceof RegExp) {
          return function (warning) {
            return filter.test(warning);
          };
        }

        if (typeof filter === "function") {
          return filter;
        }

        throw new Error("Can only filter warnings with Strings or RegExps. (Given: ".concat(filter, ")"));
      });
      return warnings.filter(function (warning) {
        return !normalizedWarningsFilters.some(function (check) {
          return check(warning);
        });
      });
    }
  }, {
    key: "jsonToString",
    value: function jsonToString(obj, useColors) {
      var buf = [];
      var defaultColors = {
        bold: "\x1B[1m",
        yellow: "\x1B[1m\x1B[33m",
        red: "\x1B[1m\x1B[31m",
        green: "\x1B[1m\x1B[32m",
        cyan: "\x1B[1m\x1B[36m",
        magenta: "\x1B[1m\x1B[35m"
      };
      var colors = Object.keys(defaultColors).reduce(function (obj, color) {
        obj[color] = function (str) {
          if (useColors) {
            buf.push(useColors === true || useColors[color] === undefined ? defaultColors[color] : useColors[color]);
          }

          buf.push(str);

          if (useColors) {
            buf.push("\x1B[39m\x1B[22m");
          }
        };

        return obj;
      }, {
        normal: function normal(str) {
          return buf.push(str);
        }
      });

      var coloredTime = function coloredTime(time) {
        var times = [800, 400, 200, 100];

        if (obj.time) {
          times = [obj.time / 2, obj.time / 4, obj.time / 8, obj.time / 16];
        }

        if (time < times[3]) colors.normal("".concat(time, "ms"));else if (time < times[2]) colors.bold("".concat(time, "ms"));else if (time < times[1]) colors.green("".concat(time, "ms"));else if (time < times[0]) colors.yellow("".concat(time, "ms"));else colors.red("".concat(time, "ms"));
      };

      var newline = function newline() {
        return buf.push("\n");
      };

      var getText = function getText(arr, row, col) {
        return arr[row][col].value;
      };

      var table = function table(array, align, splitter) {
        var rows = array.length;
        var cols = array[0].length;
        var colSizes = new Array(cols);

        for (var col = 0; col < cols; col++) {
          colSizes[col] = 0;
        }

        for (var row = 0; row < rows; row++) {
          for (var _col = 0; _col < cols; _col++) {
            var value = "".concat(getText(array, row, _col));

            if (value.length > colSizes[_col]) {
              colSizes[_col] = value.length;
            }
          }
        }

        for (var _row = 0; _row < rows; _row++) {
          for (var _col2 = 0; _col2 < cols; _col2++) {
            var format = array[_row][_col2].color;

            var _value = "".concat(getText(array, _row, _col2));

            var l = _value.length;

            if (align[_col2] === "l") {
              format(_value);
            }

            for (; l < colSizes[_col2] && _col2 !== cols - 1; l++) {
              colors.normal(" ");
            }

            if (align[_col2] === "r") {
              format(_value);
            }

            if (_col2 + 1 < cols && colSizes[_col2] !== 0) {
              colors.normal(splitter || "  ");
            }
          }

          newline();
        }
      };

      var getAssetColor = function getAssetColor(asset, defaultColor) {
        if (asset.isOverSizeLimit) {
          return colors.yellow;
        }

        return defaultColor;
      };

      if (obj.hash) {
        colors.normal("Hash: ");
        colors.bold(obj.hash);
        newline();
      }

      if (obj.version) {
        colors.normal("Version: webpack ");
        colors.bold(obj.version);
        newline();
      }

      if (typeof obj.time === "number") {
        colors.normal("Time: ");
        colors.bold(obj.time);
        colors.normal("ms");
        newline();
      }

      if (typeof obj.builtAt === "number") {
        var builtAtDate = new Date(obj.builtAt);
        var timeZone = undefined;

        try {
          builtAtDate.toLocaleTimeString();
        } catch (err) {
          // Force UTC if runtime timezone is unsupported
          timeZone = "UTC";
        }

        colors.normal("Built at: ");
        colors.normal(builtAtDate.toLocaleDateString(undefined, {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          timeZone: timeZone
        }));
        colors.normal(" ");
        colors.bold(builtAtDate.toLocaleTimeString(undefined, {
          timeZone: timeZone
        }));
        newline();
      }

      if (obj.env) {
        colors.normal("Environment (--env): ");
        colors.bold(JSON.stringify(obj.env, null, 2));
        newline();
      }

      if (obj.publicPath) {
        colors.normal("PublicPath: ");
        colors.bold(obj.publicPath);
        newline();
      }

      if (obj.assets && obj.assets.length > 0) {
        var t = [[{
          value: "Asset",
          color: colors.bold
        }, {
          value: "Size",
          color: colors.bold
        }, {
          value: "Chunks",
          color: colors.bold
        }, {
          value: "",
          color: colors.bold
        }, {
          value: "",
          color: colors.bold
        }, {
          value: "Chunk Names",
          color: colors.bold
        }]];
        var _iteratorNormalCompletion15 = true;
        var _didIteratorError15 = false;
        var _iteratorError15 = undefined;

        try {
          for (var _iterator15 = obj.assets[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
            var asset = _step15.value;
            t.push([{
              value: asset.name,
              color: getAssetColor(asset, colors.green)
            }, {
              value: SizeFormatHelpers.formatSize(asset.size),
              color: getAssetColor(asset, colors.normal)
            }, {
              value: asset.chunks.join(", "),
              color: colors.bold
            }, {
              value: [asset.emitted && "[emitted]", asset.info.immutable && "[immutable]", asset.info.development && "[dev]", asset.info.hotModuleReplacement && "[hmr]"].filter(Boolean).join(" "),
              color: colors.green
            }, {
              value: asset.isOverSizeLimit ? "[big]" : "",
              color: getAssetColor(asset, colors.normal)
            }, {
              value: asset.chunkNames.join(", "),
              color: colors.normal
            }]);
          }
        } catch (err) {
          _didIteratorError15 = true;
          _iteratorError15 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion15 && _iterator15["return"] != null) {
              _iterator15["return"]();
            }
          } finally {
            if (_didIteratorError15) {
              throw _iteratorError15;
            }
          }
        }

        table(t, "rrrlll");
      }

      if (obj.filteredAssets > 0) {
        colors.normal(" ");
        if (obj.assets.length > 0) colors.normal("+ ");
        colors.normal(obj.filteredAssets);
        if (obj.assets.length > 0) colors.normal(" hidden");
        colors.normal(obj.filteredAssets !== 1 ? " assets" : " asset");
        newline();
      }

      var processChunkGroups = function processChunkGroups(namedGroups, prefix) {
        for (var _i2 = 0, _Object$keys = Object.keys(namedGroups); _i2 < _Object$keys.length; _i2++) {
          var name = _Object$keys[_i2];
          var cg = namedGroups[name];
          colors.normal("".concat(prefix, " "));
          colors.bold(name);

          if (cg.isOverSizeLimit) {
            colors.normal(" ");
            colors.yellow("[big]");
          }

          colors.normal(" =");
          var _iteratorNormalCompletion16 = true;
          var _didIteratorError16 = false;
          var _iteratorError16 = undefined;

          try {
            for (var _iterator16 = cg.assets[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
              var _asset2 = _step16.value;
              colors.normal(" ");
              colors.green(_asset2);
            }
          } catch (err) {
            _didIteratorError16 = true;
            _iteratorError16 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion16 && _iterator16["return"] != null) {
                _iterator16["return"]();
              }
            } finally {
              if (_didIteratorError16) {
                throw _iteratorError16;
              }
            }
          }

          for (var _i3 = 0, _Object$keys2 = Object.keys(cg.childAssets); _i3 < _Object$keys2.length; _i3++) {
            var _name = _Object$keys2[_i3];
            var assets = cg.childAssets[_name];

            if (assets && assets.length > 0) {
              colors.normal(" ");
              colors.magenta("(".concat(_name, ":"));
              var _iteratorNormalCompletion17 = true;
              var _didIteratorError17 = false;
              var _iteratorError17 = undefined;

              try {
                for (var _iterator17 = assets[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                  var _asset3 = _step17.value;
                  colors.normal(" ");
                  colors.green(_asset3);
                }
              } catch (err) {
                _didIteratorError17 = true;
                _iteratorError17 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion17 && _iterator17["return"] != null) {
                    _iterator17["return"]();
                  }
                } finally {
                  if (_didIteratorError17) {
                    throw _iteratorError17;
                  }
                }
              }

              colors.magenta(")");
            }
          }

          newline();
        }
      };

      if (obj.entrypoints) {
        processChunkGroups(obj.entrypoints, "Entrypoint");
      }

      if (obj.namedChunkGroups) {
        var outputChunkGroups = obj.namedChunkGroups;

        if (obj.entrypoints) {
          outputChunkGroups = Object.keys(outputChunkGroups).filter(function (name) {
            return !obj.entrypoints[name];
          }).reduce(function (result, name) {
            result[name] = obj.namedChunkGroups[name];
            return result;
          }, {});
        }

        processChunkGroups(outputChunkGroups, "Chunk Group");
      }

      var modulesByIdentifier = {};

      if (obj.modules) {
        var _iteratorNormalCompletion18 = true;
        var _didIteratorError18 = false;
        var _iteratorError18 = undefined;

        try {
          for (var _iterator18 = obj.modules[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
            var _module = _step18.value;
            modulesByIdentifier["$".concat(_module.identifier)] = _module;
          }
        } catch (err) {
          _didIteratorError18 = true;
          _iteratorError18 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion18 && _iterator18["return"] != null) {
              _iterator18["return"]();
            }
          } finally {
            if (_didIteratorError18) {
              throw _iteratorError18;
            }
          }
        }
      } else if (obj.chunks) {
        var _iteratorNormalCompletion19 = true;
        var _didIteratorError19 = false;
        var _iteratorError19 = undefined;

        try {
          for (var _iterator19 = obj.chunks[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
            var chunk = _step19.value;

            if (chunk.modules) {
              var _iteratorNormalCompletion20 = true;
              var _didIteratorError20 = false;
              var _iteratorError20 = undefined;

              try {
                for (var _iterator20 = chunk.modules[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                  var _module2 = _step20.value;
                  modulesByIdentifier["$".concat(_module2.identifier)] = _module2;
                }
              } catch (err) {
                _didIteratorError20 = true;
                _iteratorError20 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion20 && _iterator20["return"] != null) {
                    _iterator20["return"]();
                  }
                } finally {
                  if (_didIteratorError20) {
                    throw _iteratorError20;
                  }
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError19 = true;
          _iteratorError19 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion19 && _iterator19["return"] != null) {
              _iterator19["return"]();
            }
          } finally {
            if (_didIteratorError19) {
              throw _iteratorError19;
            }
          }
        }
      }

      var processModuleAttributes = function processModuleAttributes(module) {
        colors.normal(" ");
        colors.normal(SizeFormatHelpers.formatSize(module.size));

        if (module.chunks) {
          var _iteratorNormalCompletion21 = true;
          var _didIteratorError21 = false;
          var _iteratorError21 = undefined;

          try {
            for (var _iterator21 = module.chunks[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
              var _chunk4 = _step21.value;
              colors.normal(" {");
              colors.yellow(_chunk4);
              colors.normal("}");
            }
          } catch (err) {
            _didIteratorError21 = true;
            _iteratorError21 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion21 && _iterator21["return"] != null) {
                _iterator21["return"]();
              }
            } finally {
              if (_didIteratorError21) {
                throw _iteratorError21;
              }
            }
          }
        }

        if (typeof module.depth === "number") {
          colors.normal(" [depth ".concat(module.depth, "]"));
        }

        if (module.cacheable === false) {
          colors.red(" [not cacheable]");
        }

        if (module.optional) {
          colors.yellow(" [optional]");
        }

        if (module.built) {
          colors.green(" [built]");
        }

        if (module.assets && module.assets.length) {
          colors.magenta(" [".concat(module.assets.length, " asset").concat(module.assets.length === 1 ? "" : "s", "]"));
        }

        if (module.prefetched) {
          colors.magenta(" [prefetched]");
        }

        if (module.failed) colors.red(" [failed]");

        if (module.warnings) {
          colors.yellow(" [".concat(module.warnings, " warning").concat(module.warnings === 1 ? "" : "s", "]"));
        }

        if (module.errors) {
          colors.red(" [".concat(module.errors, " error").concat(module.errors === 1 ? "" : "s", "]"));
        }
      };

      var processModuleContent = function processModuleContent(module, prefix) {
        if (Array.isArray(module.providedExports)) {
          colors.normal(prefix);

          if (module.providedExports.length === 0) {
            colors.cyan("[no exports]");
          } else {
            colors.cyan("[exports: ".concat(module.providedExports.join(", "), "]"));
          }

          newline();
        }

        if (module.usedExports !== undefined) {
          if (module.usedExports !== true) {
            colors.normal(prefix);

            if (module.usedExports === null) {
              colors.cyan("[used exports unknown]");
            } else if (module.usedExports === false) {
              colors.cyan("[no exports used]");
            } else if (Array.isArray(module.usedExports) && module.usedExports.length === 0) {
              colors.cyan("[no exports used]");
            } else if (Array.isArray(module.usedExports)) {
              var providedExportsCount = Array.isArray(module.providedExports) ? module.providedExports.length : null;

              if (providedExportsCount !== null && providedExportsCount === module.usedExports.length) {
                colors.cyan("[all exports used]");
              } else {
                colors.cyan("[only some exports used: ".concat(module.usedExports.join(", "), "]"));
              }
            }

            newline();
          }
        }

        if (Array.isArray(module.optimizationBailout)) {
          var _iteratorNormalCompletion22 = true;
          var _didIteratorError22 = false;
          var _iteratorError22 = undefined;

          try {
            for (var _iterator22 = module.optimizationBailout[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
              var item = _step22.value;
              colors.normal(prefix);
              colors.yellow(item);
              newline();
            }
          } catch (err) {
            _didIteratorError22 = true;
            _iteratorError22 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion22 && _iterator22["return"] != null) {
                _iterator22["return"]();
              }
            } finally {
              if (_didIteratorError22) {
                throw _iteratorError22;
              }
            }
          }
        }

        if (module.reasons) {
          var _iteratorNormalCompletion23 = true;
          var _didIteratorError23 = false;
          var _iteratorError23 = undefined;

          try {
            for (var _iterator23 = module.reasons[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
              var reason = _step23.value;
              colors.normal(prefix);

              if (reason.type) {
                colors.normal(reason.type);
                colors.normal(" ");
              }

              if (reason.userRequest) {
                colors.cyan(reason.userRequest);
                colors.normal(" ");
              }

              if (reason.moduleId !== null) {
                colors.normal("[");
                colors.normal(reason.moduleId);
                colors.normal("]");
              }

              if (reason.module && reason.module !== reason.moduleId) {
                colors.normal(" ");
                colors.magenta(reason.module);
              }

              if (reason.loc) {
                colors.normal(" ");
                colors.normal(reason.loc);
              }

              if (reason.explanation) {
                colors.normal(" ");
                colors.cyan(reason.explanation);
              }

              newline();
            }
          } catch (err) {
            _didIteratorError23 = true;
            _iteratorError23 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion23 && _iterator23["return"] != null) {
                _iterator23["return"]();
              }
            } finally {
              if (_didIteratorError23) {
                throw _iteratorError23;
              }
            }
          }
        }

        if (module.profile) {
          colors.normal(prefix);
          var sum = 0;

          if (module.issuerPath) {
            var _iteratorNormalCompletion24 = true;
            var _didIteratorError24 = false;
            var _iteratorError24 = undefined;

            try {
              for (var _iterator24 = module.issuerPath[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                var m = _step24.value;
                colors.normal("[");
                colors.normal(m.id);
                colors.normal("] ");

                if (m.profile) {
                  var time = (m.profile.factory || 0) + (m.profile.building || 0);
                  coloredTime(time);
                  sum += time;
                  colors.normal(" ");
                }

                colors.normal("-> ");
              }
            } catch (err) {
              _didIteratorError24 = true;
              _iteratorError24 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion24 && _iterator24["return"] != null) {
                  _iterator24["return"]();
                }
              } finally {
                if (_didIteratorError24) {
                  throw _iteratorError24;
                }
              }
            }
          }

          for (var _i4 = 0, _Object$keys3 = Object.keys(module.profile); _i4 < _Object$keys3.length; _i4++) {
            var key = _Object$keys3[_i4];
            colors.normal("".concat(key, ":"));
            var _time = module.profile[key];
            coloredTime(_time);
            colors.normal(" ");
            sum += _time;
          }

          colors.normal("= ");
          coloredTime(sum);
          newline();
        }

        if (module.modules) {
          processModulesList(module, prefix + "| ");
        }
      };

      var processModulesList = function processModulesList(obj, prefix) {
        if (obj.modules) {
          var maxModuleId = 0;
          var _iteratorNormalCompletion25 = true;
          var _didIteratorError25 = false;
          var _iteratorError25 = undefined;

          try {
            for (var _iterator25 = obj.modules[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
              var _module3 = _step25.value;

              if (typeof _module3.id === "number") {
                if (maxModuleId < _module3.id) maxModuleId = _module3.id;
              }
            }
          } catch (err) {
            _didIteratorError25 = true;
            _iteratorError25 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion25 && _iterator25["return"] != null) {
                _iterator25["return"]();
              }
            } finally {
              if (_didIteratorError25) {
                throw _iteratorError25;
              }
            }
          }

          var contentPrefix = prefix + "    ";
          if (maxModuleId >= 10) contentPrefix += " ";
          if (maxModuleId >= 100) contentPrefix += " ";
          if (maxModuleId >= 1000) contentPrefix += " ";
          var _iteratorNormalCompletion26 = true;
          var _didIteratorError26 = false;
          var _iteratorError26 = undefined;

          try {
            for (var _iterator26 = obj.modules[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
              var _module4 = _step26.value;
              colors.normal(prefix);
              var name = _module4.name || _module4.identifier;

              if (typeof _module4.id === "string" || typeof _module4.id === "number") {
                if (typeof _module4.id === "number") {
                  if (_module4.id < 1000 && maxModuleId >= 1000) colors.normal(" ");
                  if (_module4.id < 100 && maxModuleId >= 100) colors.normal(" ");
                  if (_module4.id < 10 && maxModuleId >= 10) colors.normal(" ");
                } else {
                  if (maxModuleId >= 1000) colors.normal(" ");
                  if (maxModuleId >= 100) colors.normal(" ");
                  if (maxModuleId >= 10) colors.normal(" ");
                }

                if (name !== _module4.id) {
                  colors.normal("[");
                  colors.normal(_module4.id);
                  colors.normal("]");
                  colors.normal(" ");
                } else {
                  colors.normal("[");
                  colors.bold(_module4.id);
                  colors.normal("]");
                }
              }

              if (name !== _module4.id) {
                colors.bold(name);
              }

              processModuleAttributes(_module4);
              newline();
              processModuleContent(_module4, contentPrefix);
            }
          } catch (err) {
            _didIteratorError26 = true;
            _iteratorError26 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion26 && _iterator26["return"] != null) {
                _iterator26["return"]();
              }
            } finally {
              if (_didIteratorError26) {
                throw _iteratorError26;
              }
            }
          }

          if (obj.filteredModules > 0) {
            colors.normal(prefix);
            colors.normal("   ");
            if (obj.modules.length > 0) colors.normal(" + ");
            colors.normal(obj.filteredModules);
            if (obj.modules.length > 0) colors.normal(" hidden");
            colors.normal(obj.filteredModules !== 1 ? " modules" : " module");
            newline();
          }
        }
      };

      if (obj.chunks) {
        var _iteratorNormalCompletion27 = true;
        var _didIteratorError27 = false;
        var _iteratorError27 = undefined;

        try {
          for (var _iterator27 = obj.chunks[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
            var _chunk5 = _step27.value;
            colors.normal("chunk ");
            if (_chunk5.id < 1000) colors.normal(" ");
            if (_chunk5.id < 100) colors.normal(" ");
            if (_chunk5.id < 10) colors.normal(" ");
            colors.normal("{");
            colors.yellow(_chunk5.id);
            colors.normal("} ");
            colors.green(_chunk5.files.join(", "));

            if (_chunk5.names && _chunk5.names.length > 0) {
              colors.normal(" (");
              colors.normal(_chunk5.names.join(", "));
              colors.normal(")");
            }

            colors.normal(" ");
            colors.normal(SizeFormatHelpers.formatSize(_chunk5.size));
            var _iteratorNormalCompletion28 = true;
            var _didIteratorError28 = false;
            var _iteratorError28 = undefined;

            try {
              for (var _iterator28 = _chunk5.parents[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
                var _id = _step28.value;
                colors.normal(" <{");
                colors.yellow(_id);
                colors.normal("}>");
              }
            } catch (err) {
              _didIteratorError28 = true;
              _iteratorError28 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion28 && _iterator28["return"] != null) {
                  _iterator28["return"]();
                }
              } finally {
                if (_didIteratorError28) {
                  throw _iteratorError28;
                }
              }
            }

            var _iteratorNormalCompletion29 = true;
            var _didIteratorError29 = false;
            var _iteratorError29 = undefined;

            try {
              for (var _iterator29 = _chunk5.siblings[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                var _id2 = _step29.value;
                colors.normal(" ={");
                colors.yellow(_id2);
                colors.normal("}=");
              }
            } catch (err) {
              _didIteratorError29 = true;
              _iteratorError29 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion29 && _iterator29["return"] != null) {
                  _iterator29["return"]();
                }
              } finally {
                if (_didIteratorError29) {
                  throw _iteratorError29;
                }
              }
            }

            var _iteratorNormalCompletion30 = true;
            var _didIteratorError30 = false;
            var _iteratorError30 = undefined;

            try {
              for (var _iterator30 = _chunk5.children[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                var _id3 = _step30.value;
                colors.normal(" >{");
                colors.yellow(_id3);
                colors.normal("}<");
              }
            } catch (err) {
              _didIteratorError30 = true;
              _iteratorError30 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion30 && _iterator30["return"] != null) {
                  _iterator30["return"]();
                }
              } finally {
                if (_didIteratorError30) {
                  throw _iteratorError30;
                }
              }
            }

            if (_chunk5.childrenByOrder) {
              for (var _i5 = 0, _Object$keys4 = Object.keys(_chunk5.childrenByOrder); _i5 < _Object$keys4.length; _i5++) {
                var name = _Object$keys4[_i5];
                var children = _chunk5.childrenByOrder[name];
                colors.normal(" ");
                colors.magenta("(".concat(name, ":"));
                var _iteratorNormalCompletion31 = true;
                var _didIteratorError31 = false;
                var _iteratorError31 = undefined;

                try {
                  for (var _iterator31 = children[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                    var id = _step31.value;
                    colors.normal(" {");
                    colors.yellow(id);
                    colors.normal("}");
                  }
                } catch (err) {
                  _didIteratorError31 = true;
                  _iteratorError31 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion31 && _iterator31["return"] != null) {
                      _iterator31["return"]();
                    }
                  } finally {
                    if (_didIteratorError31) {
                      throw _iteratorError31;
                    }
                  }
                }

                colors.magenta(")");
              }
            }

            if (_chunk5.entry) {
              colors.yellow(" [entry]");
            } else if (_chunk5.initial) {
              colors.yellow(" [initial]");
            }

            if (_chunk5.rendered) {
              colors.green(" [rendered]");
            }

            if (_chunk5.recorded) {
              colors.green(" [recorded]");
            }

            if (_chunk5.reason) {
              colors.yellow(" ".concat(_chunk5.reason));
            }

            newline();

            if (_chunk5.origins) {
              var _iteratorNormalCompletion32 = true;
              var _didIteratorError32 = false;
              var _iteratorError32 = undefined;

              try {
                for (var _iterator32 = _chunk5.origins[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                  var origin = _step32.value;
                  colors.normal("    > ");

                  if (origin.reasons && origin.reasons.length) {
                    colors.yellow(origin.reasons.join(" "));
                    colors.normal(" ");
                  }

                  if (origin.request) {
                    colors.normal(origin.request);
                    colors.normal(" ");
                  }

                  if (origin.module) {
                    colors.normal("[");
                    colors.normal(origin.moduleId);
                    colors.normal("] ");
                    var _module5 = modulesByIdentifier["$".concat(origin.module)];

                    if (_module5) {
                      colors.bold(_module5.name);
                      colors.normal(" ");
                    }
                  }

                  if (origin.loc) {
                    colors.normal(origin.loc);
                  }

                  newline();
                }
              } catch (err) {
                _didIteratorError32 = true;
                _iteratorError32 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion32 && _iterator32["return"] != null) {
                    _iterator32["return"]();
                  }
                } finally {
                  if (_didIteratorError32) {
                    throw _iteratorError32;
                  }
                }
              }
            }

            processModulesList(_chunk5, " ");
          }
        } catch (err) {
          _didIteratorError27 = true;
          _iteratorError27 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion27 && _iterator27["return"] != null) {
              _iterator27["return"]();
            }
          } finally {
            if (_didIteratorError27) {
              throw _iteratorError27;
            }
          }
        }
      }

      processModulesList(obj, "");

      if (obj.logging) {
        for (var _i6 = 0, _Object$keys5 = Object.keys(obj.logging); _i6 < _Object$keys5.length; _i6++) {
          var _origin = _Object$keys5[_i6];
          var logData = obj.logging[_origin];

          if (logData.entries.length > 0) {
            newline();

            if (logData.debug) {
              colors.red("DEBUG ");
            }

            colors.bold("LOG from " + _origin);
            newline();
            var indent = "";
            var _iteratorNormalCompletion33 = true;
            var _didIteratorError33 = false;
            var _iteratorError33 = undefined;

            try {
              for (var _iterator33 = logData.entries[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                var entry = _step33.value;
                var color = colors.normal;
                var prefix = "    ";

                switch (entry.type) {
                  case LogType.clear:
                    colors.normal("".concat(indent, "-------"));
                    newline();
                    continue;

                  case LogType.error:
                    color = colors.red;
                    prefix = "<e> ";
                    break;

                  case LogType.warn:
                    color = colors.yellow;
                    prefix = "<w> ";
                    break;

                  case LogType.info:
                    color = colors.green;
                    prefix = "<i> ";
                    break;

                  case LogType.log:
                    color = colors.bold;
                    break;

                  case LogType.trace:
                  case LogType.debug:
                    color = colors.normal;
                    break;

                  case LogType.status:
                    color = colors.magenta;
                    prefix = "<s> ";
                    break;

                  case LogType.profile:
                    color = colors.magenta;
                    prefix = "<p> ";
                    break;

                  case LogType.profileEnd:
                    color = colors.magenta;
                    prefix = "</p> ";
                    break;

                  case LogType.time:
                    color = colors.magenta;
                    prefix = "<t> ";
                    break;

                  case LogType.group:
                    color = colors.cyan;
                    prefix = "<-> ";
                    break;

                  case LogType.groupCollapsed:
                    color = colors.cyan;
                    prefix = "<+> ";
                    break;

                  case LogType.groupEnd:
                    if (indent.length >= 2) indent = indent.slice(0, indent.length - 2);
                    continue;
                }

                if (entry.message) {
                  var _iteratorNormalCompletion34 = true;
                  var _didIteratorError34 = false;
                  var _iteratorError34 = undefined;

                  try {
                    for (var _iterator34 = entry.message.split("\n")[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                      var line = _step34.value;
                      colors.normal("".concat(indent).concat(prefix));
                      color(line);
                      newline();
                    }
                  } catch (err) {
                    _didIteratorError34 = true;
                    _iteratorError34 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion34 && _iterator34["return"] != null) {
                        _iterator34["return"]();
                      }
                    } finally {
                      if (_didIteratorError34) {
                        throw _iteratorError34;
                      }
                    }
                  }
                }

                if (entry.trace) {
                  var _iteratorNormalCompletion35 = true;
                  var _didIteratorError35 = false;
                  var _iteratorError35 = undefined;

                  try {
                    for (var _iterator35 = entry.trace[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                      var _line = _step35.value;
                      colors.normal("".concat(indent, "| ").concat(_line));
                      newline();
                    }
                  } catch (err) {
                    _didIteratorError35 = true;
                    _iteratorError35 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion35 && _iterator35["return"] != null) {
                        _iterator35["return"]();
                      }
                    } finally {
                      if (_didIteratorError35) {
                        throw _iteratorError35;
                      }
                    }
                  }
                }

                switch (entry.type) {
                  case LogType.group:
                    indent += "  ";
                    break;
                }
              }
            } catch (err) {
              _didIteratorError33 = true;
              _iteratorError33 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion33 && _iterator33["return"] != null) {
                  _iterator33["return"]();
                }
              } finally {
                if (_didIteratorError33) {
                  throw _iteratorError33;
                }
              }
            }

            if (logData.filteredEntries) {
              colors.normal("+ ".concat(logData.filteredEntries, " hidden lines"));
              newline();
            }
          }
        }
      }

      if (obj._showWarnings && obj.warnings) {
        var _iteratorNormalCompletion36 = true;
        var _didIteratorError36 = false;
        var _iteratorError36 = undefined;

        try {
          for (var _iterator36 = obj.warnings[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
            var warning = _step36.value;
            newline();
            colors.yellow("WARNING in ".concat(warning));
            newline();
          }
        } catch (err) {
          _didIteratorError36 = true;
          _iteratorError36 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion36 && _iterator36["return"] != null) {
              _iterator36["return"]();
            }
          } finally {
            if (_didIteratorError36) {
              throw _iteratorError36;
            }
          }
        }
      }

      if (obj._showErrors && obj.errors) {
        var _iteratorNormalCompletion37 = true;
        var _didIteratorError37 = false;
        var _iteratorError37 = undefined;

        try {
          for (var _iterator37 = obj.errors[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {
            var error = _step37.value;
            newline();
            colors.red("ERROR in ".concat(error));
            newline();
          }
        } catch (err) {
          _didIteratorError37 = true;
          _iteratorError37 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion37 && _iterator37["return"] != null) {
              _iterator37["return"]();
            }
          } finally {
            if (_didIteratorError37) {
              throw _iteratorError37;
            }
          }
        }
      }

      if (obj.children) {
        var _iteratorNormalCompletion38 = true;
        var _didIteratorError38 = false;
        var _iteratorError38 = undefined;

        try {
          for (var _iterator38 = obj.children[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {
            var child = _step38.value;
            var childString = Stats.jsonToString(child, useColors);

            if (childString) {
              if (child.name) {
                colors.normal("Child ");
                colors.bold(child.name);
                colors.normal(":");
              } else {
                colors.normal("Child");
              }

              newline();
              buf.push("    ");
              buf.push(childString.replace(/\n/g, "\n    "));
              newline();
            }
          }
        } catch (err) {
          _didIteratorError38 = true;
          _iteratorError38 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion38 && _iterator38["return"] != null) {
              _iterator38["return"]();
            }
          } finally {
            if (_didIteratorError38) {
              throw _iteratorError38;
            }
          }
        }
      }

      if (obj.needAdditionalPass) {
        colors.yellow("Compilation needs an additional pass and will compile again.");
      }

      while (buf[buf.length - 1] === "\n") {
        buf.pop();
      }

      return buf.join("");
    }
  }, {
    key: "presetToOptions",
    value: function presetToOptions(name) {
      // Accepted values: none, errors-only, minimal, normal, detailed, verbose
      // Any other falsy value will behave as 'none', truthy values as 'normal'
      var pn = typeof name === "string" && name.toLowerCase() || name || "none";

      switch (pn) {
        case "none":
          return {
            all: false
          };

        case "verbose":
          return {
            entrypoints: true,
            chunkGroups: true,
            modules: false,
            chunks: true,
            chunkModules: true,
            chunkOrigins: true,
            depth: true,
            env: true,
            reasons: true,
            usedExports: true,
            providedExports: true,
            optimizationBailout: true,
            errorDetails: true,
            publicPath: true,
            logging: "verbose",
            exclude: false,
            maxModules: Infinity
          };

        case "detailed":
          return {
            entrypoints: true,
            chunkGroups: true,
            chunks: true,
            chunkModules: false,
            chunkOrigins: true,
            depth: true,
            usedExports: true,
            providedExports: true,
            optimizationBailout: true,
            errorDetails: true,
            publicPath: true,
            logging: true,
            exclude: false,
            maxModules: Infinity
          };

        case "minimal":
          return {
            all: false,
            modules: true,
            maxModules: 0,
            errors: true,
            warnings: true,
            logging: "warn"
          };

        case "errors-only":
          return {
            all: false,
            errors: true,
            moduleTrace: true,
            logging: "error"
          };

        case "errors-warnings":
          return {
            all: false,
            errors: true,
            warnings: true,
            logging: "warn"
          };

        default:
          return {};
      }
    }
  }, {
    key: "getChildOptions",
    value: function getChildOptions(options, idx) {
      var innerOptions;

      if (Array.isArray(options.children)) {
        if (idx < options.children.length) {
          innerOptions = options.children[idx];
        }
      } else if (_typeof(options.children) === "object" && options.children) {
        innerOptions = options.children;
      }

      if (typeof innerOptions === "boolean" || typeof innerOptions === "string") {
        innerOptions = Stats.presetToOptions(innerOptions);
      }

      if (!innerOptions) {
        return options;
      }

      var childOptions = Object.assign({}, options);
      delete childOptions.children; // do not inherit children

      return Object.assign(childOptions, innerOptions);
    }
  }]);

  return Stats;
}();

module.exports = Stats;