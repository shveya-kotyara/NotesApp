/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Queue = require("./util/Queue");

var addToSet = function addToSet(a, b) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;
      a.add(item);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

var FlagDependencyExportsPlugin =
/*#__PURE__*/
function () {
  function FlagDependencyExportsPlugin() {
    _classCallCheck(this, FlagDependencyExportsPlugin);
  }

  _createClass(FlagDependencyExportsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("FlagDependencyExportsPlugin", function (compilation) {
        compilation.hooks.finishModules.tap("FlagDependencyExportsPlugin", function (modules) {
          var dependencies = new Map();
          var queue = new Queue();
          var module;
          var moduleWithExports;
          var moduleProvidedExports;
          var providedExportsAreTemporary;

          var processDependenciesBlock = function processDependenciesBlock(depBlock) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = depBlock.dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var dep = _step2.value;
                if (processDependency(dep)) return true;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = depBlock.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var variable = _step3.value;
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                  for (var _iterator5 = variable.dependencies[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _dep = _step5.value;
                    if (processDependency(_dep)) return true;
                  }
                } catch (err) {
                  _didIteratorError5 = true;
                  _iteratorError5 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                      _iterator5["return"]();
                    }
                  } finally {
                    if (_didIteratorError5) {
                      throw _iteratorError5;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = depBlock.blocks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var block = _step4.value;
                if (processDependenciesBlock(block)) return true;
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            return false;
          };

          var processDependency = function processDependency(dep) {
            var exportDesc = dep.getExports && dep.getExports();
            if (!exportDesc) return;
            moduleWithExports = true;
            var exports = exportDesc.exports; // break early if it's only in the worst state

            if (module.buildMeta.providedExports === true) {
              return true;
            } // break if it should move to the worst state


            if (exports === true) {
              module.buildMeta.providedExports = true;
              return true;
            } // merge in new exports


            if (Array.isArray(exports)) {
              addToSet(moduleProvidedExports, exports);
            } // store dependencies


            var exportDeps = exportDesc.dependencies;

            if (exportDeps) {
              providedExportsAreTemporary = true;
              var _iteratorNormalCompletion6 = true;
              var _didIteratorError6 = false;
              var _iteratorError6 = undefined;

              try {
                for (var _iterator6 = exportDeps[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                  var exportDependency = _step6.value;
                  // add dependency for this module
                  var set = dependencies.get(exportDependency);

                  if (set === undefined) {
                    dependencies.set(exportDependency, new Set([module]));
                  } else {
                    set.add(module);
                  }
                }
              } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                    _iterator6["return"]();
                  }
                } finally {
                  if (_didIteratorError6) {
                    throw _iteratorError6;
                  }
                }
              }
            }

            return false;
          };

          var notifyDependencies = function notifyDependencies() {
            var deps = dependencies.get(module);

            if (deps !== undefined) {
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = undefined;

              try {
                for (var _iterator7 = deps[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var dep = _step7.value;
                  queue.enqueue(dep);
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                    _iterator7["return"]();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }
            }
          };

          var notifyDependenciesIfDifferent = function notifyDependenciesIfDifferent(set, array) {
            var deps = dependencies.get(module);

            if (deps !== undefined) {
              if (set.size === array.length) {
                var i = 0;
                var different = false;
                var _iteratorNormalCompletion8 = true;
                var _didIteratorError8 = false;
                var _iteratorError8 = undefined;

                try {
                  for (var _iterator8 = set[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var item = _step8.value;

                    if (item !== array[i++]) {
                      different = true;
                      break;
                    }
                  }
                } catch (err) {
                  _didIteratorError8 = true;
                  _iteratorError8 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                      _iterator8["return"]();
                    }
                  } finally {
                    if (_didIteratorError8) {
                      throw _iteratorError8;
                    }
                  }
                }

                if (!different) return;
              }

              var _iteratorNormalCompletion9 = true;
              var _didIteratorError9 = false;
              var _iteratorError9 = undefined;

              try {
                for (var _iterator9 = deps[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                  var dep = _step9.value;
                  queue.enqueue(dep);
                }
              } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                    _iterator9["return"]();
                  }
                } finally {
                  if (_didIteratorError9) {
                    throw _iteratorError9;
                  }
                }
              }
            }
          }; // Start with all modules without provided exports


          var _iteratorNormalCompletion10 = true;
          var _didIteratorError10 = false;
          var _iteratorError10 = undefined;

          try {
            for (var _iterator10 = modules[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
              var _module = _step10.value;

              if (_module.buildInfo.temporaryProvidedExports) {
                // Clear exports when they are temporary
                // and recreate them
                _module.buildMeta.providedExports = null;
                queue.enqueue(_module);
              } else if (!_module.buildMeta.providedExports) {
                queue.enqueue(_module);
              }
            }
          } catch (err) {
            _didIteratorError10 = true;
            _iteratorError10 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
                _iterator10["return"]();
              }
            } finally {
              if (_didIteratorError10) {
                throw _iteratorError10;
              }
            }
          }

          while (queue.length > 0) {
            module = queue.dequeue();

            if (module.buildMeta.providedExports !== true) {
              moduleWithExports = module.buildMeta && module.buildMeta.exportsType;
              moduleProvidedExports = new Set();
              providedExportsAreTemporary = false;
              processDependenciesBlock(module);
              module.buildInfo.temporaryProvidedExports = providedExportsAreTemporary;

              if (!moduleWithExports) {
                notifyDependencies();
                module.buildMeta.providedExports = true;
              } else if (module.buildMeta.providedExports === true) {
                notifyDependencies();
              } else if (!module.buildMeta.providedExports) {
                notifyDependencies();
                module.buildMeta.providedExports = Array.from(moduleProvidedExports);
              } else {
                notifyDependenciesIfDifferent(moduleProvidedExports, module.buildMeta.providedExports);
                module.buildMeta.providedExports = Array.from(moduleProvidedExports);
              }
            }
          }
        });
        var providedExportsCache = new WeakMap();
        compilation.hooks.rebuildModule.tap("FlagDependencyExportsPlugin", function (module) {
          providedExportsCache.set(module, module.buildMeta.providedExports);
        });
        compilation.hooks.finishRebuildingModule.tap("FlagDependencyExportsPlugin", function (module) {
          module.buildMeta.providedExports = providedExportsCache.get(module);
        });
      });
    }
  }]);

  return FlagDependencyExportsPlugin;
}();

module.exports = FlagDependencyExportsPlugin;