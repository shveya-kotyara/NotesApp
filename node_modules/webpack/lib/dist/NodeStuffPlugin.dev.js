/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require("path");

var ParserHelpers = require("./ParserHelpers");

var ConstDependency = require("./dependencies/ConstDependency");

var NullFactory = require("./NullFactory");

var NodeStuffPlugin =
/*#__PURE__*/
function () {
  function NodeStuffPlugin(options) {
    _classCallCheck(this, NodeStuffPlugin);

    this.options = options;
  }

  _createClass(NodeStuffPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;
      compiler.hooks.compilation.tap("NodeStuffPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(ConstDependency, new NullFactory());
        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());

        var handler = function handler(parser, parserOptions) {
          if (parserOptions.node === false) return;
          var localOptions = options;

          if (parserOptions.node) {
            localOptions = Object.assign({}, localOptions, parserOptions.node);
          }

          var setConstant = function setConstant(expressionName, value) {
            parser.hooks.expression["for"](expressionName).tap("NodeStuffPlugin", function () {
              parser.state.current.addVariable(expressionName, JSON.stringify(value));
              return true;
            });
          };

          var setModuleConstant = function setModuleConstant(expressionName, fn) {
            parser.hooks.expression["for"](expressionName).tap("NodeStuffPlugin", function () {
              parser.state.current.addVariable(expressionName, JSON.stringify(fn(parser.state.module)));
              return true;
            });
          };

          var context = compiler.context;

          if (localOptions.__filename) {
            if (localOptions.__filename === "mock") {
              setConstant("__filename", "/index.js");
            } else {
              setModuleConstant("__filename", function (module) {
                return path.relative(context, module.resource);
              });
            }

            parser.hooks.evaluateIdentifier["for"]("__filename").tap("NodeStuffPlugin", function (expr) {
              if (!parser.state.module) return;
              var resource = parser.state.module.resource;
              var i = resource.indexOf("?");
              return ParserHelpers.evaluateToString(i < 0 ? resource : resource.substr(0, i))(expr);
            });
          }

          if (localOptions.__dirname) {
            if (localOptions.__dirname === "mock") {
              setConstant("__dirname", "/");
            } else {
              setModuleConstant("__dirname", function (module) {
                return path.relative(context, module.context);
              });
            }

            parser.hooks.evaluateIdentifier["for"]("__dirname").tap("NodeStuffPlugin", function (expr) {
              if (!parser.state.module) return;
              return ParserHelpers.evaluateToString(parser.state.module.context)(expr);
            });
          }

          parser.hooks.expression["for"]("require.extensions").tap("NodeStuffPlugin", ParserHelpers.expressionIsUnsupported(parser, "require.extensions is not supported by webpack. Use a loader instead."));
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("NodeStuffPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("NodeStuffPlugin", handler);
      });
    }
  }]);

  return NodeStuffPlugin;
}();

module.exports = NodeStuffPlugin;