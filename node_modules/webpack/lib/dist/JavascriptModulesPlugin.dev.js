/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Parser = require("./Parser");

var Template = require("./Template");

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;

var JavascriptGenerator = require("./JavascriptGenerator");

var createHash = require("./util/createHash");

var JavascriptModulesPlugin =
/*#__PURE__*/
function () {
  function JavascriptModulesPlugin() {
    _classCallCheck(this, JavascriptModulesPlugin);
  }

  _createClass(JavascriptModulesPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("JavascriptModulesPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        normalModuleFactory.hooks.createParser["for"]("javascript/auto").tap("JavascriptModulesPlugin", function (options) {
          return new Parser(options, "auto");
        });
        normalModuleFactory.hooks.createParser["for"]("javascript/dynamic").tap("JavascriptModulesPlugin", function (options) {
          return new Parser(options, "script");
        });
        normalModuleFactory.hooks.createParser["for"]("javascript/esm").tap("JavascriptModulesPlugin", function (options) {
          return new Parser(options, "module");
        });
        normalModuleFactory.hooks.createGenerator["for"]("javascript/auto").tap("JavascriptModulesPlugin", function () {
          return new JavascriptGenerator();
        });
        normalModuleFactory.hooks.createGenerator["for"]("javascript/dynamic").tap("JavascriptModulesPlugin", function () {
          return new JavascriptGenerator();
        });
        normalModuleFactory.hooks.createGenerator["for"]("javascript/esm").tap("JavascriptModulesPlugin", function () {
          return new JavascriptGenerator();
        });
        compilation.mainTemplate.hooks.renderManifest.tap("JavascriptModulesPlugin", function (result, options) {
          var chunk = options.chunk;
          var hash = options.hash;
          var fullHash = options.fullHash;
          var outputOptions = options.outputOptions;
          var moduleTemplates = options.moduleTemplates;
          var dependencyTemplates = options.dependencyTemplates;
          var filenameTemplate = chunk.filenameTemplate || outputOptions.filename;
          var useChunkHash = compilation.mainTemplate.useChunkHash(chunk);
          result.push({
            render: function render() {
              return compilation.mainTemplate.render(hash, chunk, moduleTemplates.javascript, dependencyTemplates);
            },
            filenameTemplate: filenameTemplate,
            pathOptions: {
              noChunkHash: !useChunkHash,
              contentHashType: "javascript",
              chunk: chunk
            },
            identifier: "chunk".concat(chunk.id),
            hash: useChunkHash ? chunk.hash : fullHash
          });
          return result;
        });
        compilation.mainTemplate.hooks.modules.tap("JavascriptModulesPlugin", function (source, chunk, hash, moduleTemplate, dependencyTemplates) {
          return Template.renderChunkModules(chunk, function (m) {
            return typeof m.source === "function";
          }, moduleTemplate, dependencyTemplates, "/******/ ");
        });
        compilation.chunkTemplate.hooks.renderManifest.tap("JavascriptModulesPlugin", function (result, options) {
          var chunk = options.chunk;
          var outputOptions = options.outputOptions;
          var moduleTemplates = options.moduleTemplates;
          var dependencyTemplates = options.dependencyTemplates;
          var filenameTemplate = chunk.filenameTemplate || outputOptions.chunkFilename;
          result.push({
            render: function render() {
              return _this.renderJavascript(compilation.chunkTemplate, chunk, moduleTemplates.javascript, dependencyTemplates);
            },
            filenameTemplate: filenameTemplate,
            pathOptions: {
              chunk: chunk,
              contentHashType: "javascript"
            },
            identifier: "chunk".concat(chunk.id),
            hash: chunk.hash
          });
          return result;
        });
        compilation.hooks.contentHash.tap("JavascriptModulesPlugin", function (chunk) {
          var outputOptions = compilation.outputOptions;
          var hashSalt = outputOptions.hashSalt,
              hashDigest = outputOptions.hashDigest,
              hashDigestLength = outputOptions.hashDigestLength,
              hashFunction = outputOptions.hashFunction;
          var hash = createHash(hashFunction);
          if (hashSalt) hash.update(hashSalt);
          var template = chunk.hasRuntime() ? compilation.mainTemplate : compilation.chunkTemplate;
          hash.update("".concat(chunk.id, " "));
          hash.update(chunk.ids ? chunk.ids.join(",") : "");
          template.updateHashForChunk(hash, chunk, compilation.moduleTemplates.javascript, compilation.dependencyTemplates);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = chunk.modulesIterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var m = _step.value;

              if (typeof m.source === "function") {
                hash.update(m.hash);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          var digest =
          /** @type {string} */
          hash.digest(hashDigest);
          chunk.contentHash.javascript = digest.substr(0, hashDigestLength);
        });
      });
    }
  }, {
    key: "renderJavascript",
    value: function renderJavascript(chunkTemplate, chunk, moduleTemplate, dependencyTemplates) {
      var moduleSources = Template.renderChunkModules(chunk, function (m) {
        return typeof m.source === "function";
      }, moduleTemplate, dependencyTemplates);
      var core = chunkTemplate.hooks.modules.call(moduleSources, chunk, moduleTemplate, dependencyTemplates);
      var source = chunkTemplate.hooks.render.call(core, chunk, moduleTemplate, dependencyTemplates);

      if (chunk.hasEntryModule()) {
        source = chunkTemplate.hooks.renderWithEntry.call(source, chunk);
      }

      chunk.rendered = true;
      return new ConcatSource(source, ";");
    }
  }]);

  return JavascriptModulesPlugin;
}();

module.exports = JavascriptModulesPlugin;