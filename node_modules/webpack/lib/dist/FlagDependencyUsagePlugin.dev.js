/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Module")} Module */

/** @typedef {import("./DependenciesBlock")} DependenciesBlock */

/** @typedef {false | true | string[]} UsedExports */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var addToSet = function addToSet(a, b) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = b[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;
      if (!a.includes(item)) a.push(item);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return a;
};

var isSubset = function isSubset(biggerSet, subset) {
  if (biggerSet === true) return true;
  if (subset === true) return false;
  return subset.every(function (item) {
    return biggerSet.indexOf(item) >= 0;
  });
};

var FlagDependencyUsagePlugin =
/*#__PURE__*/
function () {
  function FlagDependencyUsagePlugin() {
    _classCallCheck(this, FlagDependencyUsagePlugin);
  }

  _createClass(FlagDependencyUsagePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("FlagDependencyUsagePlugin", function (compilation) {
        compilation.hooks.optimizeDependencies.tap("FlagDependencyUsagePlugin", function (modules) {
          var processModule = function processModule(module, usedExports) {
            module.used = true;
            if (module.usedExports === true) return;

            if (usedExports === true) {
              module.usedExports = true;
            } else if (Array.isArray(usedExports)) {
              var old = module.usedExports ? module.usedExports.length : -1;
              module.usedExports = addToSet(module.usedExports || [], usedExports);

              if (module.usedExports.length === old) {
                return;
              }
            } else if (Array.isArray(module.usedExports)) {
              return;
            } else {
              module.usedExports = false;
            } // for a module without side effects we stop tracking usage here when no export is used
            // This module won't be evaluated in this case


            if (module.factoryMeta.sideEffectFree) {
              if (module.usedExports === false) return;
              if (Array.isArray(module.usedExports) && module.usedExports.length === 0) return;
            }

            queue.push([module, module, module.usedExports]);
          };

          var processDependenciesBlock = function processDependenciesBlock(module, depBlock, usedExports) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = depBlock.dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var dep = _step2.value;
                processDependency(module, dep);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = depBlock.variables[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var variable = _step3.value;
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                  for (var _iterator5 = variable.dependencies[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                    var _dep = _step5.value;
                    processDependency(module, _dep);
                  }
                } catch (err) {
                  _didIteratorError5 = true;
                  _iteratorError5 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                      _iterator5["return"]();
                    }
                  } finally {
                    if (_didIteratorError5) {
                      throw _iteratorError5;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = depBlock.blocks[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var block = _step4.value;
                queue.push([module, block, usedExports]);
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          };

          var processDependency = function processDependency(module, dep) {
            var reference = compilation.getDependencyReference(module, dep);
            if (!reference) return;
            var referenceModule = reference.module;
            var importedNames = reference.importedNames;
            var oldUsed = referenceModule.used;
            var oldUsedExports = referenceModule.usedExports;

            if (!oldUsed || importedNames && (!oldUsedExports || !isSubset(oldUsedExports, importedNames))) {
              processModule(referenceModule, importedNames);
            }
          };

          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = modules[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var _module = _step6.value;
              if (!_module.used) _module.used = false;
            }
            /** @type {[Module, DependenciesBlock, UsedExports][]} */

          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }

          var queue = [];
          var _iteratorNormalCompletion7 = true;
          var _didIteratorError7 = false;
          var _iteratorError7 = undefined;

          try {
            for (var _iterator7 = compilation._preparedEntrypoints[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
              var preparedEntrypoint = _step7.value;

              if (preparedEntrypoint.module) {
                processModule(preparedEntrypoint.module, true);
              }
            }
          } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }
            } finally {
              if (_didIteratorError7) {
                throw _iteratorError7;
              }
            }
          }

          while (queue.length) {
            var queueItem = queue.pop();
            processDependenciesBlock(queueItem[0], queueItem[1], queueItem[2]);
          }
        });
      });
    }
  }]);

  return FlagDependencyUsagePlugin;
}();

module.exports = FlagDependencyUsagePlugin;