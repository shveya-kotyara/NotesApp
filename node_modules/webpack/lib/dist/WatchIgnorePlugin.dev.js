/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var validateOptions = require("schema-utils");

var schema = require("../schemas/plugins/WatchIgnorePlugin.json");
/** @typedef {import("../declarations/plugins/WatchIgnorePlugin").WatchIgnorePluginOptions} WatchIgnorePluginOptions */


var IgnoringWatchFileSystem =
/*#__PURE__*/
function () {
  function IgnoringWatchFileSystem(wfs, paths) {
    _classCallCheck(this, IgnoringWatchFileSystem);

    this.wfs = wfs;
    this.paths = paths;
  }

  _createClass(IgnoringWatchFileSystem, [{
    key: "watch",
    value: function watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {
      var _this = this;

      var ignored = function ignored(path) {
        return _this.paths.some(function (p) {
          return p instanceof RegExp ? p.test(path) : path.indexOf(p) === 0;
        });
      };

      var notIgnored = function notIgnored(path) {
        return !ignored(path);
      };

      var ignoredFiles = files.filter(ignored);
      var ignoredDirs = dirs.filter(ignored);
      var watcher = this.wfs.watch(files.filter(notIgnored), dirs.filter(notIgnored), missing, startTime, options, function (err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles) {
        if (err) return callback(err);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = ignoredFiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var path = _step.value;
            fileTimestamps.set(path, 1);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = ignoredDirs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _path = _step2.value;
            dirTimestamps.set(_path, 1);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        callback(err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles);
      }, callbackUndelayed);
      return {
        close: function close() {
          return watcher.close();
        },
        pause: function pause() {
          return watcher.pause();
        },
        getContextTimestamps: function getContextTimestamps() {
          var dirTimestamps = watcher.getContextTimestamps();
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = ignoredDirs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var path = _step3.value;
              dirTimestamps.set(path, 1);
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          return dirTimestamps;
        },
        getFileTimestamps: function getFileTimestamps() {
          var fileTimestamps = watcher.getFileTimestamps();
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = ignoredFiles[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var path = _step4.value;
              fileTimestamps.set(path, 1);
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          return fileTimestamps;
        }
      };
    }
  }]);

  return IgnoringWatchFileSystem;
}();

var WatchIgnorePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {WatchIgnorePluginOptions} paths list of paths
   */
  function WatchIgnorePlugin(paths) {
    _classCallCheck(this, WatchIgnorePlugin);

    validateOptions(schema, paths, "Watch Ignore Plugin");
    this.paths = paths;
  }

  _createClass(WatchIgnorePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this2 = this;

      compiler.hooks.afterEnvironment.tap("WatchIgnorePlugin", function () {
        compiler.watchFileSystem = new IgnoringWatchFileSystem(compiler.watchFileSystem, _this2.paths);
      });
    }
  }]);

  return WatchIgnorePlugin;
}();

module.exports = WatchIgnorePlugin;