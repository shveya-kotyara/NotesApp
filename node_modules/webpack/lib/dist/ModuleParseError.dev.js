/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WebpackError = require("./WebpackError");
/** @typedef {import("./Module")} Module */


var ModuleParseError =
/*#__PURE__*/
function (_WebpackError) {
  _inherits(ModuleParseError, _WebpackError);

  /**
   * @param {Module} module the errored module
   * @param {string} source source code
   * @param {Error&any} err the parse error
   * @param {string[]} loaders the loaders used
   */
  function ModuleParseError(module, source, err, loaders) {
    var _this;

    _classCallCheck(this, ModuleParseError);

    var message = "Module parse failed: " + err.message;
    var loc = undefined;

    if (loaders.length >= 1) {
      message += "\nFile was processed with these loaders:".concat(loaders.map(function (loader) {
        return "\n * ".concat(loader);
      }).join(""));
      message += "\nYou may need an additional loader to handle the result of these loaders.";
    } else {
      message += "\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders";
    }

    if (err.loc && _typeof(err.loc) === "object" && typeof err.loc.line === "number") {
      var lineNumber = err.loc.line;

      if (/[\0\u0001\u0002\u0003\u0004\u0005\u0006\u0007]/.test(source)) {
        // binary file
        message += "\n(Source code omitted for this binary file)";
      } else {
        var sourceLines = source.split(/\r?\n/);
        var start = Math.max(0, lineNumber - 3);
        var linesBefore = sourceLines.slice(start, lineNumber - 1);
        var theLine = sourceLines[lineNumber - 1];
        var linesAfter = sourceLines.slice(lineNumber, lineNumber + 2);
        message += linesBefore.map(function (l) {
          return "\n| ".concat(l);
        }).join("") + "\n> ".concat(theLine) + linesAfter.map(function (l) {
          return "\n| ".concat(l);
        }).join("");
      }

      loc = err.loc;
    } else {
      message += "\n" + err.stack;
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModuleParseError).call(this, message));
    _this.name = "ModuleParseError";
    _this.module = module;
    _this.loc = loc;
    _this.error = err;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  return ModuleParseError;
}(WebpackError);

module.exports = ModuleParseError;