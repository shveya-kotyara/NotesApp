/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Naoyuki Kanezawa @nkzawa
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MultiEntryDependency = require("./dependencies/MultiEntryDependency");

var SingleEntryDependency = require("./dependencies/SingleEntryDependency");

var MultiModuleFactory = require("./MultiModuleFactory");

var MultiEntryPlugin = require("./MultiEntryPlugin");

var SingleEntryPlugin = require("./SingleEntryPlugin");
/** @typedef {import("../declarations/WebpackOptions").EntryDynamic} EntryDynamic */

/** @typedef {import("../declarations/WebpackOptions").EntryStatic} EntryStatic */

/** @typedef {import("./Compiler")} Compiler */


var DynamicEntryPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {string} context the context path
   * @param {EntryDynamic} entry the entry value
   */
  function DynamicEntryPlugin(context, entry) {
    _classCallCheck(this, DynamicEntryPlugin);

    this.context = context;
    this.entry = entry;
  }
  /**
   * @param {Compiler} compiler the compiler instance
   * @returns {void}
   */


  _createClass(DynamicEntryPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("DynamicEntryPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        var multiModuleFactory = new MultiModuleFactory();
        compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);
        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
      });
      compiler.hooks.make.tapAsync("DynamicEntryPlugin", function (compilation, callback) {
        /**
         * @param {string|string[]} entry entry value or array of entry values
         * @param {string} name name of entry
         * @returns {Promise<EntryStatic>} returns the promise resolving the Compilation#addEntry function
         */
        var addEntry = function addEntry(entry, name) {
          var dep = DynamicEntryPlugin.createDependency(entry, name);
          return new Promise(function (resolve, reject) {
            compilation.addEntry(_this.context, dep, name, function (err) {
              if (err) return reject(err);
              resolve();
            });
          });
        };

        Promise.resolve(_this.entry()).then(function (entry) {
          if (typeof entry === "string" || Array.isArray(entry)) {
            addEntry(entry, "main").then(function () {
              return callback();
            }, callback);
          } else if (_typeof(entry) === "object") {
            Promise.all(Object.keys(entry).map(function (name) {
              return addEntry(entry[name], name);
            })).then(function () {
              return callback();
            }, callback);
          }
        });
      });
    }
  }]);

  return DynamicEntryPlugin;
}();

module.exports = DynamicEntryPlugin;
/**
 * @param {string|string[]} entry entry value or array of entry paths
 * @param {string} name name of entry
 * @returns {SingleEntryDependency|MultiEntryDependency} returns dep
 */

DynamicEntryPlugin.createDependency = function (entry, name) {
  if (Array.isArray(entry)) {
    return MultiEntryPlugin.createDependency(entry, name);
  } else {
    return SingleEntryPlugin.createDependency(entry, name);
  }
};