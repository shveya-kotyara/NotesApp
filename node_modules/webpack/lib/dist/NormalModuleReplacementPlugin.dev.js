/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require("path");

var NormalModuleReplacementPlugin =
/*#__PURE__*/
function () {
  function NormalModuleReplacementPlugin(resourceRegExp, newResource) {
    _classCallCheck(this, NormalModuleReplacementPlugin);

    this.resourceRegExp = resourceRegExp;
    this.newResource = newResource;
  }

  _createClass(NormalModuleReplacementPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var resourceRegExp = this.resourceRegExp;
      var newResource = this.newResource;
      compiler.hooks.normalModuleFactory.tap("NormalModuleReplacementPlugin", function (nmf) {
        nmf.hooks.beforeResolve.tap("NormalModuleReplacementPlugin", function (result) {
          if (!result) return;

          if (resourceRegExp.test(result.request)) {
            if (typeof newResource === "function") {
              newResource(result);
            } else {
              result.request = newResource;
            }
          }

          return result;
        });
        nmf.hooks.afterResolve.tap("NormalModuleReplacementPlugin", function (result) {
          if (!result) return;

          if (resourceRegExp.test(result.resource)) {
            if (typeof newResource === "function") {
              newResource(result);
            } else {
              result.resource = path.resolve(path.dirname(result.resource), newResource);
            }
          }

          return result;
        });
      });
    }
  }]);

  return NormalModuleReplacementPlugin;
}();

module.exports = NormalModuleReplacementPlugin;