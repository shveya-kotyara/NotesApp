/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require("path");

var ContextElementDependency = require("./dependencies/ContextElementDependency");

var ContextReplacementPlugin =
/*#__PURE__*/
function () {
  function ContextReplacementPlugin(resourceRegExp, newContentResource, newContentRecursive, newContentRegExp) {
    _classCallCheck(this, ContextReplacementPlugin);

    this.resourceRegExp = resourceRegExp;

    if (typeof newContentResource === "function") {
      this.newContentCallback = newContentResource;
    } else if (typeof newContentResource === "string" && _typeof(newContentRecursive) === "object") {
      this.newContentResource = newContentResource;

      this.newContentCreateContextMap = function (fs, callback) {
        callback(null, newContentRecursive);
      };
    } else if (typeof newContentResource === "string" && typeof newContentRecursive === "function") {
      this.newContentResource = newContentResource;
      this.newContentCreateContextMap = newContentRecursive;
    } else {
      if (typeof newContentResource !== "string") {
        newContentRegExp = newContentRecursive;
        newContentRecursive = newContentResource;
        newContentResource = undefined;
      }

      if (typeof newContentRecursive !== "boolean") {
        newContentRegExp = newContentRecursive;
        newContentRecursive = undefined;
      }

      this.newContentResource = newContentResource;
      this.newContentRecursive = newContentRecursive;
      this.newContentRegExp = newContentRegExp;
    }
  }

  _createClass(ContextReplacementPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var resourceRegExp = this.resourceRegExp;
      var newContentCallback = this.newContentCallback;
      var newContentResource = this.newContentResource;
      var newContentRecursive = this.newContentRecursive;
      var newContentRegExp = this.newContentRegExp;
      var newContentCreateContextMap = this.newContentCreateContextMap;
      compiler.hooks.contextModuleFactory.tap("ContextReplacementPlugin", function (cmf) {
        cmf.hooks.beforeResolve.tap("ContextReplacementPlugin", function (result) {
          if (!result) return;

          if (resourceRegExp.test(result.request)) {
            if (newContentResource !== undefined) {
              result.request = newContentResource;
            }

            if (newContentRecursive !== undefined) {
              result.recursive = newContentRecursive;
            }

            if (newContentRegExp !== undefined) {
              result.regExp = newContentRegExp;
            }

            if (typeof newContentCallback === "function") {
              newContentCallback(result);
            } else {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = result.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var d = _step.value;
                  if (d.critical) d.critical = false;
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
          }

          return result;
        });
        cmf.hooks.afterResolve.tap("ContextReplacementPlugin", function (result) {
          if (!result) return;

          if (resourceRegExp.test(result.resource)) {
            if (newContentResource !== undefined) {
              result.resource = path.resolve(result.resource, newContentResource);
            }

            if (newContentRecursive !== undefined) {
              result.recursive = newContentRecursive;
            }

            if (newContentRegExp !== undefined) {
              result.regExp = newContentRegExp;
            }

            if (typeof newContentCreateContextMap === "function") {
              result.resolveDependencies = createResolveDependenciesFromContextMap(newContentCreateContextMap);
            }

            if (typeof newContentCallback === "function") {
              var origResource = result.resource;
              newContentCallback(result);

              if (result.resource !== origResource) {
                result.resource = path.resolve(origResource, result.resource);
              }
            } else {
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = result.dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var d = _step2.value;
                  if (d.critical) d.critical = false;
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                    _iterator2["return"]();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            }
          }

          return result;
        });
      });
    }
  }]);

  return ContextReplacementPlugin;
}();

var createResolveDependenciesFromContextMap = function createResolveDependenciesFromContextMap(createContextMap) {
  var resolveDependenciesFromContextMap = function resolveDependenciesFromContextMap(fs, options, callback) {
    createContextMap(fs, function (err, map) {
      if (err) return callback(err);
      var dependencies = Object.keys(map).map(function (key) {
        return new ContextElementDependency(map[key] + options.resourceQuery, key);
      });
      callback(null, dependencies);
    });
  };

  return resolveDependenciesFromContextMap;
};

module.exports = ContextReplacementPlugin;