/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var util = require("util");

var DependenciesBlock = require("./DependenciesBlock");

var ModuleReason = require("./ModuleReason");

var SortableSet = require("./util/SortableSet");

var Template = require("./Template");
/** @typedef {import("./Chunk")} Chunk */

/** @typedef {import("./RequestShortener")} RequestShortener */

/** @typedef {import("./WebpackError")} WebpackError */

/** @typedef {import("./util/createHash").Hash} Hash */


var EMPTY_RESOLVE_OPTIONS = {};
var debugId = 1000;

var sortById = function sortById(a, b) {
  return a.id - b.id;
};

var sortByDebugId = function sortByDebugId(a, b) {
  return a.debugId - b.debugId;
};
/** @typedef {(requestShortener: RequestShortener) => string} OptimizationBailoutFunction */


var Module =
/*#__PURE__*/
function (_DependenciesBlock) {
  _inherits(Module, _DependenciesBlock);

  function Module(type) {
    var _this;

    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Module);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Module).call(this));
    /** @type {string} */

    _this.type = type;
    /** @type {string} */

    _this.context = context; // Unique Id

    /** @type {number} */

    _this.debugId = debugId++; // Hash

    /** @type {string} */

    _this.hash = undefined;
    /** @type {string} */

    _this.renderedHash = undefined; // Info from Factory

    /** @type {TODO} */

    _this.resolveOptions = EMPTY_RESOLVE_OPTIONS;
    /** @type {object} */

    _this.factoryMeta = {}; // Info from Build

    /** @type {WebpackError[]} */

    _this.warnings = [];
    /** @type {WebpackError[]} */

    _this.errors = [];
    /** @type {object} */

    _this.buildMeta = undefined;
    /** @type {object} */

    _this.buildInfo = undefined; // Graph (per Compilation)

    /** @type {ModuleReason[]} */

    _this.reasons = [];
    /** @type {SortableSet<Chunk>} */

    _this._chunks = new SortableSet(undefined, sortById); // Info from Compilation (per Compilation)

    /** @type {number|string} */

    _this.id = null;
    /** @type {number} */

    _this.index = null;
    /** @type {number} */

    _this.index2 = null;
    /** @type {number} */

    _this.depth = null;
    /** @type {Module} */

    _this.issuer = null;
    /** @type {undefined | object} */

    _this.profile = undefined;
    /** @type {boolean} */

    _this.prefetched = false;
    /** @type {boolean} */

    _this.built = false; // Info from Optimization (per Compilation)

    /** @type {null | boolean} */

    _this.used = null;
    /** @type {false | true | string[]} */

    _this.usedExports = null;
    /** @type {(string | OptimizationBailoutFunction)[]} */

    _this.optimizationBailout = []; // delayed operations

    /** @type {undefined | {oldChunk: Chunk, newChunks: Chunk[]}[] } */

    _this._rewriteChunkInReasons = undefined;
    /** @type {boolean} */

    _this.useSourceMap = false; // info from build

    _this._source = null;
    return _this;
  }

  _createClass(Module, [{
    key: "disconnect",
    value: function disconnect() {
      this.hash = undefined;
      this.renderedHash = undefined;
      this.reasons.length = 0;
      this._rewriteChunkInReasons = undefined;

      this._chunks.clear();

      this.id = null;
      this.index = null;
      this.index2 = null;
      this.depth = null;
      this.issuer = null;
      this.profile = undefined;
      this.prefetched = false;
      this.built = false;
      this.used = null;
      this.usedExports = null;
      this.optimizationBailout.length = 0;

      _get(_getPrototypeOf(Module.prototype), "disconnect", this).call(this);
    }
  }, {
    key: "unseal",
    value: function unseal() {
      this.id = null;
      this.index = null;
      this.index2 = null;
      this.depth = null;

      this._chunks.clear();

      _get(_getPrototypeOf(Module.prototype), "unseal", this).call(this);
    }
  }, {
    key: "setChunks",
    value: function setChunks(chunks) {
      this._chunks = new SortableSet(chunks, sortById);
    }
  }, {
    key: "addChunk",
    value: function addChunk(chunk) {
      if (this._chunks.has(chunk)) return false;

      this._chunks.add(chunk);

      return true;
    }
  }, {
    key: "removeChunk",
    value: function removeChunk(chunk) {
      if (this._chunks["delete"](chunk)) {
        chunk.removeModule(this);
        return true;
      }

      return false;
    }
  }, {
    key: "isInChunk",
    value: function isInChunk(chunk) {
      return this._chunks.has(chunk);
    }
  }, {
    key: "isEntryModule",
    value: function isEntryModule() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var chunk = _step.value;
          if (chunk.entryModule === this) return true;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
  }, {
    key: "getChunks",

    /**
     * @returns {Chunk[]} all chunks which contain the module
     */
    value: function getChunks() {
      return Array.from(this._chunks);
    }
  }, {
    key: "getNumberOfChunks",
    value: function getNumberOfChunks() {
      return this._chunks.size;
    }
  }, {
    key: "hasEqualsChunks",
    value: function hasEqualsChunks(otherModule) {
      if (this._chunks.size !== otherModule._chunks.size) return false;

      this._chunks.sortWith(sortByDebugId);

      otherModule._chunks.sortWith(sortByDebugId);

      var a = this._chunks[Symbol.iterator]();

      var b = otherModule._chunks[Symbol.iterator](); // eslint-disable-next-line no-constant-condition


      while (true) {
        var aItem = a.next();
        var bItem = b.next();
        if (aItem.done) return true;
        if (aItem.value !== bItem.value) return false;
      }
    }
  }, {
    key: "addReason",
    value: function addReason(module, dependency, explanation) {
      this.reasons.push(new ModuleReason(module, dependency, explanation));
    }
  }, {
    key: "removeReason",
    value: function removeReason(module, dependency) {
      for (var i = 0; i < this.reasons.length; i++) {
        var r = this.reasons[i];

        if (r.module === module && r.dependency === dependency) {
          this.reasons.splice(i, 1);
          return true;
        }
      }

      return false;
    }
  }, {
    key: "hasReasonForChunk",
    value: function hasReasonForChunk(chunk) {
      if (this._rewriteChunkInReasons) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this._rewriteChunkInReasons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var operation = _step2.value;

            this._doRewriteChunkInReasons(operation.oldChunk, operation.newChunks);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        this._rewriteChunkInReasons = undefined;
      }

      for (var i = 0; i < this.reasons.length; i++) {
        if (this.reasons[i].hasChunk(chunk)) return true;
      }

      return false;
    }
  }, {
    key: "hasReasons",
    value: function hasReasons() {
      return this.reasons.length > 0;
    }
  }, {
    key: "rewriteChunkInReasons",
    value: function rewriteChunkInReasons(oldChunk, newChunks) {
      // This is expensive. Delay operation until we really need the data
      if (this._rewriteChunkInReasons === undefined) {
        this._rewriteChunkInReasons = [];
      }

      this._rewriteChunkInReasons.push({
        oldChunk: oldChunk,
        newChunks: newChunks
      });
    }
  }, {
    key: "_doRewriteChunkInReasons",
    value: function _doRewriteChunkInReasons(oldChunk, newChunks) {
      for (var i = 0; i < this.reasons.length; i++) {
        this.reasons[i].rewriteChunks(oldChunk, newChunks);
      }
    }
    /**
     * @param {string=} exportName the name of the export
     * @returns {boolean|string} false if the export isn't used, true if no exportName is provided and the module is used, or the name to access it if the export is used
     */

  }, {
    key: "isUsed",
    value: function isUsed(exportName) {
      if (!exportName) return this.used !== false;
      if (this.used === null || this.usedExports === null) return exportName;
      if (!this.used) return false;
      if (!this.usedExports) return false;
      if (this.usedExports === true) return exportName;
      var idx = this.usedExports.indexOf(exportName);
      if (idx < 0) return false; // Mangle export name if possible

      if (this.isProvided(exportName)) {
        if (this.buildMeta.exportsType === "namespace") {
          return Template.numberToIdentifer(idx);
        }

        if (this.buildMeta.exportsType === "named" && !this.usedExports.includes("default")) {
          return Template.numberToIdentifer(idx);
        }
      }

      return exportName;
    }
  }, {
    key: "isProvided",
    value: function isProvided(exportName) {
      if (!Array.isArray(this.buildMeta.providedExports)) return null;
      return this.buildMeta.providedExports.includes(exportName);
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Module[".concat(this.id || this.debugId, "]");
    }
  }, {
    key: "needRebuild",
    value: function needRebuild(fileTimestamps, contextTimestamps) {
      return true;
    }
    /**
     * @param {Hash} hash the hash used to track dependencies
     * @returns {void}
     */

  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      hash.update("".concat(this.id));
      hash.update(JSON.stringify(this.usedExports));

      _get(_getPrototypeOf(Module.prototype), "updateHash", this).call(this, hash);
    }
  }, {
    key: "sortItems",
    value: function sortItems(sortChunks) {
      _get(_getPrototypeOf(Module.prototype), "sortItems", this).call(this);

      if (sortChunks) this._chunks.sort();
      this.reasons.sort(function (a, b) {
        if (a.module === b.module) return 0;
        if (!a.module) return -1;
        if (!b.module) return 1;
        return sortById(a.module, b.module);
      });

      if (Array.isArray(this.usedExports)) {
        this.usedExports.sort();
      }
    }
  }, {
    key: "unbuild",
    value: function unbuild() {
      this.dependencies.length = 0;
      this.blocks.length = 0;
      this.variables.length = 0;
      this.buildMeta = undefined;
      this.buildInfo = undefined;
      this.disconnect();
    }
  }, {
    key: "exportsArgument",
    get: function get() {
      return this.buildInfo && this.buildInfo.exportsArgument || "exports";
    }
  }, {
    key: "moduleArgument",
    get: function get() {
      return this.buildInfo && this.buildInfo.moduleArgument || "module";
    }
  }, {
    key: "optional",
    get: function get() {
      return this.reasons.length > 0 && this.reasons.every(function (r) {
        return r.dependency && r.dependency.optional;
      });
    }
  }, {
    key: "chunksIterable",
    get: function get() {
      return this._chunks;
    }
  }, {
    key: "arguments",
    get: function get() {
      throw new Error("Module.arguments was removed, there is no replacement.");
    },
    set: function set(value) {
      throw new Error("Module.arguments was removed, there is no replacement.");
    }
  }]);

  return Module;
}(DependenciesBlock); // TODO remove in webpack 5


Object.defineProperty(Module.prototype, "forEachChunk", {
  configurable: false,
  value: util.deprecate(
  /**
   * @deprecated
   * @param {function(any, any, Set<any>): void} fn callback function
   * @returns {void}
   * @this {Module}
   */
  function (fn) {
    this._chunks.forEach(fn);
  }, "Module.forEachChunk: Use for(const chunk of module.chunksIterable) instead")
}); // TODO remove in webpack 5

Object.defineProperty(Module.prototype, "mapChunks", {
  configurable: false,
  value: util.deprecate(
  /**
   * @deprecated
   * @param {function(any, any): void} fn Mapper function
   * @returns {Array<TODO>} Array of chunks mapped
   * @this {Module}
   */
  function (fn) {
    return Array.from(this._chunks, fn);
  }, "Module.mapChunks: Use Array.from(module.chunksIterable, fn) instead")
}); // TODO remove in webpack 5

Object.defineProperty(Module.prototype, "entry", {
  configurable: false,
  get: function get() {
    throw new Error("Module.entry was removed. Use Chunk.entryModule");
  },
  set: function set() {
    throw new Error("Module.entry was removed. Use Chunk.entryModule");
  }
}); // TODO remove in webpack 5

Object.defineProperty(Module.prototype, "meta", {
  configurable: false,
  get: util.deprecate(
  /**
   * @deprecated
   * @returns {void}
   * @this {Module}
   */
  function () {
    return this.buildMeta;
  }, "Module.meta was renamed to Module.buildMeta"),
  set: util.deprecate(
  /**
   * @deprecated
   * @param {TODO} value Value
   * @returns {void}
   * @this {Module}
   */
  function (value) {
    this.buildMeta = value;
  }, "Module.meta was renamed to Module.buildMeta")
});
/** @type {function(): string} */

Module.prototype.identifier = null;
/** @type {function(RequestShortener): string} */

Module.prototype.readableIdentifier = null;
Module.prototype.build = null;
Module.prototype.source = null;
Module.prototype.size = null;
Module.prototype.nameForCondition = null;
/** @type {null | function(Chunk): boolean} */

Module.prototype.chunkCondition = null;
Module.prototype.updateCacheModule = null;
module.exports = Module;