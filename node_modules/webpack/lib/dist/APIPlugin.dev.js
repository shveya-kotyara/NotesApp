/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ConstDependency = require("./dependencies/ConstDependency");

var ParserHelpers = require("./ParserHelpers");

var NullFactory = require("./NullFactory");
/* eslint-disable camelcase */


var REPLACEMENTS = {
  __webpack_require__: "__webpack_require__",
  __webpack_public_path__: "__webpack_require__.p",
  __webpack_modules__: "__webpack_require__.m",
  __webpack_chunk_load__: "__webpack_require__.e",
  __non_webpack_require__: "require",
  __webpack_nonce__: "__webpack_require__.nc",
  "require.onError": "__webpack_require__.oe"
};
var NO_WEBPACK_REQUIRE = {
  __non_webpack_require__: true
};
var REPLACEMENT_TYPES = {
  __webpack_public_path__: "string",
  __webpack_require__: "function",
  __webpack_modules__: "object",
  __webpack_chunk_load__: "function",
  __webpack_nonce__: "string"
};
/* eslint-enable camelcase */

var APIPlugin =
/*#__PURE__*/
function () {
  function APIPlugin() {
    _classCallCheck(this, APIPlugin);
  }

  _createClass(APIPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("APIPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(ConstDependency, new NullFactory());
        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());

        var handler = function handler(parser) {
          Object.keys(REPLACEMENTS).forEach(function (key) {
            parser.hooks.expression["for"](key).tap("APIPlugin", NO_WEBPACK_REQUIRE[key] ? ParserHelpers.toConstantDependency(parser, REPLACEMENTS[key]) : ParserHelpers.toConstantDependencyWithWebpackRequire(parser, REPLACEMENTS[key]));
            var type = REPLACEMENT_TYPES[key];

            if (type) {
              parser.hooks.evaluateTypeof["for"](key).tap("APIPlugin", ParserHelpers.evaluateToString(type));
            }
          });
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("APIPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("APIPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/esm").tap("APIPlugin", handler);
      });
    }
  }]);

  return APIPlugin;
}();

module.exports = APIPlugin;