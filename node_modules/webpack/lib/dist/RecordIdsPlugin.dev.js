/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var identifierUtils = require("./util/identifier");
/** @typedef {import("./Compiler")} Compiler */

/** @typedef {import("./Chunk")} Chunk */

/** @typedef {import("./Module")} Module */

/**
 * @typedef {Object} RecordsChunks
 * @property {Record<string, number>=} byName
 * @property {Record<string, number>=} bySource
 * @property {number[]=} usedIds
 */

/**
 * @typedef {Object} RecordsModules
 * @property {Record<string, number>=} byIdentifier
 * @property {Record<string, number>=} bySource
 * @property {Record<number, number>=} usedIds
 */

/**
 * @typedef {Object} Records
 * @property {RecordsChunks=} chunks
 * @property {RecordsModules=} modules
 */


var RecordIdsPlugin =
/*#__PURE__*/
function () {
  /**
   * @param {Object} options Options object
   * @param {boolean=} options.portableIds true, when ids need to be portable
   */
  function RecordIdsPlugin(options) {
    _classCallCheck(this, RecordIdsPlugin);

    this.options = options || {};
  }
  /**
   * @param {Compiler} compiler the Compiler
   * @returns {void}
   */


  _createClass(RecordIdsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var portableIds = this.options.portableIds;
      compiler.hooks.compilation.tap("RecordIdsPlugin", function (compilation) {
        compilation.hooks.recordModules.tap("RecordIdsPlugin",
        /**
         * @param {Module[]} modules the modules array
         * @param {Records} records the records object
         * @returns {void}
         */
        function (modules, records) {
          if (!records.modules) records.modules = {};
          if (!records.modules.byIdentifier) records.modules.byIdentifier = {};
          if (!records.modules.usedIds) records.modules.usedIds = {};
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _module = _step.value;
              if (typeof _module.id !== "number") continue;
              var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module.identifier(), compilation.cache) : _module.identifier();
              records.modules.byIdentifier[identifier] = _module.id;
              records.modules.usedIds[_module.id] = _module.id;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
        compilation.hooks.reviveModules.tap("RecordIdsPlugin",
        /**
         * @param {Module[]} modules the modules array
         * @param {Records} records the records object
         * @returns {void}
         */
        function (modules, records) {
          if (!records.modules) return;

          if (records.modules.byIdentifier) {
            /** @type {Set<number>} */
            var usedIds = new Set();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = modules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _module2 = _step2.value;
                if (_module2.id !== null) continue;
                var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module2.identifier(), compilation.cache) : _module2.identifier();
                var id = records.modules.byIdentifier[identifier];
                if (id === undefined) continue;
                if (usedIds.has(id)) continue;
                usedIds.add(id);
                _module2.id = id;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }

          if (Array.isArray(records.modules.usedIds)) {
            compilation.usedModuleIds = new Set(records.modules.usedIds);
          }
        });
        /**
         * @param {Module} module the module
         * @returns {string} the (portable) identifier
         */

        var getModuleIdentifier = function getModuleIdentifier(module) {
          if (portableIds) {
            return identifierUtils.makePathsRelative(compiler.context, module.identifier(), compilation.cache);
          }

          return module.identifier();
        };
        /**
         * @param {Chunk} chunk the chunk
         * @returns {string[]} sources of the chunk
         */


        var getChunkSources = function getChunkSources(chunk) {
          /** @type {string[]} */
          var sources = [];
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = chunk.groupsIterable[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var chunkGroup = _step3.value;
              var index = chunkGroup.chunks.indexOf(chunk);

              if (chunkGroup.name) {
                sources.push("".concat(index, " ").concat(chunkGroup.name));
              } else {
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                  for (var _iterator4 = chunkGroup.origins[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var origin = _step4.value;

                    if (origin.module) {
                      if (origin.request) {
                        sources.push("".concat(index, " ").concat(getModuleIdentifier(origin.module), " ").concat(origin.request));
                      } else if (typeof origin.loc === "string") {
                        sources.push("".concat(index, " ").concat(getModuleIdentifier(origin.module), " ").concat(origin.loc));
                      } else if (origin.loc && _typeof(origin.loc) === "object" && origin.loc.start) {
                        sources.push("".concat(index, " ").concat(getModuleIdentifier(origin.module), " ").concat(JSON.stringify(origin.loc.start)));
                      }
                    }
                  }
                } catch (err) {
                  _didIteratorError4 = true;
                  _iteratorError4 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                      _iterator4["return"]();
                    }
                  } finally {
                    if (_didIteratorError4) {
                      throw _iteratorError4;
                    }
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          return sources;
        };

        compilation.hooks.recordChunks.tap("RecordIdsPlugin",
        /**
         * @param {Chunk[]} chunks the chunks array
         * @param {Records} records the records object
         * @returns {void}
         */
        function (chunks, records) {
          if (!records.chunks) records.chunks = {};
          if (!records.chunks.byName) records.chunks.byName = {};
          if (!records.chunks.bySource) records.chunks.bySource = {};
          /** @type {Set<number>} */

          var usedIds = new Set();
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = chunks[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var chunk = _step5.value;
              if (typeof chunk.id !== "number") continue;
              var name = chunk.name;
              if (name) records.chunks.byName[name] = chunk.id;
              var sources = getChunkSources(chunk);
              var _iteratorNormalCompletion6 = true;
              var _didIteratorError6 = false;
              var _iteratorError6 = undefined;

              try {
                for (var _iterator6 = sources[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                  var source = _step6.value;
                  records.chunks.bySource[source] = chunk.id;
                }
              } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                    _iterator6["return"]();
                  }
                } finally {
                  if (_didIteratorError6) {
                    throw _iteratorError6;
                  }
                }
              }

              usedIds.add(chunk.id);
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }

          records.chunks.usedIds = Array.from(usedIds).sort();
        });
        compilation.hooks.reviveChunks.tap("RecordIdsPlugin",
        /**
         * @param {Chunk[]} chunks the chunks array
         * @param {Records} records the records object
         * @returns {void}
         */
        function (chunks, records) {
          if (!records.chunks) return;
          /** @type {Set<number>} */

          var usedIds = new Set();

          if (records.chunks.byName) {
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
              for (var _iterator7 = chunks[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var chunk = _step7.value;
                if (chunk.id !== null) continue;
                if (!chunk.name) continue;
                var id = records.chunks.byName[chunk.name];
                if (id === undefined) continue;
                if (usedIds.has(id)) continue;
                usedIds.add(id);
                chunk.id = id;
              }
            } catch (err) {
              _didIteratorError7 = true;
              _iteratorError7 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                  _iterator7["return"]();
                }
              } finally {
                if (_didIteratorError7) {
                  throw _iteratorError7;
                }
              }
            }
          }

          if (records.chunks.bySource) {
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
              for (var _iterator8 = chunks[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                var _chunk = _step8.value;
                var sources = getChunkSources(_chunk);
                var _iteratorNormalCompletion9 = true;
                var _didIteratorError9 = false;
                var _iteratorError9 = undefined;

                try {
                  for (var _iterator9 = sources[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var source = _step9.value;
                    var _id = records.chunks.bySource[source];
                    if (_id === undefined) continue;
                    if (usedIds.has(_id)) continue;
                    usedIds.add(_id);
                    _chunk.id = _id;
                    break;
                  }
                } catch (err) {
                  _didIteratorError9 = true;
                  _iteratorError9 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
                      _iterator9["return"]();
                    }
                  } finally {
                    if (_didIteratorError9) {
                      throw _iteratorError9;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError8 = true;
              _iteratorError8 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                  _iterator8["return"]();
                }
              } finally {
                if (_didIteratorError8) {
                  throw _iteratorError8;
                }
              }
            }
          }

          if (Array.isArray(records.chunks.usedIds)) {
            compilation.usedChunkIds = new Set(records.chunks.usedIds);
          }
        });
      });
    }
  }]);

  return RecordIdsPlugin;
}();

module.exports = RecordIdsPlugin;