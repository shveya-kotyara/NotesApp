/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Module")} Module */

/** @typedef {import("./Dependency")} Dependency */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ModuleReason =
/*#__PURE__*/
function () {
  /**
   * @param {Module} module the referencing module
   * @param {Dependency} dependency the referencing dependency
   * @param {string=} explanation some extra detail
   */
  function ModuleReason(module, dependency, explanation) {
    _classCallCheck(this, ModuleReason);

    this.module = module;
    this.dependency = dependency;
    this.explanation = explanation;
    this._chunks = null;
  }

  _createClass(ModuleReason, [{
    key: "hasChunk",
    value: function hasChunk(chunk) {
      if (this._chunks) {
        if (this._chunks.has(chunk)) return true;
      } else if (this.module && this.module._chunks.has(chunk)) return true;

      return false;
    }
  }, {
    key: "rewriteChunks",
    value: function rewriteChunks(oldChunk, newChunks) {
      if (!this._chunks) {
        if (this.module) {
          if (!this.module._chunks.has(oldChunk)) return;
          this._chunks = new Set(this.module._chunks);
        } else {
          this._chunks = new Set();
        }
      }

      if (this._chunks.has(oldChunk)) {
        this._chunks["delete"](oldChunk);

        for (var i = 0; i < newChunks.length; i++) {
          this._chunks.add(newChunks[i]);
        }
      }
    }
  }]);

  return ModuleReason;
}();

module.exports = ModuleReason;