"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WebpackError = require("./WebpackError");

var CURRENT_METHOD_REGEXP = /at ([a-zA-Z0-9_.]*)/;
/**
 * @param {string=} method method name
 * @returns {string} message
 */

function createMessage(method) {
  return "Abstract method".concat(method ? " " + method : "", ". Must be overridden.");
}
/**
 * @constructor
 */


function Message() {
  this.stack = undefined;
  Error.captureStackTrace(this);
  /** @type {RegExpMatchArray} */

  var match = this.stack.split("\n")[3].match(CURRENT_METHOD_REGEXP);
  this.message = match && match[1] ? createMessage(match[1]) : createMessage();
}
/**
 * Error for abstract method
 * @example
 * class FooClass {
 *     abstractMethod() {
 *         throw new AbstractMethodError(); // error message: Abstract method FooClass.abstractMethod. Must be overriden.
 *     }
 * }
 *
 */


var AbstractMethodError =
/*#__PURE__*/
function (_WebpackError) {
  _inherits(AbstractMethodError, _WebpackError);

  function AbstractMethodError() {
    var _this;

    _classCallCheck(this, AbstractMethodError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AbstractMethodError).call(this, new Message().message));
    _this.name = "AbstractMethodError";
    return _this;
  }

  return AbstractMethodError;
}(WebpackError);

module.exports = AbstractMethodError;