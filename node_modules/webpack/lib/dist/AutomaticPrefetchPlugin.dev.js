/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var asyncLib = require("neo-async");

var PrefetchDependency = require("./dependencies/PrefetchDependency");

var NormalModule = require("./NormalModule");
/** @typedef {import("./Compiler")} Compiler */


var AutomaticPrefetchPlugin =
/*#__PURE__*/
function () {
  function AutomaticPrefetchPlugin() {
    _classCallCheck(this, AutomaticPrefetchPlugin);
  }

  _createClass(AutomaticPrefetchPlugin, [{
    key: "apply",

    /**
     * Apply the plugin
     * @param {Compiler} compiler Webpack Compiler
     * @returns {void}
     */
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("AutomaticPrefetchPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);
      });
      var lastModules = null;
      compiler.hooks.afterCompile.tap("AutomaticPrefetchPlugin", function (compilation) {
        lastModules = compilation.modules.filter(function (m) {
          return m instanceof NormalModule;
        }).map(function (
        /** @type {NormalModule} */
        m) {
          return {
            context: m.context,
            request: m.request
          };
        });
      });
      compiler.hooks.make.tapAsync("AutomaticPrefetchPlugin", function (compilation, callback) {
        if (!lastModules) return callback();
        asyncLib.forEach(lastModules, function (m, callback) {
          compilation.prefetch(m.context || compiler.context, new PrefetchDependency(m.request), callback);
        }, callback);
      });
    }
  }]);

  return AutomaticPrefetchPlugin;
}();

module.exports = AutomaticPrefetchPlugin;