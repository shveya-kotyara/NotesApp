/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";
/** @typedef {import("./Compiler")} Compiler */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FlagAllModulesAsUsedPlugin =
/*#__PURE__*/
function () {
  function FlagAllModulesAsUsedPlugin(explanation) {
    _classCallCheck(this, FlagAllModulesAsUsedPlugin);

    this.explanation = explanation;
  }
  /**
   * @param {Compiler} compiler webpack compiler
   * @returns {void}
   */


  _createClass(FlagAllModulesAsUsedPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("FlagAllModulesAsUsedPlugin", function (compilation) {
        compilation.hooks.optimizeDependencies.tap("FlagAllModulesAsUsedPlugin", function (modules) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _module = _step.value;
              _module.used = true;
              _module.usedExports = true;

              _module.addReason(null, null, _this.explanation);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        });
      });
    }
  }]);

  return FlagAllModulesAsUsedPlugin;
}();

module.exports = FlagAllModulesAsUsedPlugin;