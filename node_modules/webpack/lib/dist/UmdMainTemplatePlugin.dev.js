/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource,
    OriginalSource = _require.OriginalSource;

var Template = require("./Template");
/** @typedef {import("../declarations/WebpackOptions").LibraryCustomUmdObject} LibraryCustomUmdObject */

/** @typedef {import("./Compilation")} Compilation */

/**
 * @param {string[]} accessor the accessor to convert to path
 * @returns {string} the path
 */


var accessorToObjectAccess = function accessorToObjectAccess(accessor) {
  return accessor.map(function (a) {
    return "[".concat(JSON.stringify(a), "]");
  }).join("");
};
/**
 * @param {string=} base the path prefix
 * @param {string|string[]} accessor the accessor
 * @param {string=} joinWith the element separator
 * @returns {string} the path
 */


var accessorAccess = function accessorAccess(base, accessor) {
  var joinWith = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ", ";
  var accessors = Array.isArray(accessor) ? accessor : [accessor];
  return accessors.map(function (_, idx) {
    var a = base ? base + accessorToObjectAccess(accessors.slice(0, idx + 1)) : accessors[0] + accessorToObjectAccess(accessors.slice(1, idx + 1));
    if (idx === accessors.length - 1) return a;
    if (idx === 0 && base === undefined) return "".concat(a, " = typeof ").concat(a, " === \"object\" ? ").concat(a, " : {}");
    return "".concat(a, " = ").concat(a, " || {}");
  }).join(joinWith);
};
/** @typedef {string | string[] | LibraryCustomUmdObject} UmdMainTemplatePluginName */

/**
 * @typedef {Object} AuxiliaryCommentObject
 * @property {string} root
 * @property {string} commonjs
 * @property {string} commonjs2
 * @property {string} amd
 */

/**
 * @typedef {Object} UmdMainTemplatePluginOption
 * @property {boolean=} optionalAmdExternalAsGlobal
 * @property {boolean} namedDefine
 * @property {string | AuxiliaryCommentObject} auxiliaryComment
 */


var UmdMainTemplatePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {UmdMainTemplatePluginName} name the name of the UMD library
   * @param {UmdMainTemplatePluginOption} options the plugin option
   */
  function UmdMainTemplatePlugin(name, options) {
    _classCallCheck(this, UmdMainTemplatePlugin);

    if (_typeof(name) === "object" && !Array.isArray(name)) {
      this.name = name.root || name.amd || name.commonjs;
      this.names = name;
    } else {
      this.name = name;
      this.names = {
        commonjs: name,
        root: name,
        amd: name
      };
    }

    this.optionalAmdExternalAsGlobal = options.optionalAmdExternalAsGlobal;
    this.namedDefine = options.namedDefine;
    this.auxiliaryComment = options.auxiliaryComment;
  }
  /**
   * @param {Compilation} compilation the compilation instance
   * @returns {void}
   */


  _createClass(UmdMainTemplatePlugin, [{
    key: "apply",
    value: function apply(compilation) {
      var _this = this;

      var mainTemplate = compilation.mainTemplate,
          chunkTemplate = compilation.chunkTemplate,
          runtimeTemplate = compilation.runtimeTemplate;

      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {
        var externals = chunk.getModules().filter(function (m) {
          return m.external && (m.externalType === "umd" || m.externalType === "umd2");
        });
        var optionalExternals = [];
        var requiredExternals = [];

        if (_this.optionalAmdExternalAsGlobal) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = externals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var m = _step.value;

              if (m.optional) {
                optionalExternals.push(m);
              } else {
                requiredExternals.push(m);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          externals = requiredExternals.concat(optionalExternals);
        } else {
          requiredExternals = externals;
        }

        var replaceKeys = function replaceKeys(str) {
          return mainTemplate.getAssetPath(str, {
            hash: hash,
            chunk: chunk
          });
        };

        var externalsDepsArray = function externalsDepsArray(modules) {
          return "[".concat(replaceKeys(modules.map(function (m) {
            return JSON.stringify(_typeof(m.request) === "object" ? m.request.amd : m.request);
          }).join(", ")), "]");
        };

        var externalsRootArray = function externalsRootArray(modules) {
          return replaceKeys(modules.map(function (m) {
            var request = m.request;
            if (_typeof(request) === "object") request = request.root;
            return "root".concat(accessorToObjectAccess([].concat(request)));
          }).join(", "));
        };

        var externalsRequireArray = function externalsRequireArray(type) {
          return replaceKeys(externals.map(function (m) {
            var expr;
            var request = m.request;

            if (_typeof(request) === "object") {
              request = request[type];
            }

            if (request === undefined) {
              throw new Error("Missing external configuration for type:" + type);
            }

            if (Array.isArray(request)) {
              expr = "require(".concat(JSON.stringify(request[0]), ")").concat(accessorToObjectAccess(request.slice(1)));
            } else {
              expr = "require(".concat(JSON.stringify(request), ")");
            }

            if (m.optional) {
              expr = "(function webpackLoadOptionalExternalModule() { try { return ".concat(expr, "; } catch(e) {} }())");
            }

            return expr;
          }).join(", "));
        };

        var externalsArguments = function externalsArguments(modules) {
          return modules.map(function (m) {
            return "__WEBPACK_EXTERNAL_MODULE_".concat(Template.toIdentifier("".concat(m.id)), "__");
          }).join(", ");
        };

        var libraryName = function libraryName(library) {
          return JSON.stringify(replaceKeys([].concat(library).pop()));
        };

        var amdFactory;

        if (optionalExternals.length > 0) {
          var wrapperArguments = externalsArguments(requiredExternals);
          var factoryArguments = requiredExternals.length > 0 ? externalsArguments(requiredExternals) + ", " + externalsRootArray(optionalExternals) : externalsRootArray(optionalExternals);
          amdFactory = "function webpackLoadOptionalExternalModuleAmd(".concat(wrapperArguments, ") {\n") + "\t\t\treturn factory(".concat(factoryArguments, ");\n") + "		}";
        } else {
          amdFactory = "factory";
        }

        var auxiliaryComment = _this.auxiliaryComment;

        var getAuxilaryComment = function getAuxilaryComment(type) {
          if (auxiliaryComment) {
            if (typeof auxiliaryComment === "string") return "\t//" + auxiliaryComment + "\n";
            if (auxiliaryComment[type]) return "\t//" + auxiliaryComment[type] + "\n";
          }

          return "";
        };

        return new ConcatSource(new OriginalSource("(function webpackUniversalModuleDefinition(root, factory) {\n" + getAuxilaryComment("commonjs2") + "	if(typeof exports === 'object' && typeof module === 'object')\n" + "		module.exports = factory(" + externalsRequireArray("commonjs2") + ");\n" + getAuxilaryComment("amd") + "	else if(typeof define === 'function' && define.amd)\n" + (requiredExternals.length > 0 ? _this.names.amd && _this.namedDefine === true ? "		define(" + libraryName(_this.names.amd) + ", " + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n" : "		define(" + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n" : _this.names.amd && _this.namedDefine === true ? "		define(" + libraryName(_this.names.amd) + ", [], " + amdFactory + ");\n" : "		define([], " + amdFactory + ");\n") + (_this.names.root || _this.names.commonjs ? getAuxilaryComment("commonjs") + "	else if(typeof exports === 'object')\n" + "		exports[" + libraryName(_this.names.commonjs || _this.names.root) + "] = factory(" + externalsRequireArray("commonjs") + ");\n" + getAuxilaryComment("root") + "	else\n" + "		" + replaceKeys(accessorAccess("root", _this.names.root || _this.names.commonjs)) + " = factory(" + externalsRootArray(externals) + ");\n" : "	else {\n" + (externals.length > 0 ? "		var a = typeof exports === 'object' ? factory(" + externalsRequireArray("commonjs") + ") : factory(" + externalsRootArray(externals) + ");\n" : "		var a = factory();\n") + "		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n" + "	}\n") + "})(".concat(runtimeTemplate.outputOptions.globalObject, ", function(").concat(externalsArguments(externals), ") {\nreturn "), "webpack/universalModuleDefinition"), source, ";\n})");
      };

      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {
        var template = _arr[_i];
        template.hooks.renderWithEntry.tap("UmdMainTemplatePlugin", onRenderWithEntry);
      }

      mainTemplate.hooks.globalHashPaths.tap("UmdMainTemplatePlugin", function (paths) {
        if (_this.names.root) paths = paths.concat(_this.names.root);
        if (_this.names.amd) paths = paths.concat(_this.names.amd);
        if (_this.names.commonjs) paths = paths.concat(_this.names.commonjs);
        return paths;
      });
      mainTemplate.hooks.hash.tap("UmdMainTemplatePlugin", function (hash) {
        hash.update("umd");
        hash.update("".concat(_this.names.root));
        hash.update("".concat(_this.names.amd));
        hash.update("".concat(_this.names.commonjs));
      });
    }
  }]);

  return UmdMainTemplatePlugin;
}();

module.exports = UmdMainTemplatePlugin;