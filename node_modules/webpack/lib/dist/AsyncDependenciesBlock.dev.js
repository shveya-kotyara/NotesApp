/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DependenciesBlock = require("./DependenciesBlock");
/** @typedef {import("./ChunkGroup")} ChunkGroup */

/** @typedef {import("./Module")} Module */

/** @typedef {import("./Dependency").DependencyLocation} DependencyLocation */

/** @typedef {import("./util/createHash").Hash} Hash */

/** @typedef {TODO} GroupOptions */


module.exports =
/*#__PURE__*/
function (_DependenciesBlock) {
  _inherits(AsyncDependenciesBlock, _DependenciesBlock);

  /**
   * @param {GroupOptions} groupOptions options for the group
   * @param {Module} module the Module object
   * @param {DependencyLocation=} loc the line of code
   * @param {TODO=} request the request
   */
  function AsyncDependenciesBlock(groupOptions, module, loc, request) {
    var _this;

    _classCallCheck(this, AsyncDependenciesBlock);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AsyncDependenciesBlock).call(this));

    if (typeof groupOptions === "string") {
      groupOptions = {
        name: groupOptions
      };
    } else if (!groupOptions) {
      groupOptions = {
        name: undefined
      };
    }

    _this.groupOptions = groupOptions;
    /** @type {ChunkGroup=} */

    _this.chunkGroup = undefined;
    _this.module = module;
    _this.loc = loc;
    _this.request = request;
    /** @type {DependenciesBlock} */

    _this.parent = undefined;
    return _this;
  }
  /**
   * @returns {string} The name of the chunk
   */


  _createClass(AsyncDependenciesBlock, [{
    key: "updateHash",

    /**
     * @param {Hash} hash the hash used to track block changes, from "crypto" module
     * @returns {void}
     */
    value: function updateHash(hash) {
      hash.update(JSON.stringify(this.groupOptions));
      hash.update(this.chunkGroup && this.chunkGroup.chunks.map(function (chunk) {
        return chunk.id !== null ? chunk.id : "";
      }).join(",") || "");

      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), "updateHash", this).call(this, hash);
    }
    /**
     * @returns {void}
     */

  }, {
    key: "disconnect",
    value: function disconnect() {
      this.chunkGroup = undefined;

      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), "disconnect", this).call(this);
    }
    /**
     * @returns {void}
     */

  }, {
    key: "unseal",
    value: function unseal() {
      this.chunkGroup = undefined;

      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), "unseal", this).call(this);
    }
    /**
     * @returns {void}
     */

  }, {
    key: "sortItems",
    value: function sortItems() {
      _get(_getPrototypeOf(AsyncDependenciesBlock.prototype), "sortItems", this).call(this);
    }
  }, {
    key: "chunkName",
    get: function get() {
      return this.groupOptions.name;
    }
    /**
     * @param {string} value The new chunk name
     * @returns {void}
     */
    ,
    set: function set(value) {
      this.groupOptions.name = value;
    }
    /**
     * @returns {never} this throws and should never be called
     */

  }, {
    key: "chunks",
    get: function get() {
      throw new Error("Moved to AsyncDependenciesBlock.chunkGroup");
    }
    /**
     * @param {never} value setter value
     * @returns {never} this is going to throw therefore we should throw type
     * assertions by returning never
     */
    ,
    set: function set(value) {
      throw new Error("Moved to AsyncDependenciesBlock.chunkGroup");
    }
  }]);

  return AsyncDependenciesBlock;
}(DependenciesBlock);