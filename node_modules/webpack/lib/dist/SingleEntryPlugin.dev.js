/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SingleEntryDependency = require("./dependencies/SingleEntryDependency");
/** @typedef {import("./Compiler")} Compiler */


var SingleEntryPlugin =
/*#__PURE__*/
function () {
  /**
   * An entry plugin which will handle
   * creation of the SingleEntryDependency
   *
   * @param {string} context context path
   * @param {string} entry entry path
   * @param {string} name entry key name
   */
  function SingleEntryPlugin(context, entry, name) {
    _classCallCheck(this, SingleEntryPlugin);

    this.context = context;
    this.entry = entry;
    this.name = name;
  }
  /**
   * @param {Compiler} compiler the compiler instance
   * @returns {void}
   */


  _createClass(SingleEntryPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("SingleEntryPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
      });
      compiler.hooks.make.tapAsync("SingleEntryPlugin", function (compilation, callback) {
        var entry = _this.entry,
            name = _this.name,
            context = _this.context;
        var dep = SingleEntryPlugin.createDependency(entry, name);
        compilation.addEntry(context, dep, name, callback);
      });
    }
    /**
     * @param {string} entry entry request
     * @param {string} name entry name
     * @returns {SingleEntryDependency} the dependency
     */

  }], [{
    key: "createDependency",
    value: function createDependency(entry, name) {
      var dep = new SingleEntryDependency(entry);
      dep.loc = {
        name: name
      };
      return dep;
    }
  }]);

  return SingleEntryPlugin;
}();

module.exports = SingleEntryPlugin;