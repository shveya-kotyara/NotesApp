/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Template = require("./Template");
/** @typedef {import("./Module")} Module */


module.exports =
/*#__PURE__*/
function () {
  function RuntimeTemplate(outputOptions, requestShortener) {
    _classCallCheck(this, RuntimeTemplate);

    this.outputOptions = outputOptions || {};
    this.requestShortener = requestShortener;
  }
  /**
   * Add a comment
   * @param {object} options Information content of the comment
   * @param {string=} options.request request string used originally
   * @param {string=} options.chunkName name of the chunk referenced
   * @param {string=} options.chunkReason reason information of the chunk
   * @param {string=} options.message additional message
   * @param {string=} options.exportName name of the export
   * @returns {string} comment
   */


  _createClass(RuntimeTemplate, [{
    key: "comment",
    value: function comment(_ref) {
      var _this = this;

      var request = _ref.request,
          chunkName = _ref.chunkName,
          chunkReason = _ref.chunkReason,
          message = _ref.message,
          exportName = _ref.exportName;
      var content;

      if (this.outputOptions.pathinfo) {
        content = [message, request, chunkName, chunkReason].filter(Boolean).map(function (item) {
          return _this.requestShortener.shorten(item);
        }).join(" | ");
      } else {
        content = [message, chunkName, chunkReason].filter(Boolean).map(function (item) {
          return _this.requestShortener.shorten(item);
        }).join(" | ");
      }

      if (!content) return "";

      if (this.outputOptions.pathinfo) {
        return Template.toComment(content) + " ";
      } else {
        return Template.toNormalComment(content) + " ";
      }
    }
  }, {
    key: "throwMissingModuleErrorFunction",
    value: function throwMissingModuleErrorFunction(_ref2) {
      var request = _ref2.request;
      var err = "Cannot find module '".concat(request, "'");
      return "function webpackMissingModule() { var e = new Error(".concat(JSON.stringify(err), "); e.code = 'MODULE_NOT_FOUND'; throw e; }");
    }
  }, {
    key: "missingModule",
    value: function missingModule(_ref3) {
      var request = _ref3.request;
      return "!(".concat(this.throwMissingModuleErrorFunction({
        request: request
      }), "())");
    }
  }, {
    key: "missingModuleStatement",
    value: function missingModuleStatement(_ref4) {
      var request = _ref4.request;
      return "".concat(this.missingModule({
        request: request
      }), ";\n");
    }
  }, {
    key: "missingModulePromise",
    value: function missingModulePromise(_ref5) {
      var request = _ref5.request;
      return "Promise.resolve().then(".concat(this.throwMissingModuleErrorFunction({
        request: request
      }), ")");
    }
  }, {
    key: "moduleId",
    value: function moduleId(_ref6) {
      var module = _ref6.module,
          request = _ref6.request;

      if (!module) {
        return this.missingModule({
          request: request
        });
      }

      if (module.id === null) {
        throw new Error("RuntimeTemplate.moduleId(): Module ".concat(module.identifier(), " has no id. This should not happen."));
      }

      return "".concat(this.comment({
        request: request
      })).concat(JSON.stringify(module.id));
    }
  }, {
    key: "moduleRaw",
    value: function moduleRaw(_ref7) {
      var module = _ref7.module,
          request = _ref7.request;

      if (!module) {
        return this.missingModule({
          request: request
        });
      }

      return "__webpack_require__(".concat(this.moduleId({
        module: module,
        request: request
      }), ")");
    }
  }, {
    key: "moduleExports",
    value: function moduleExports(_ref8) {
      var module = _ref8.module,
          request = _ref8.request;
      return this.moduleRaw({
        module: module,
        request: request
      });
    }
  }, {
    key: "moduleNamespace",
    value: function moduleNamespace(_ref9) {
      var module = _ref9.module,
          request = _ref9.request,
          strict = _ref9.strict;

      if (!module) {
        return this.missingModule({
          request: request
        });
      }

      var moduleId = this.moduleId({
        module: module,
        request: request
      });
      var exportsType = module.buildMeta && module.buildMeta.exportsType;

      if (exportsType === "namespace") {
        var rawModule = this.moduleRaw({
          module: module,
          request: request
        });
        return rawModule;
      } else if (exportsType === "named") {
        return "__webpack_require__.t(".concat(moduleId, ", 3)");
      } else if (strict) {
        return "__webpack_require__.t(".concat(moduleId, ", 1)");
      } else {
        return "__webpack_require__.t(".concat(moduleId, ", 7)");
      }
    }
  }, {
    key: "moduleNamespacePromise",
    value: function moduleNamespacePromise(_ref10) {
      var block = _ref10.block,
          module = _ref10.module,
          request = _ref10.request,
          message = _ref10.message,
          strict = _ref10.strict,
          weak = _ref10.weak;

      if (!module) {
        return this.missingModulePromise({
          request: request
        });
      }

      if (module.id === null) {
        throw new Error("RuntimeTemplate.moduleNamespacePromise(): Module ".concat(module.identifier(), " has no id. This should not happen."));
      }

      var promise = this.blockPromise({
        block: block,
        message: message
      });
      var getModuleFunction;
      var idExpr = JSON.stringify(module.id);
      var comment = this.comment({
        request: request
      });
      var header = "";

      if (weak) {
        if (idExpr.length > 8) {
          // 'var x="nnnnnn";x,"+x+",x' vs '"nnnnnn",nnnnnn,"nnnnnn"'
          header += "var id = ".concat(idExpr, "; ");
          idExpr = "id";
        }

        header += "if(!__webpack_require__.m[".concat(idExpr, "]) { var e = new Error(\"Module '\" + ").concat(idExpr, " + \"' is not available (weak dependency)\"); e.code = 'MODULE_NOT_FOUND'; throw e; } ");
      }

      var moduleId = this.moduleId({
        module: module,
        request: request
      });
      var exportsType = module.buildMeta && module.buildMeta.exportsType;

      if (exportsType === "namespace") {
        if (header) {
          var rawModule = this.moduleRaw({
            module: module,
            request: request
          });
          getModuleFunction = "function() { ".concat(header, "return ").concat(rawModule, "; }");
        } else {
          getModuleFunction = "__webpack_require__.bind(null, ".concat(comment).concat(idExpr, ")");
        }
      } else if (exportsType === "named") {
        if (header) {
          getModuleFunction = "function() { ".concat(header, "return __webpack_require__.t(").concat(moduleId, ", 3); }");
        } else {
          getModuleFunction = "__webpack_require__.t.bind(null, ".concat(comment).concat(idExpr, ", 3)");
        }
      } else if (strict) {
        if (header) {
          getModuleFunction = "function() { ".concat(header, "return __webpack_require__.t(").concat(moduleId, ", 1); }");
        } else {
          getModuleFunction = "__webpack_require__.t.bind(null, ".concat(comment).concat(idExpr, ", 1)");
        }
      } else {
        if (header) {
          getModuleFunction = "function() { ".concat(header, "return __webpack_require__.t(").concat(moduleId, ", 7); }");
        } else {
          getModuleFunction = "__webpack_require__.t.bind(null, ".concat(comment).concat(idExpr, ", 7)");
        }
      }

      return "".concat(promise || "Promise.resolve()", ".then(").concat(getModuleFunction, ")");
    }
    /**
     *
     * @param {Object} options options object
     * @param {boolean=} options.update whether a new variable should be created or the existing one updated
     * @param {Module} options.module the module
     * @param {string} options.request the request that should be printed as comment
     * @param {string} options.importVar name of the import variable
     * @param {Module} options.originModule module in which the statement is emitted
     * @returns {string} the import statement
     */

  }, {
    key: "importStatement",
    value: function importStatement(_ref11) {
      var update = _ref11.update,
          module = _ref11.module,
          request = _ref11.request,
          importVar = _ref11.importVar,
          originModule = _ref11.originModule;

      if (!module) {
        return this.missingModuleStatement({
          request: request
        });
      }

      var moduleId = this.moduleId({
        module: module,
        request: request
      });
      var optDeclaration = update ? "" : "var ";
      var exportsType = module.buildMeta && module.buildMeta.exportsType;
      var content = "/* harmony import */ ".concat(optDeclaration).concat(importVar, " = __webpack_require__(").concat(moduleId, ");\n");

      if (!exportsType && !originModule.buildMeta.strictHarmonyModule) {
        content += "/* harmony import */ ".concat(optDeclaration).concat(importVar, "_default = /*#__PURE__*/__webpack_require__.n(").concat(importVar, ");\n");
      }

      if (exportsType === "named") {
        if (Array.isArray(module.buildMeta.providedExports)) {
          content += "".concat(optDeclaration).concat(importVar, "_namespace = /*#__PURE__*/__webpack_require__.t(").concat(moduleId, ", 1);\n");
        } else {
          content += "".concat(optDeclaration).concat(importVar, "_namespace = /*#__PURE__*/__webpack_require__.t(").concat(moduleId, ");\n");
        }
      }

      return content;
    }
  }, {
    key: "exportFromImport",
    value: function exportFromImport(_ref12) {
      var module = _ref12.module,
          request = _ref12.request,
          exportName = _ref12.exportName,
          originModule = _ref12.originModule,
          asiSafe = _ref12.asiSafe,
          isCall = _ref12.isCall,
          callContext = _ref12.callContext,
          importVar = _ref12.importVar;

      if (!module) {
        return this.missingModule({
          request: request
        });
      }

      var exportsType = module.buildMeta && module.buildMeta.exportsType;

      if (!exportsType) {
        if (exportName === "default") {
          if (!originModule.buildMeta.strictHarmonyModule) {
            if (isCall) {
              return "".concat(importVar, "_default()");
            } else if (asiSafe) {
              return "(".concat(importVar, "_default())");
            } else {
              return "".concat(importVar, "_default.a");
            }
          } else {
            return importVar;
          }
        } else if (originModule.buildMeta.strictHarmonyModule) {
          if (exportName) {
            return "/* non-default import from non-esm module */undefined";
          } else {
            return "/*#__PURE__*/__webpack_require__.t(".concat(importVar, ")");
          }
        }
      }

      if (exportsType === "named") {
        if (exportName === "default") {
          return importVar;
        } else if (!exportName) {
          return "".concat(importVar, "_namespace");
        }
      }

      if (exportName) {
        var used = module.isUsed(exportName);

        if (!used) {
          var _comment = Template.toNormalComment("unused export ".concat(exportName));

          return "".concat(_comment, " undefined");
        }

        var comment = used !== exportName ? Template.toNormalComment(exportName) + " " : "";
        var access = "".concat(importVar, "[").concat(comment).concat(JSON.stringify(used), "]");

        if (isCall) {
          if (callContext === false && asiSafe) {
            return "(0,".concat(access, ")");
          } else if (callContext === false) {
            return "Object(".concat(access, ")");
          }
        }

        return access;
      } else {
        return importVar;
      }
    }
  }, {
    key: "blockPromise",
    value: function blockPromise(_ref13) {
      var block = _ref13.block,
          message = _ref13.message;

      if (!block || !block.chunkGroup || block.chunkGroup.chunks.length === 0) {
        var _comment2 = this.comment({
          message: message
        });

        return "Promise.resolve(".concat(_comment2.trim(), ")");
      }

      var chunks = block.chunkGroup.chunks.filter(function (chunk) {
        return !chunk.hasRuntime() && chunk.id !== null;
      });
      var comment = this.comment({
        message: message,
        chunkName: block.chunkName,
        chunkReason: block.chunkReason
      });

      if (chunks.length === 1) {
        var chunkId = JSON.stringify(chunks[0].id);
        return "__webpack_require__.e(".concat(comment).concat(chunkId, ")");
      } else if (chunks.length > 0) {
        var requireChunkId = function requireChunkId(chunk) {
          return "__webpack_require__.e(".concat(JSON.stringify(chunk.id), ")");
        };

        return "Promise.all(".concat(comment.trim(), "[").concat(chunks.map(requireChunkId).join(", "), "])");
      } else {
        return "Promise.resolve(".concat(comment.trim(), ")");
      }
    }
  }, {
    key: "onError",
    value: function onError() {
      return "__webpack_require__.oe";
    }
  }, {
    key: "defineEsModuleFlagStatement",
    value: function defineEsModuleFlagStatement(_ref14) {
      var exportsArgument = _ref14.exportsArgument;
      return "__webpack_require__.r(".concat(exportsArgument, ");\n");
    }
  }]);

  return RuntimeTemplate;
}();