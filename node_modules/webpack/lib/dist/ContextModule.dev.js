/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var util = require("util");

var _require = require("webpack-sources"),
    OriginalSource = _require.OriginalSource,
    RawSource = _require.RawSource;

var Module = require("./Module");

var AsyncDependenciesBlock = require("./AsyncDependenciesBlock");

var Template = require("./Template");

var contextify = require("./util/identifier").contextify;
/** @typedef {"sync" | "eager" | "weak" | "async-weak" | "lazy" | "lazy-once"} ContextMode Context mode */

/** @typedef {import("./dependencies/ContextElementDependency")} ContextElementDependency */

/**
 * @callback ResolveDependenciesCallback
 * @param {Error=} err
 * @param {ContextElementDependency[]} dependencies
 */

/**
 * @callback ResolveDependencies
 * @param {TODO} fs
 * @param {TODO} options
 * @param {ResolveDependenciesCallback} callback
 */


var ContextModule =
/*#__PURE__*/
function (_Module) {
  _inherits(ContextModule, _Module);

  // type ContextMode = "sync" | "eager" | "weak" | "async-weak" | "lazy" | "lazy-once"
  // type ContextOptions = { resource: string, recursive: boolean, regExp: RegExp, addon?: string, mode?: ContextMode, chunkName?: string, include?: RegExp, exclude?: RegExp, groupOptions?: Object }
  // resolveDependencies: (fs: FS, options: ContextOptions, (err: Error?, dependencies: Dependency[]) => void) => void
  // options: ContextOptions

  /**
   * @param {ResolveDependencies} resolveDependencies function to get dependencies in this context
   * @param {TODO} options options object
   */
  function ContextModule(resolveDependencies, options) {
    var _this;

    _classCallCheck(this, ContextModule);

    var resource;
    var resourceQuery;
    var queryIdx = options.resource.indexOf("?");

    if (queryIdx >= 0) {
      resource = options.resource.substr(0, queryIdx);
      resourceQuery = options.resource.substr(queryIdx);
    } else {
      resource = options.resource;
      resourceQuery = "";
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContextModule).call(this, "javascript/dynamic", resource)); // Info from Factory

    _this.resolveDependencies = resolveDependencies;
    _this.options = Object.assign({}, options, {
      resource: resource,
      resourceQuery: resourceQuery
    });

    if (options.resolveOptions !== undefined) {
      _this.resolveOptions = options.resolveOptions;
    } // Info from Build


    _this._contextDependencies = new Set([_this.context]);

    if (typeof options.mode !== "string") {
      throw new Error("options.mode is a required option");
    }

    _this._identifier = _this._createIdentifier();
    return _this;
  }

  _createClass(ContextModule, [{
    key: "updateCacheModule",
    value: function updateCacheModule(module) {
      this.resolveDependencies = module.resolveDependencies;
      this.options = module.options;
      this.resolveOptions = module.resolveOptions;
    }
  }, {
    key: "prettyRegExp",
    value: function prettyRegExp(regexString) {
      // remove the "/" at the front and the beginning
      // "/foo/" -> "foo"
      return regexString.substring(1, regexString.length - 1);
    }
  }, {
    key: "_createIdentifier",
    value: function _createIdentifier() {
      var identifier = this.context;

      if (this.options.resourceQuery) {
        identifier += " ".concat(this.options.resourceQuery);
      }

      if (this.options.mode) {
        identifier += " ".concat(this.options.mode);
      }

      if (!this.options.recursive) {
        identifier += " nonrecursive";
      }

      if (this.options.addon) {
        identifier += " ".concat(this.options.addon);
      }

      if (this.options.regExp) {
        identifier += " ".concat(this.options.regExp);
      }

      if (this.options.include) {
        identifier += " include: ".concat(this.options.include);
      }

      if (this.options.exclude) {
        identifier += " exclude: ".concat(this.options.exclude);
      }

      if (this.options.groupOptions) {
        identifier += " groupOptions: ".concat(JSON.stringify(this.options.groupOptions));
      }

      if (this.options.namespaceObject === "strict") {
        identifier += " strict namespace object";
      } else if (this.options.namespaceObject) {
        identifier += " namespace object";
      }

      return identifier;
    }
  }, {
    key: "identifier",
    value: function identifier() {
      return this._identifier;
    }
  }, {
    key: "readableIdentifier",
    value: function readableIdentifier(requestShortener) {
      var identifier = requestShortener.shorten(this.context);

      if (this.options.resourceQuery) {
        identifier += " ".concat(this.options.resourceQuery);
      }

      if (this.options.mode) {
        identifier += " ".concat(this.options.mode);
      }

      if (!this.options.recursive) {
        identifier += " nonrecursive";
      }

      if (this.options.addon) {
        identifier += " ".concat(requestShortener.shorten(this.options.addon));
      }

      if (this.options.regExp) {
        identifier += " ".concat(this.prettyRegExp(this.options.regExp + ""));
      }

      if (this.options.include) {
        identifier += " include: ".concat(this.prettyRegExp(this.options.include + ""));
      }

      if (this.options.exclude) {
        identifier += " exclude: ".concat(this.prettyRegExp(this.options.exclude + ""));
      }

      if (this.options.groupOptions) {
        var groupOptions = this.options.groupOptions;

        for (var _i = 0, _Object$keys = Object.keys(groupOptions); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          identifier += " ".concat(key, ": ").concat(groupOptions[key]);
        }
      }

      if (this.options.namespaceObject === "strict") {
        identifier += " strict namespace object";
      } else if (this.options.namespaceObject) {
        identifier += " namespace object";
      }

      return identifier;
    }
  }, {
    key: "libIdent",
    value: function libIdent(options) {
      var identifier = contextify(options.context, this.context);

      if (this.options.mode) {
        identifier += " ".concat(this.options.mode);
      }

      if (this.options.recursive) {
        identifier += " recursive";
      }

      if (this.options.addon) {
        identifier += " ".concat(contextify(options.context, this.options.addon));
      }

      if (this.options.regExp) {
        identifier += " ".concat(this.prettyRegExp(this.options.regExp + ""));
      }

      if (this.options.include) {
        identifier += " include: ".concat(this.prettyRegExp(this.options.include + ""));
      }

      if (this.options.exclude) {
        identifier += " exclude: ".concat(this.prettyRegExp(this.options.exclude + ""));
      }

      return identifier;
    }
  }, {
    key: "needRebuild",
    value: function needRebuild(fileTimestamps, contextTimestamps) {
      var ts = contextTimestamps.get(this.context);

      if (!ts) {
        return true;
      }

      return ts >= this.buildInfo.builtTime;
    }
  }, {
    key: "build",
    value: function build(options, compilation, resolver, fs, callback) {
      var _this2 = this;

      this.built = true;
      this.buildMeta = {};
      this.buildInfo = {
        builtTime: Date.now(),
        contextDependencies: this._contextDependencies
      };
      this.resolveDependencies(fs, this.options, function (err, dependencies) {
        if (err) return callback(err); // abort if something failed
        // this will create an empty context

        if (!dependencies) {
          callback();
          return;
        } // enhance dependencies with meta info


        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _dep3 = _step.value;
            _dep3.loc = {
              name: _dep3.userRequest
            };
            _dep3.request = _this2.options.addon + _dep3.request;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (_this2.options.mode === "sync" || _this2.options.mode === "eager") {
          // if we have an sync or eager context
          // just add all dependencies and continue
          _this2.dependencies = dependencies;
        } else if (_this2.options.mode === "lazy-once") {
          // for the lazy-once mode create a new async dependency block
          // and add that block to this context
          if (dependencies.length > 0) {
            var block = new AsyncDependenciesBlock(Object.assign({}, _this2.options.groupOptions, {
              name: _this2.options.chunkName
            }), _this2);
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = dependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var dep = _step2.value;
                block.addDependency(dep);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            _this2.addBlock(block);
          }
        } else if (_this2.options.mode === "weak" || _this2.options.mode === "async-weak") {
          // we mark all dependencies as weak
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = dependencies[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var _dep = _step3.value;
              _dep.weak = true;
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          _this2.dependencies = dependencies;
        } else if (_this2.options.mode === "lazy") {
          // if we are lazy create a new async dependency block per dependency
          // and add all blocks to this context
          var index = 0;
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = dependencies[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var _dep2 = _step4.value;
              var chunkName = _this2.options.chunkName;

              if (chunkName) {
                if (!/\[(index|request)\]/.test(chunkName)) {
                  chunkName += "[index]";
                }

                chunkName = chunkName.replace(/\[index\]/g, index++);
                chunkName = chunkName.replace(/\[request\]/g, Template.toPath(_dep2.userRequest));
              }

              var _block = new AsyncDependenciesBlock(Object.assign({}, _this2.options.groupOptions, {
                name: chunkName
              }), _dep2.module, _dep2.loc, _dep2.userRequest);

              _block.addDependency(_dep2);

              _this2.addBlock(_block);
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
        } else {
          callback(new Error("Unsupported mode \"".concat(_this2.options.mode, "\" in context")));
          return;
        }

        callback();
      });
    }
  }, {
    key: "getUserRequestMap",
    value: function getUserRequestMap(dependencies) {
      // if we filter first we get a new array
      // therefor we dont need to create a clone of dependencies explicitly
      // therefore the order of this is !important!
      return dependencies.filter(function (dependency) {
        return dependency.module;
      }).sort(function (a, b) {
        if (a.userRequest === b.userRequest) {
          return 0;
        }

        return a.userRequest < b.userRequest ? -1 : 1;
      }).reduce(function (map, dep) {
        map[dep.userRequest] = dep.module.id;
        return map;
      }, Object.create(null));
    }
  }, {
    key: "getFakeMap",
    value: function getFakeMap(dependencies) {
      var _this3 = this;

      if (!this.options.namespaceObject) {
        return 9;
      } // if we filter first we get a new array
      // therefor we dont need to create a clone of dependencies explicitly
      // therefore the order of this is !important!


      var hasNonHarmony = false;
      var hasNamespace = false;
      var hasNamed = false;
      var fakeMap = dependencies.filter(function (dependency) {
        return dependency.module;
      }).sort(function (a, b) {
        return b.module.id - a.module.id;
      }).reduce(function (map, dep) {
        var exportsType = dep.module.buildMeta && dep.module.buildMeta.exportsType;
        var id = dep.module.id;

        if (!exportsType) {
          map[id] = _this3.options.namespaceObject === "strict" ? 1 : 7;
          hasNonHarmony = true;
        } else if (exportsType === "namespace") {
          map[id] = 9;
          hasNamespace = true;
        } else if (exportsType === "named") {
          map[id] = 3;
          hasNamed = true;
        }

        return map;
      }, Object.create(null));

      if (!hasNamespace && hasNonHarmony && !hasNamed) {
        return this.options.namespaceObject === "strict" ? 1 : 7;
      }

      if (hasNamespace && !hasNonHarmony && !hasNamed) {
        return 9;
      }

      if (!hasNamespace && !hasNonHarmony && hasNamed) {
        return 3;
      }

      if (!hasNamespace && !hasNonHarmony && !hasNamed) {
        return 9;
      }

      return fakeMap;
    }
  }, {
    key: "getFakeMapInitStatement",
    value: function getFakeMapInitStatement(fakeMap) {
      return _typeof(fakeMap) === "object" ? "var fakeMap = ".concat(JSON.stringify(fakeMap, null, "\t"), ";") : "";
    }
  }, {
    key: "getReturn",
    value: function getReturn(type) {
      if (type === 9) {
        return "__webpack_require__(id)";
      }

      return "__webpack_require__.t(id, ".concat(type, ")");
    }
  }, {
    key: "getReturnModuleObjectSource",
    value: function getReturnModuleObjectSource(fakeMap) {
      var fakeMapDataExpression = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "fakeMap[id]";

      if (typeof fakeMap === "number") {
        return "return ".concat(this.getReturn(fakeMap), ";");
      }

      return "return __webpack_require__.t(id, ".concat(fakeMapDataExpression, ")");
    }
  }, {
    key: "getSyncSource",
    value: function getSyncSource(dependencies, id) {
      var map = this.getUserRequestMap(dependencies);
      var fakeMap = this.getFakeMap(dependencies);
      var returnModuleObject = this.getReturnModuleObjectSource(fakeMap);
      return "var map = ".concat(JSON.stringify(map, null, "\t"), ";\n").concat(this.getFakeMapInitStatement(fakeMap), "\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\t").concat(returnModuleObject, "\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = ").concat(JSON.stringify(id), ";");
    }
  }, {
    key: "getWeakSyncSource",
    value: function getWeakSyncSource(dependencies, id) {
      var map = this.getUserRequestMap(dependencies);
      var fakeMap = this.getFakeMap(dependencies);
      var returnModuleObject = this.getReturnModuleObjectSource(fakeMap);
      return "var map = ".concat(JSON.stringify(map, null, "\t"), ";\n").concat(this.getFakeMapInitStatement(fakeMap), "\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\tif(!__webpack_require__.m[id]) {\n\t\tvar e = new Error(\"Module '\" + req + \"' ('\" + id + \"') is not available (weak dependency)\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\t").concat(returnModuleObject, "\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nwebpackContext.id = ").concat(JSON.stringify(id), ";\nmodule.exports = webpackContext;");
    }
  }, {
    key: "getAsyncWeakSource",
    value: function getAsyncWeakSource(dependencies, id) {
      var map = this.getUserRequestMap(dependencies);
      var fakeMap = this.getFakeMap(dependencies);
      var returnModuleObject = this.getReturnModuleObjectSource(fakeMap);
      return "var map = ".concat(JSON.stringify(map, null, "\t"), ";\n").concat(this.getFakeMapInitStatement(fakeMap), "\n\nfunction webpackAsyncContext(req) {\n\treturn webpackAsyncContextResolve(req).then(function(id) {\n\t\tif(!__webpack_require__.m[id]) {\n\t\t\tvar e = new Error(\"Module '\" + req + \"' ('\" + id + \"') is not available (weak dependency)\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\t\t").concat(returnModuleObject, "\n\t});\n}\nfunction webpackAsyncContextResolve(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\t\treturn map[req];\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.resolve = webpackAsyncContextResolve;\nwebpackAsyncContext.id = ").concat(JSON.stringify(id), ";\nmodule.exports = webpackAsyncContext;");
    }
  }, {
    key: "getEagerSource",
    value: function getEagerSource(dependencies, id) {
      var map = this.getUserRequestMap(dependencies);
      var fakeMap = this.getFakeMap(dependencies);
      var thenFunction = fakeMap !== 9 ? "function(id) {\n\t\t".concat(this.getReturnModuleObjectSource(fakeMap), "\n\t}") : "__webpack_require__";
      return "var map = ".concat(JSON.stringify(map, null, "\t"), ";\n").concat(this.getFakeMapInitStatement(fakeMap), "\n\nfunction webpackAsyncContext(req) {\n\treturn webpackAsyncContextResolve(req).then(").concat(thenFunction, ");\n}\nfunction webpackAsyncContextResolve(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\t\treturn map[req];\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.resolve = webpackAsyncContextResolve;\nwebpackAsyncContext.id = ").concat(JSON.stringify(id), ";\nmodule.exports = webpackAsyncContext;");
    }
  }, {
    key: "getLazyOnceSource",
    value: function getLazyOnceSource(block, dependencies, id, runtimeTemplate) {
      var promise = runtimeTemplate.blockPromise({
        block: block,
        message: "lazy-once context"
      });
      var map = this.getUserRequestMap(dependencies);
      var fakeMap = this.getFakeMap(dependencies);
      var thenFunction = fakeMap !== 9 ? "function(id) {\n\t\t".concat(this.getReturnModuleObjectSource(fakeMap), ";\n\t}") : "__webpack_require__";
      return "var map = ".concat(JSON.stringify(map, null, "\t"), ";\n").concat(this.getFakeMapInitStatement(fakeMap), "\n\nfunction webpackAsyncContext(req) {\n\treturn webpackAsyncContextResolve(req).then(").concat(thenFunction, ");\n}\nfunction webpackAsyncContextResolve(req) {\n\treturn ").concat(promise, ".then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\t\treturn map[req];\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.resolve = webpackAsyncContextResolve;\nwebpackAsyncContext.id = ").concat(JSON.stringify(id), ";\nmodule.exports = webpackAsyncContext;");
    }
  }, {
    key: "getLazySource",
    value: function getLazySource(blocks, id) {
      var hasMultipleOrNoChunks = false;
      var hasNoChunk = true;
      var fakeMap = this.getFakeMap(blocks.map(function (b) {
        return b.dependencies[0];
      }));
      var hasFakeMap = _typeof(fakeMap) === "object";
      var map = blocks.filter(function (block) {
        return block.dependencies[0].module;
      }).map(function (block) {
        var chunks = block.chunkGroup ? block.chunkGroup.chunks : [];

        if (chunks.length > 0) {
          hasNoChunk = false;
        }

        if (chunks.length !== 1) {
          hasMultipleOrNoChunks = true;
        }

        return {
          dependency: block.dependencies[0],
          block: block,
          userRequest: block.dependencies[0].userRequest,
          chunks: chunks
        };
      }).sort(function (a, b) {
        if (a.userRequest === b.userRequest) return 0;
        return a.userRequest < b.userRequest ? -1 : 1;
      }).reduce(function (map, item) {
        var chunks = item.chunks;

        if (hasNoChunk && !hasFakeMap) {
          map[item.userRequest] = item.dependency.module.id;
        } else {
          var arrayStart = [item.dependency.module.id];

          if (_typeof(fakeMap) === "object") {
            arrayStart.push(fakeMap[item.dependency.module.id]);
          }

          map[item.userRequest] = arrayStart.concat(chunks.map(function (chunk) {
            return chunk.id;
          }));
        }

        return map;
      }, Object.create(null));
      var shortMode = hasNoChunk && !hasFakeMap;
      var chunksStartPosition = hasFakeMap ? 2 : 1;
      var requestPrefix = hasNoChunk ? "Promise.resolve()" : hasMultipleOrNoChunks ? "Promise.all(ids.slice(".concat(chunksStartPosition, ").map(__webpack_require__.e))") : "__webpack_require__.e(ids[".concat(chunksStartPosition, "])");
      var returnModuleObject = this.getReturnModuleObjectSource(fakeMap, shortMode ? "invalid" : "ids[1]");
      var webpackAsyncContext = requestPrefix === "Promise.resolve()" ? "".concat(shortMode ? "" : "", "\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\t").concat(shortMode ? "var id = map[req];" : "var ids = map[req], id = ids[0];", "\n\t\t").concat(returnModuleObject, "\n\t});\n}") : "function webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn ".concat(requestPrefix, ".then(function() {\n\t\t").concat(returnModuleObject, "\n\t});\n}");
      return "var map = ".concat(JSON.stringify(map, null, "\t"), ";\n").concat(webpackAsyncContext, "\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = ").concat(JSON.stringify(id), ";\nmodule.exports = webpackAsyncContext;");
    }
  }, {
    key: "getSourceForEmptyContext",
    value: function getSourceForEmptyContext(id) {
      return "function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = ".concat(JSON.stringify(id), ";");
    }
  }, {
    key: "getSourceForEmptyAsyncContext",
    value: function getSourceForEmptyAsyncContext(id) {
      return "function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = ".concat(JSON.stringify(id), ";");
    }
  }, {
    key: "getSourceString",
    value: function getSourceString(asyncMode, runtimeTemplate) {
      if (asyncMode === "lazy") {
        if (this.blocks && this.blocks.length > 0) {
          return this.getLazySource(this.blocks, this.id);
        }

        return this.getSourceForEmptyAsyncContext(this.id);
      }

      if (asyncMode === "eager") {
        if (this.dependencies && this.dependencies.length > 0) {
          return this.getEagerSource(this.dependencies, this.id);
        }

        return this.getSourceForEmptyAsyncContext(this.id);
      }

      if (asyncMode === "lazy-once") {
        var block = this.blocks[0];

        if (block) {
          return this.getLazyOnceSource(block, block.dependencies, this.id, runtimeTemplate);
        }

        return this.getSourceForEmptyAsyncContext(this.id);
      }

      if (asyncMode === "async-weak") {
        if (this.dependencies && this.dependencies.length > 0) {
          return this.getAsyncWeakSource(this.dependencies, this.id);
        }

        return this.getSourceForEmptyAsyncContext(this.id);
      }

      if (asyncMode === "weak") {
        if (this.dependencies && this.dependencies.length > 0) {
          return this.getWeakSyncSource(this.dependencies, this.id);
        }
      }

      if (this.dependencies && this.dependencies.length > 0) {
        return this.getSyncSource(this.dependencies, this.id);
      }

      return this.getSourceForEmptyContext(this.id);
    }
  }, {
    key: "getSource",
    value: function getSource(sourceString) {
      if (this.useSourceMap) {
        return new OriginalSource(sourceString, this.identifier());
      }

      return new RawSource(sourceString);
    }
  }, {
    key: "source",
    value: function source(dependencyTemplates, runtimeTemplate) {
      return this.getSource(this.getSourceString(this.options.mode, runtimeTemplate));
    }
  }, {
    key: "size",
    value: function size() {
      // base penalty
      var initialSize = 160; // if we dont have dependencies we stop here.

      return this.dependencies.reduce(function (size, dependency) {
        var element =
        /** @type {ContextElementDependency} */
        dependency;
        return size + 5 + element.userRequest.length;
      }, initialSize);
    }
  }]);

  return ContextModule;
}(Module); // TODO remove in webpack 5


Object.defineProperty(ContextModule.prototype, "recursive", {
  configurable: false,
  get: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @returns {boolean} is recursive
   */
  function () {
    return this.options.recursive;
  }, "ContextModule.recursive has been moved to ContextModule.options.recursive"),
  set: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @param {boolean} value is recursive
   * @returns {void}
   */
  function (value) {
    this.options.recursive = value;
  }, "ContextModule.recursive has been moved to ContextModule.options.recursive")
}); // TODO remove in webpack 5

Object.defineProperty(ContextModule.prototype, "regExp", {
  configurable: false,
  get: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @returns {RegExp} regular expression
   */
  function () {
    return this.options.regExp;
  }, "ContextModule.regExp has been moved to ContextModule.options.regExp"),
  set: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @param {RegExp} value Regular expression
   * @returns {void}
   */
  function (value) {
    this.options.regExp = value;
  }, "ContextModule.regExp has been moved to ContextModule.options.regExp")
}); // TODO remove in webpack 5

Object.defineProperty(ContextModule.prototype, "addon", {
  configurable: false,
  get: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @returns {string} addon
   */
  function () {
    return this.options.addon;
  }, "ContextModule.addon has been moved to ContextModule.options.addon"),
  set: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @param {string} value addon
   * @returns {void}
   */
  function (value) {
    this.options.addon = value;
  }, "ContextModule.addon has been moved to ContextModule.options.addon")
}); // TODO remove in webpack 5

Object.defineProperty(ContextModule.prototype, "async", {
  configurable: false,
  get: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @returns {boolean} is async
   */
  function () {
    return this.options.mode;
  }, "ContextModule.async has been moved to ContextModule.options.mode"),
  set: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @param {ContextMode} value Context mode
   * @returns {void}
   */
  function (value) {
    this.options.mode = value;
  }, "ContextModule.async has been moved to ContextModule.options.mode")
}); // TODO remove in webpack 5

Object.defineProperty(ContextModule.prototype, "chunkName", {
  configurable: false,
  get: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @returns {string} chunk name
   */
  function () {
    return this.options.chunkName;
  }, "ContextModule.chunkName has been moved to ContextModule.options.chunkName"),
  set: util.deprecate(
  /**
   * @deprecated
   * @this {ContextModule}
   * @param {string} value chunk name
   * @returns {void}
   */
  function (value) {
    this.options.chunkName = value;
  }, "ContextModule.chunkName has been moved to ContextModule.options.chunkName")
});
module.exports = ContextModule;