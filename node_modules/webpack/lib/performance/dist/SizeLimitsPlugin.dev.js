/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Sean Larkin @thelarkinn
*/
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EntrypointsOverSizeLimitWarning = require("./EntrypointsOverSizeLimitWarning");

var AssetsOverSizeLimitWarning = require("./AssetsOverSizeLimitWarning");

var NoAsyncChunksWarning = require("./NoAsyncChunksWarning");
/** @typedef {import("../Compiler")} Compiler */

/** @typedef {import("../Entrypoint")} Entrypoint */


module.exports =
/*#__PURE__*/
function () {
  function SizeLimitsPlugin(options) {
    _classCallCheck(this, SizeLimitsPlugin);

    this.hints = options.hints;
    this.maxAssetSize = options.maxAssetSize;
    this.maxEntrypointSize = options.maxEntrypointSize;
    this.assetFilter = options.assetFilter;
  }
  /**
   * @param {Compiler} compiler webpack compiler
   * @returns {void}
   */


  _createClass(SizeLimitsPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var entrypointSizeLimit = this.maxEntrypointSize;
      var assetSizeLimit = this.maxAssetSize;
      var hints = this.hints;

      var assetFilter = this.assetFilter || function (name, source, info) {
        return !info.development;
      };

      compiler.hooks.afterEmit.tap("SizeLimitsPlugin", function (compilation) {
        var warnings = [];
        /**
         * @param {Entrypoint} entrypoint an entrypoint
         * @returns {number} the size of the entrypoint
         */

        var getEntrypointSize = function getEntrypointSize(entrypoint) {
          return entrypoint.getFiles().reduce(function (currentSize, file) {
            var asset = compilation.getAsset(file);

            if (asset && assetFilter(asset.name, asset.source, asset.info) && asset.source) {
              return currentSize + (asset.info.size || asset.source.size());
            }

            return currentSize;
          }, 0);
        };

        var assetsOverSizeLimit = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = compilation.getAssets()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _step.value,
                name = _step$value.name,
                source = _step$value.source,
                info = _step$value.info;

            if (!assetFilter(name, source, info) || !source) {
              continue;
            }

            var size = info.size || source.size();

            if (size > assetSizeLimit) {
              assetsOverSizeLimit.push({
                name: name,
                size: size
              });
              /** @type {any} */

              source.isOverSizeLimit = true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var fileFilter = function fileFilter(name) {
          var asset = compilation.getAsset(name);
          return asset && assetFilter(asset.name, asset.source, asset.info);
        };

        var entrypointsOverLimit = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = compilation.entrypoints[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = _slicedToArray(_step2.value, 2),
                _name = _step2$value[0],
                entry = _step2$value[1];

            var _size = getEntrypointSize(entry);

            if (_size > entrypointSizeLimit) {
              entrypointsOverLimit.push({
                name: _name,
                size: _size,
                files: entry.getFiles().filter(fileFilter)
              });
              /** @type {any} */

              entry.isOverSizeLimit = true;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (hints) {
          // 1. Individual Chunk: Size < 250kb
          // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb
          // 3. No Async Chunks
          // if !1, then 2, if !2 return
          if (assetsOverSizeLimit.length > 0) {
            warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));
          }

          if (entrypointsOverLimit.length > 0) {
            warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));
          }

          if (warnings.length > 0) {
            var hasAsyncChunks = compilation.chunks.filter(function (chunk) {
              return !chunk.canBeInitial();
            }).length > 0;

            if (!hasAsyncChunks) {
              warnings.push(new NoAsyncChunksWarning());
            }

            if (hints === "error") {
              var _compilation$errors;

              (_compilation$errors = compilation.errors).push.apply(_compilation$errors, warnings);
            } else {
              var _compilation$warnings;

              (_compilation$warnings = compilation.warnings).push.apply(_compilation$warnings, warnings);
            }
          }
        }
      });
    }
  }]);

  return SizeLimitsPlugin;
}();