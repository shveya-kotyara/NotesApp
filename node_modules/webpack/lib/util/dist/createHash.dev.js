/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AbstractMethodError = require("../AbstractMethodError");

var BULK_SIZE = 1000;

var Hash =
/*#__PURE__*/
function () {
  function Hash() {
    _classCallCheck(this, Hash);
  }

  _createClass(Hash, [{
    key: "update",

    /**
     * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}
     * @param {string|Buffer} data data
     * @param {string=} inputEncoding data encoding
     * @returns {this} updated hash
     */
    value: function update(data, inputEncoding) {
      throw new AbstractMethodError();
    }
    /**
     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}
     * @param {string=} encoding encoding of the return value
     * @returns {string|Buffer} digest
     */

  }, {
    key: "digest",
    value: function digest(encoding) {
      throw new AbstractMethodError();
    }
  }]);

  return Hash;
}();

exports.Hash = Hash;
/** @typedef {typeof Hash} HashConstructor */

var BulkUpdateDecorator =
/*#__PURE__*/
function (_Hash) {
  _inherits(BulkUpdateDecorator, _Hash);

  /**
   * @param {Hash} hash hash
   */
  function BulkUpdateDecorator(hash) {
    var _this;

    _classCallCheck(this, BulkUpdateDecorator);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BulkUpdateDecorator).call(this));
    _this.hash = hash;
    _this.buffer = "";
    return _this;
  }
  /**
   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}
   * @param {string|Buffer} data data
   * @param {string=} inputEncoding data encoding
   * @returns {this} updated hash
   */


  _createClass(BulkUpdateDecorator, [{
    key: "update",
    value: function update(data, inputEncoding) {
      if (inputEncoding !== undefined || typeof data !== "string" || data.length > BULK_SIZE) {
        if (this.buffer.length > 0) {
          this.hash.update(this.buffer);
          this.buffer = "";
        }

        this.hash.update(data, inputEncoding);
      } else {
        this.buffer += data;

        if (this.buffer.length > BULK_SIZE) {
          this.hash.update(this.buffer);
          this.buffer = "";
        }
      }

      return this;
    }
    /**
     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}
     * @param {string=} encoding encoding of the return value
     * @returns {string|Buffer} digest
     */

  }, {
    key: "digest",
    value: function digest(encoding) {
      if (this.buffer.length > 0) {
        this.hash.update(this.buffer);
      }

      var digestResult = this.hash.digest(encoding);
      return typeof digestResult === "string" ? digestResult : digestResult.toString();
    }
  }]);

  return BulkUpdateDecorator;
}(Hash);
/**
 * istanbul ignore next
 */


var DebugHash =
/*#__PURE__*/
function (_Hash2) {
  _inherits(DebugHash, _Hash2);

  function DebugHash() {
    var _this2;

    _classCallCheck(this, DebugHash);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DebugHash).call(this));
    _this2.string = "";
    return _this2;
  }
  /**
   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}
   * @param {string|Buffer} data data
   * @param {string=} inputEncoding data encoding
   * @returns {this} updated hash
   */


  _createClass(DebugHash, [{
    key: "update",
    value: function update(data, inputEncoding) {
      if (typeof data !== "string") data = data.toString("utf-8");
      this.string += data;
      return this;
    }
    /**
     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}
     * @param {string=} encoding encoding of the return value
     * @returns {string|Buffer} digest
     */

  }, {
    key: "digest",
    value: function digest(encoding) {
      return this.string.replace(/[^a-z0-9]+/gi, function (m) {
        return Buffer.from(m).toString("hex");
      });
    }
  }]);

  return DebugHash;
}(Hash);
/**
 * Creates a hash by name or function
 * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash
 * @returns {Hash} the hash
 */


module.exports = function (algorithm) {
  if (typeof algorithm === "function") {
    return new BulkUpdateDecorator(new algorithm());
  }

  switch (algorithm) {
    // TODO add non-cryptographic algorithm here
    case "debug":
      return new DebugHash();

    default:
      return new BulkUpdateDecorator(require("crypto").createHash(algorithm));
  }
};