"use strict";
/**
 * A subset of Set that offers sorting functionality
 * @template T item type in set
 * @extends {Set<T>}
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SortableSet =
/*#__PURE__*/
function (_Set) {
  _inherits(SortableSet, _Set);

  /**
   * Create a new sortable set
   * @param {Iterable<T>=} initialIterable The initial iterable value
   * @typedef {function(T, T): number} SortFunction
   * @param {SortFunction=} defaultSort Default sorting function
   */
  function SortableSet(initialIterable, defaultSort) {
    var _this;

    _classCallCheck(this, SortableSet);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SortableSet).call(this, initialIterable));
    /** @private @type {function(T, T): number}} */

    _this._sortFn = defaultSort;
    /** @private @type {function(T, T): number} | null} */

    _this._lastActiveSortFn = null;
    /** @private @type {Map<Function, T[]> | undefined} */

    _this._cache = undefined;
    /** @private @type {Map<Function, T[]|string|number> | undefined} */

    _this._cacheOrderIndependent = undefined;
    return _this;
  }
  /**
   * @param {T} value value to add to set
   * @returns {this} returns itself
   */


  _createClass(SortableSet, [{
    key: "add",
    value: function add(value) {
      this._lastActiveSortFn = null;

      this._invalidateCache();

      this._invalidateOrderedCache();

      _get(_getPrototypeOf(SortableSet.prototype), "add", this).call(this, value);

      return this;
    }
    /**
     * @param {T} value value to delete
     * @returns {boolean} true if value existed in set, false otherwise
     */

  }, {
    key: "delete",
    value: function _delete(value) {
      this._invalidateCache();

      this._invalidateOrderedCache();

      return _get(_getPrototypeOf(SortableSet.prototype), "delete", this).call(this, value);
    }
    /**
     * @returns {void}
     */

  }, {
    key: "clear",
    value: function clear() {
      this._invalidateCache();

      this._invalidateOrderedCache();

      return _get(_getPrototypeOf(SortableSet.prototype), "clear", this).call(this);
    }
    /**
     * Sort with a comparer function
     * @param {SortFunction} sortFn Sorting comparer function
     * @returns {void}
     */

  }, {
    key: "sortWith",
    value: function sortWith(sortFn) {
      if (this.size <= 1 || sortFn === this._lastActiveSortFn) {
        // already sorted - nothing to do
        return;
      }

      var sortedArray = Array.from(this).sort(sortFn);

      _get(_getPrototypeOf(SortableSet.prototype), "clear", this).call(this);

      for (var i = 0; i < sortedArray.length; i += 1) {
        _get(_getPrototypeOf(SortableSet.prototype), "add", this).call(this, sortedArray[i]);
      }

      this._lastActiveSortFn = sortFn;

      this._invalidateCache();
    }
  }, {
    key: "sort",
    value: function sort() {
      this.sortWith(this._sortFn);
    }
    /**
     * Get data from cache
     * @param {function(SortableSet<T>): T[]} fn function to calculate value
     * @returns {T[]} returns result of fn(this), cached until set changes
     */

  }, {
    key: "getFromCache",
    value: function getFromCache(fn) {
      if (this._cache === undefined) {
        this._cache = new Map();
      } else {
        var data = this._cache.get(fn);

        if (data !== undefined) {
          return data;
        }
      }

      var newData = fn(this);

      this._cache.set(fn, newData);

      return newData;
    }
    /**
     * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value
     * @returns {any} returns result of fn(this), cached until set changes
     */

  }, {
    key: "getFromUnorderedCache",
    value: function getFromUnorderedCache(fn) {
      if (this._cacheOrderIndependent === undefined) {
        this._cacheOrderIndependent = new Map();
      } else {
        var data = this._cacheOrderIndependent.get(fn);

        if (data !== undefined) {
          return data;
        }
      }

      var newData = fn(this);

      this._cacheOrderIndependent.set(fn, newData);

      return newData;
    }
    /**
     * @private
     * @returns {void}
     */

  }, {
    key: "_invalidateCache",
    value: function _invalidateCache() {
      if (this._cache !== undefined) {
        this._cache.clear();
      }
    }
    /**
     * @private
     * @returns {void}
     */

  }, {
    key: "_invalidateOrderedCache",
    value: function _invalidateOrderedCache() {
      if (this._cacheOrderIndependent !== undefined) {
        this._cacheOrderIndependent.clear();
      }
    }
  }]);

  return SortableSet;
}(_wrapNativeSuper(Set));

module.exports = SortableSet;