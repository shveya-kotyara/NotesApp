"use strict";
/**
 * @template T
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Queue =
/*#__PURE__*/
function () {
  /**
   * @param {Iterable<T>=} items The initial elements.
   */
  function Queue(items) {
    _classCallCheck(this, Queue);

    /** @private @type {Set<T>} */
    this.set = new Set(items);
    /** @private @type {Iterator<T>} */

    this.iterator = this.set[Symbol.iterator]();
  }
  /**
   * Returns the number of elements in this queue.
   * @returns {number} The number of elements in this queue.
   */


  _createClass(Queue, [{
    key: "enqueue",

    /**
     * Appends the specified element to this queue.
     * @param {T} item The element to add.
     * @returns {void}
     */
    value: function enqueue(item) {
      this.set.add(item);
    }
    /**
     * Retrieves and removes the head of this queue.
     * @returns {T | undefined} The head of the queue of `undefined` if this queue is empty.
     */

  }, {
    key: "dequeue",
    value: function dequeue() {
      var result = this.iterator.next();
      if (result.done) return undefined;
      this.set["delete"](result.value);
      return result.value;
    }
  }, {
    key: "length",
    get: function get() {
      return this.set.size;
    }
  }]);

  return Queue;
}();

module.exports = Queue;