/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Semaphore =
/*#__PURE__*/
function () {
  /**
   * Creates an instance of Semaphore.
   *
   * @param {number} available the amount available number of "tasks"
   * in the Semaphore
   */
  function Semaphore(available) {
    _classCallCheck(this, Semaphore);

    this.available = available;
    /** @type {(function(): void)[]} */

    this.waiters = [];
    /** @private */

    this._continue = this._continue.bind(this);
  }
  /**
   * @param {function(): void} callback function block to capture and run
   * @returns {void}
   */


  _createClass(Semaphore, [{
    key: "acquire",
    value: function acquire(callback) {
      if (this.available > 0) {
        this.available--;
        callback();
      } else {
        this.waiters.push(callback);
      }
    }
  }, {
    key: "release",
    value: function release() {
      this.available++;

      if (this.waiters.length > 0) {
        process.nextTick(this._continue);
      }
    }
  }, {
    key: "_continue",
    value: function _continue() {
      if (this.available > 0) {
        if (this.waiters.length > 0) {
          this.available--;
          var callback = this.waiters.pop();
          callback();
        }
      }
    }
  }]);

  return Semaphore;
}();

module.exports = Semaphore;