/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;

var JsonpExportMainTemplatePlugin =
/*#__PURE__*/
function () {
  /**
   * @param {string} name jsonp function name
   */
  function JsonpExportMainTemplatePlugin(name) {
    _classCallCheck(this, JsonpExportMainTemplatePlugin);

    this.name = name;
  }

  _createClass(JsonpExportMainTemplatePlugin, [{
    key: "apply",
    value: function apply(compilation) {
      var _this = this;

      var mainTemplate = compilation.mainTemplate,
          chunkTemplate = compilation.chunkTemplate;

      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {
        var name = mainTemplate.getAssetPath(_this.name || "", {
          hash: hash,
          chunk: chunk
        });
        return new ConcatSource("".concat(name, "("), source, ");");
      };

      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {
        var template = _arr[_i];
        template.hooks.renderWithEntry.tap("JsonpExportMainTemplatePlugin", onRenderWithEntry);
      }

      mainTemplate.hooks.globalHashPaths.tap("JsonpExportMainTemplatePlugin", function (paths) {
        if (_this.name) paths.push(_this.name);
        return paths;
      });
      mainTemplate.hooks.hash.tap("JsonpExportMainTemplatePlugin", function (hash) {
        hash.update("jsonp export");
        hash.update("".concat(_this.name));
      });
    }
  }]);

  return JsonpExportMainTemplatePlugin;
}();

module.exports = JsonpExportMainTemplatePlugin;