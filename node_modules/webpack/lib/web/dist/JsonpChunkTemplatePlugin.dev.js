/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("webpack-sources"),
    ConcatSource = _require.ConcatSource;
/** @typedef {import("../ChunkTemplate")} ChunkTemplate */


var getEntryInfo = function getEntryInfo(chunk) {
  return [chunk.entryModule].filter(Boolean).map(function (m) {
    return [m.id].concat(Array.from(chunk.groupsIterable)[0].chunks.filter(function (c) {
      return c !== chunk;
    }).map(function (c) {
      return c.id;
    }));
  });
};

var JsonpChunkTemplatePlugin =
/*#__PURE__*/
function () {
  function JsonpChunkTemplatePlugin() {
    _classCallCheck(this, JsonpChunkTemplatePlugin);
  }

  _createClass(JsonpChunkTemplatePlugin, [{
    key: "apply",

    /**
     * @param {ChunkTemplate} chunkTemplate the chunk template
     * @returns {void}
     */
    value: function apply(chunkTemplate) {
      chunkTemplate.hooks.render.tap("JsonpChunkTemplatePlugin", function (modules, chunk) {
        var jsonpFunction = chunkTemplate.outputOptions.jsonpFunction;
        var globalObject = chunkTemplate.outputOptions.globalObject;
        var source = new ConcatSource();
        var prefetchChunks = chunk.getChildIdsByOrders().prefetch;
        source.add("(".concat(globalObject, "[").concat(JSON.stringify(jsonpFunction), "] = ").concat(globalObject, "[").concat(JSON.stringify(jsonpFunction), "] || []).push([").concat(JSON.stringify(chunk.ids), ","));
        source.add(modules);
        var entries = getEntryInfo(chunk);

        if (entries.length > 0) {
          source.add(",".concat(JSON.stringify(entries)));
        } else if (prefetchChunks && prefetchChunks.length) {
          source.add(",0");
        }

        if (prefetchChunks && prefetchChunks.length) {
          source.add(",".concat(JSON.stringify(prefetchChunks)));
        }

        source.add("])");
        return source;
      });
      chunkTemplate.hooks.hash.tap("JsonpChunkTemplatePlugin", function (hash) {
        hash.update("JsonpChunkTemplatePlugin");
        hash.update("4");
        hash.update("".concat(chunkTemplate.outputOptions.jsonpFunction));
        hash.update("".concat(chunkTemplate.outputOptions.globalObject));
      });
      chunkTemplate.hooks.hashForChunk.tap("JsonpChunkTemplatePlugin", function (hash, chunk) {
        hash.update(JSON.stringify(getEntryInfo(chunk)));
        hash.update(JSON.stringify(chunk.getChildIdsByOrders().prefetch) || "");
      });
    }
  }]);

  return JsonpChunkTemplatePlugin;
}();

module.exports = JsonpChunkTemplatePlugin;