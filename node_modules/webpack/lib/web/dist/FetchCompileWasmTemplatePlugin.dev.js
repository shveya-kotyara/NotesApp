/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var WasmMainTemplatePlugin = require("../wasm/WasmMainTemplatePlugin");

var FetchCompileWasmTemplatePlugin =
/*#__PURE__*/
function () {
  function FetchCompileWasmTemplatePlugin(options) {
    _classCallCheck(this, FetchCompileWasmTemplatePlugin);

    this.options = options || {};
  }

  _createClass(FetchCompileWasmTemplatePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.thisCompilation.tap("FetchCompileWasmTemplatePlugin", function (compilation) {
        var mainTemplate = compilation.mainTemplate;

        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {
          return "fetch(".concat(mainTemplate.requireFn, ".p + ").concat(path, ")");
        };

        var plugin = new WasmMainTemplatePlugin(Object.assign({
          generateLoadBinaryCode: generateLoadBinaryCode,
          supportsStreaming: true
        }, _this.options));
        plugin.apply(mainTemplate);
      });
    }
  }]);

  return FetchCompileWasmTemplatePlugin;
}();

module.exports = FetchCompileWasmTemplatePlugin;