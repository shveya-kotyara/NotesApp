/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require("tapable"),
    SyncWaterfallHook = _require.SyncWaterfallHook;

var Template = require("../Template");

var JsonpMainTemplatePlugin =
/*#__PURE__*/
function () {
  function JsonpMainTemplatePlugin() {
    _classCallCheck(this, JsonpMainTemplatePlugin);
  }

  _createClass(JsonpMainTemplatePlugin, [{
    key: "apply",
    value: function apply(mainTemplate) {
      var needChunkOnDemandLoadingCode = function needChunkOnDemandLoadingCode(chunk) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = chunk.groupsIterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var chunkGroup = _step.value;
            if (chunkGroup.getNumberOfChildren() > 0) return true;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return false;
      };

      var needChunkLoadingCode = function needChunkLoadingCode(chunk) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = chunk.groupsIterable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var chunkGroup = _step2.value;
            if (chunkGroup.chunks.length > 1) return true;
            if (chunkGroup.getNumberOfChildren() > 0) return true;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return false;
      };

      var needEntryDeferringCode = function needEntryDeferringCode(chunk) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = chunk.groupsIterable[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var chunkGroup = _step3.value;
            if (chunkGroup.chunks.length > 1) return true;
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return false;
      };

      var needPrefetchingCode = function needPrefetchingCode(chunk) {
        var allPrefetchChunks = chunk.getChildIdsByOrdersMap(true).prefetch;
        return allPrefetchChunks && Object.keys(allPrefetchChunks).length;
      }; // TODO webpack 5, no adding to .hooks, use WeakMap and static methods


      ["jsonpScript", "linkPreload", "linkPrefetch"].forEach(function (hook) {
        if (!mainTemplate.hooks[hook]) {
          mainTemplate.hooks[hook] = new SyncWaterfallHook(["source", "chunk", "hash"]);
        }
      });

      var getScriptSrcPath = function getScriptSrcPath(hash, chunk, chunkIdExpression) {
        var chunkFilename = mainTemplate.outputOptions.chunkFilename;
        var chunkMaps = chunk.getChunkMaps();
        return mainTemplate.getAssetPath(JSON.stringify(chunkFilename), {
          hash: "\" + ".concat(mainTemplate.renderCurrentHashCode(hash), " + \""),
          hashWithLength: function hashWithLength(length) {
            return "\" + ".concat(mainTemplate.renderCurrentHashCode(hash, length), " + \"");
          },
          chunk: {
            id: "\" + ".concat(chunkIdExpression, " + \""),
            hash: "\" + ".concat(JSON.stringify(chunkMaps.hash), "[").concat(chunkIdExpression, "] + \""),
            hashWithLength: function hashWithLength(length) {
              var shortChunkHashMap = Object.create(null);

              for (var _i = 0, _Object$keys = Object.keys(chunkMaps.hash); _i < _Object$keys.length; _i++) {
                var chunkId = _Object$keys[_i];

                if (typeof chunkMaps.hash[chunkId] === "string") {
                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
                }
              }

              return "\" + ".concat(JSON.stringify(shortChunkHashMap), "[").concat(chunkIdExpression, "] + \"");
            },
            name: "\" + (".concat(JSON.stringify(chunkMaps.name), "[").concat(chunkIdExpression, "]||").concat(chunkIdExpression, ") + \""),
            contentHash: {
              javascript: "\" + ".concat(JSON.stringify(chunkMaps.contentHash.javascript), "[").concat(chunkIdExpression, "] + \"")
            },
            contentHashWithLength: {
              javascript: function javascript(length) {
                var shortContentHashMap = {};
                var contentHash = chunkMaps.contentHash.javascript;

                for (var _i2 = 0, _Object$keys2 = Object.keys(contentHash); _i2 < _Object$keys2.length; _i2++) {
                  var chunkId = _Object$keys2[_i2];

                  if (typeof contentHash[chunkId] === "string") {
                    shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);
                  }
                }

                return "\" + ".concat(JSON.stringify(shortContentHashMap), "[").concat(chunkIdExpression, "] + \"");
              }
            }
          },
          contentHashType: "javascript"
        });
      };

      mainTemplate.hooks.localVars.tap("JsonpMainTemplatePlugin", function (source, chunk, hash) {
        var extraCode = [];

        if (needChunkLoadingCode(chunk)) {
          extraCode.push("", "// object to store loaded and loading chunks", "// undefined = chunk not loaded, null = chunk preloaded/prefetched", "// Promise = chunk loading, 0 = chunk loaded", "var installedChunks = {", Template.indent(chunk.ids.map(function (id) {
            return "".concat(JSON.stringify(id), ": 0");
          }).join(",\n")), "};", "", needEntryDeferringCode(chunk) ? needPrefetchingCode(chunk) ? "var deferredModules = [], deferredPrefetch = [];" : "var deferredModules = [];" : "");
        }

        if (needChunkOnDemandLoadingCode(chunk)) {
          extraCode.push("", "// script path function", "function jsonpScriptSrc(chunkId) {", Template.indent(["return ".concat(mainTemplate.requireFn, ".p + ").concat(getScriptSrcPath(hash, chunk, "chunkId"))]), "}");
        }

        if (extraCode.length === 0) return source;
        return Template.asString([source].concat(extraCode));
      });
      mainTemplate.hooks.jsonpScript.tap("JsonpMainTemplatePlugin", function (_, chunk, hash) {
        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;
        var chunkLoadTimeout = mainTemplate.outputOptions.chunkLoadTimeout;
        var jsonpScriptType = mainTemplate.outputOptions.jsonpScriptType;
        return Template.asString(["var script = document.createElement('script');", "var onScriptComplete;", jsonpScriptType ? "script.type = ".concat(JSON.stringify(jsonpScriptType), ";") : "", "script.charset = 'utf-8';", "script.timeout = ".concat(chunkLoadTimeout / 1000, ";"), "if (".concat(mainTemplate.requireFn, ".nc) {"), Template.indent("script.setAttribute(\"nonce\", ".concat(mainTemplate.requireFn, ".nc);")), "}", "script.src = jsonpScriptSrc(chunkId);", crossOriginLoading ? Template.asString(["if (script.src.indexOf(window.location.origin + '/') !== 0) {", Template.indent("script.crossOrigin = ".concat(JSON.stringify(crossOriginLoading), ";")), "}"]) : "", "// create error before stack unwound to get useful stacktrace later", "var error = new Error();", "onScriptComplete = function (event) {", Template.indent(["// avoid mem leaks in IE.", "script.onerror = script.onload = null;", "clearTimeout(timeout);", "var chunk = installedChunks[chunkId];", "if(chunk !== 0) {", Template.indent(["if(chunk) {", Template.indent(["var errorType = event && (event.type === 'load' ? 'missing' : event.type);", "var realSrc = event && event.target && event.target.src;", "error.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';", "error.name = 'ChunkLoadError';", "error.type = errorType;", "error.request = realSrc;", "chunk[1](error);"]), "}", "installedChunks[chunkId] = undefined;"]), "}"]), "};", "var timeout = setTimeout(function(){", Template.indent(["onScriptComplete({ type: 'timeout', target: script });"]), "}, ".concat(chunkLoadTimeout, ");"), "script.onerror = script.onload = onScriptComplete;"]);
      });
      mainTemplate.hooks.linkPreload.tap("JsonpMainTemplatePlugin", function (_, chunk, hash) {
        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;
        var jsonpScriptType = mainTemplate.outputOptions.jsonpScriptType;
        return Template.asString(["var link = document.createElement('link');", jsonpScriptType ? "link.type = ".concat(JSON.stringify(jsonpScriptType), ";") : "", "link.charset = 'utf-8';", "if (".concat(mainTemplate.requireFn, ".nc) {"), Template.indent("link.setAttribute(\"nonce\", ".concat(mainTemplate.requireFn, ".nc);")), "}", 'link.rel = "preload";', 'link.as = "script";', "link.href = jsonpScriptSrc(chunkId);", crossOriginLoading ? Template.asString(["if (link.href.indexOf(window.location.origin + '/') !== 0) {", Template.indent("link.crossOrigin = ".concat(JSON.stringify(crossOriginLoading), ";")), "}"]) : ""]);
      });
      mainTemplate.hooks.linkPrefetch.tap("JsonpMainTemplatePlugin", function (_, chunk, hash) {
        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;
        return Template.asString(["var link = document.createElement('link');", crossOriginLoading ? "link.crossOrigin = ".concat(JSON.stringify(crossOriginLoading), ";") : "", "if (".concat(mainTemplate.requireFn, ".nc) {"), Template.indent("link.setAttribute(\"nonce\", ".concat(mainTemplate.requireFn, ".nc);")), "}", 'link.rel = "prefetch";', 'link.as = "script";', "link.href = jsonpScriptSrc(chunkId);"]);
      });
      mainTemplate.hooks.requireEnsure.tap("JsonpMainTemplatePlugin load", function (source, chunk, hash) {
        return Template.asString([source, "", "// JSONP chunk loading for javascript", "", "var installedChunkData = installedChunks[chunkId];", 'if(installedChunkData !== 0) { // 0 means "already installed".', Template.indent(["", '// a Promise means "currently loading".', "if(installedChunkData) {", Template.indent(["promises.push(installedChunkData[2]);"]), "} else {", Template.indent(["// setup Promise in chunk cache", "var promise = new Promise(function(resolve, reject) {", Template.indent(["installedChunkData = installedChunks[chunkId] = [resolve, reject];"]), "});", "promises.push(installedChunkData[2] = promise);", "", "// start chunk loading", mainTemplate.hooks.jsonpScript.call("", chunk, hash), "document.head.appendChild(script);"]), "}"]), "}"]);
      });
      mainTemplate.hooks.requireEnsure.tap({
        name: "JsonpMainTemplatePlugin preload",
        stage: 10
      }, function (source, chunk, hash) {
        var chunkMap = chunk.getChildIdsByOrdersMap().preload;
        if (!chunkMap || Object.keys(chunkMap).length === 0) return source;
        return Template.asString([source, "", "// chunk preloadng for javascript", "", "var chunkPreloadMap = ".concat(JSON.stringify(chunkMap, null, "\t"), ";"), "", "var chunkPreloadData = chunkPreloadMap[chunkId];", "if(chunkPreloadData) {", Template.indent(["chunkPreloadData.forEach(function(chunkId) {", Template.indent(["if(installedChunks[chunkId] === undefined) {", Template.indent(["installedChunks[chunkId] = null;", mainTemplate.hooks.linkPreload.call("", chunk, hash), "document.head.appendChild(link);"]), "}"]), "});"]), "}"]);
      });
      mainTemplate.hooks.requireExtensions.tap("JsonpMainTemplatePlugin", function (source, chunk) {
        if (!needChunkOnDemandLoadingCode(chunk)) return source;
        return Template.asString([source, "", "// on error function for async loading", "".concat(mainTemplate.requireFn, ".oe = function(err) { console.error(err); throw err; };")]);
      });
      mainTemplate.hooks.bootstrap.tap("JsonpMainTemplatePlugin", function (source, chunk, hash) {
        if (needChunkLoadingCode(chunk)) {
          var withDefer = needEntryDeferringCode(chunk);
          var withPrefetch = needPrefetchingCode(chunk);
          return Template.asString([source, "", "// install a JSONP callback for chunk loading", "function webpackJsonpCallback(data) {", Template.indent(["var chunkIds = data[0];", "var moreModules = data[1];", withDefer ? "var executeModules = data[2];" : "", withPrefetch ? "var prefetchChunks = data[3] || [];" : "", '// add "moreModules" to the modules object,', '// then flag all "chunkIds" as loaded and fire callback', "var moduleId, chunkId, i = 0, resolves = [];", "for(;i < chunkIds.length; i++) {", Template.indent(["chunkId = chunkIds[i];", "if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {", Template.indent("resolves.push(installedChunks[chunkId][0]);"), "}", "installedChunks[chunkId] = 0;"]), "}", "for(moduleId in moreModules) {", Template.indent(["if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {", Template.indent(mainTemplate.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")), "}"]), "}", "if(parentJsonpFunction) parentJsonpFunction(data);", withPrefetch ? withDefer ? "deferredPrefetch.push.apply(deferredPrefetch, prefetchChunks);" : Template.asString(["// chunk prefetching for javascript", "prefetchChunks.forEach(function(chunkId) {", Template.indent(["if(installedChunks[chunkId] === undefined) {", Template.indent(["installedChunks[chunkId] = null;", mainTemplate.hooks.linkPrefetch.call("", chunk, hash), "document.head.appendChild(link);"]), "}"]), "});"]) : "", "while(resolves.length) {", Template.indent("resolves.shift()();"), "}", withDefer ? Template.asString(["", "// add entry modules from loaded chunk to deferred list", "deferredModules.push.apply(deferredModules, executeModules || []);", "", "// run deferred modules when all chunks ready", "return checkDeferredModules();"]) : ""]), "};", withDefer ? Template.asString(["function checkDeferredModules() {", Template.indent(["var result;", "for(var i = 0; i < deferredModules.length; i++) {", Template.indent(["var deferredModule = deferredModules[i];", "var fulfilled = true;", "for(var j = 1; j < deferredModule.length; j++) {", Template.indent(["var depId = deferredModule[j];", "if(installedChunks[depId] !== 0) fulfilled = false;"]), "}", "if(fulfilled) {", Template.indent(["deferredModules.splice(i--, 1);", "result = " + mainTemplate.requireFn + "(" + mainTemplate.requireFn + ".s = deferredModule[0]);"]), "}"]), "}", withPrefetch ? Template.asString(["if(deferredModules.length === 0) {", Template.indent(["// chunk prefetching for javascript", "deferredPrefetch.forEach(function(chunkId) {", Template.indent(["if(installedChunks[chunkId] === undefined) {", Template.indent(["installedChunks[chunkId] = null;", mainTemplate.hooks.linkPrefetch.call("", chunk, hash), "document.head.appendChild(link);"]), "}"]), "});", "deferredPrefetch.length = 0;"]), "}"]) : "", "return result;"]), "}"]) : ""]);
        }

        return source;
      });
      mainTemplate.hooks.beforeStartup.tap("JsonpMainTemplatePlugin", function (source, chunk, hash) {
        if (needChunkLoadingCode(chunk)) {
          var jsonpFunction = mainTemplate.outputOptions.jsonpFunction;
          var globalObject = mainTemplate.outputOptions.globalObject;
          return Template.asString(["var jsonpArray = ".concat(globalObject, "[").concat(JSON.stringify(jsonpFunction), "] = ").concat(globalObject, "[").concat(JSON.stringify(jsonpFunction), "] || [];"), "var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);", "jsonpArray.push = webpackJsonpCallback;", "jsonpArray = jsonpArray.slice();", "for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);", "var parentJsonpFunction = oldJsonpFunction;", "", source]);
        }

        return source;
      });
      mainTemplate.hooks.afterStartup.tap("JsonpMainTemplatePlugin", function (source, chunk, hash) {
        var prefetchChunks = chunk.getChildIdsByOrders().prefetch;

        if (needChunkLoadingCode(chunk) && prefetchChunks && prefetchChunks.length) {
          return Template.asString([source, "webpackJsonpCallback([[], {}, 0, ".concat(JSON.stringify(prefetchChunks), "]);")]);
        }

        return source;
      });
      mainTemplate.hooks.startup.tap("JsonpMainTemplatePlugin", function (source, chunk, hash) {
        if (needEntryDeferringCode(chunk)) {
          if (chunk.hasEntryModule()) {
            var entries = [chunk.entryModule].filter(Boolean).map(function (m) {
              return [m.id].concat(Array.from(chunk.groupsIterable)[0].chunks.filter(function (c) {
                return c !== chunk;
              }).map(function (c) {
                return c.id;
              }));
            });
            return Template.asString(["// add entry module to deferred list", "deferredModules.push(".concat(entries.map(function (e) {
              return JSON.stringify(e);
            }).join(", "), ");"), "// run deferred modules when ready", "return checkDeferredModules();"]);
          } else {
            return Template.asString(["// run deferred modules from other chunks", "checkDeferredModules();"]);
          }
        }

        return source;
      });
      mainTemplate.hooks.hotBootstrap.tap("JsonpMainTemplatePlugin", function (source, chunk, hash) {
        var globalObject = mainTemplate.outputOptions.globalObject;
        var hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;
        var hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;
        var crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;
        var hotUpdateFunction = mainTemplate.outputOptions.hotUpdateFunction;
        var currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {
          hash: "\" + ".concat(mainTemplate.renderCurrentHashCode(hash), " + \""),
          hashWithLength: function hashWithLength(length) {
            return "\" + ".concat(mainTemplate.renderCurrentHashCode(hash, length), " + \"");
          },
          chunk: {
            id: '" + chunkId + "'
          }
        });
        var currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {
          hash: "\" + ".concat(mainTemplate.renderCurrentHashCode(hash), " + \""),
          hashWithLength: function hashWithLength(length) {
            return "\" + ".concat(mainTemplate.renderCurrentHashCode(hash, length), " + \"");
          }
        });
        var runtimeSource = Template.getFunctionContent(require("./JsonpMainTemplate.runtime")).replace(/\/\/\$semicolon/g, ";").replace(/\$require\$/g, mainTemplate.requireFn).replace(/\$crossOriginLoading\$/g, crossOriginLoading ? JSON.stringify(crossOriginLoading) : "null").replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename).replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename).replace(/\$hash\$/g, JSON.stringify(hash));
        return "".concat(source, "\nfunction hotDisposeChunk(chunkId) {\n\tdelete installedChunks[chunkId];\n}\nvar parentHotUpdateCallback = ").concat(globalObject, "[").concat(JSON.stringify(hotUpdateFunction), "];\n").concat(globalObject, "[").concat(JSON.stringify(hotUpdateFunction), "] = ").concat(runtimeSource);
      });
      mainTemplate.hooks.hash.tap("JsonpMainTemplatePlugin", function (hash) {
        hash.update("jsonp");
        hash.update("6");
      });
    }
  }]);

  return JsonpMainTemplatePlugin;
}();

module.exports = JsonpMainTemplatePlugin;