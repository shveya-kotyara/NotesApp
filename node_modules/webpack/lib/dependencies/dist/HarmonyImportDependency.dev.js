/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DependencyReference = require("./DependencyReference");

var ModuleDependency = require("./ModuleDependency");

var Template = require("../Template");

var HarmonyImportDependency =
/*#__PURE__*/
function (_ModuleDependency) {
  _inherits(HarmonyImportDependency, _ModuleDependency);

  function HarmonyImportDependency(request, originModule, sourceOrder, parserScope) {
    var _this;

    _classCallCheck(this, HarmonyImportDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HarmonyImportDependency).call(this, request));
    _this.redirectedModule = undefined;
    _this.originModule = originModule;
    _this.sourceOrder = sourceOrder;
    _this.parserScope = parserScope;
    return _this;
  }

  _createClass(HarmonyImportDependency, [{
    key: "getReference",
    value: function getReference() {
      if (!this._module) return null;
      return new DependencyReference(this._module, false, this.weak, this.sourceOrder);
    }
  }, {
    key: "getImportVar",
    value: function getImportVar() {
      var importVarMap = this.parserScope.importVarMap;
      if (!importVarMap) this.parserScope.importVarMap = importVarMap = new Map();
      var importVar = importVarMap.get(this._module);
      if (importVar) return importVar;
      importVar = "".concat(Template.toIdentifier("".concat(this.userRequest)), "__WEBPACK_IMPORTED_MODULE_").concat(importVarMap.size, "__");
      importVarMap.set(this._module, importVar);
      return importVar;
    }
  }, {
    key: "getImportStatement",
    value: function getImportStatement(update, runtime) {
      return runtime.importStatement({
        update: update,
        module: this._module,
        importVar: this.getImportVar(),
        request: this.request,
        originModule: this.originModule
      });
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      _get(_getPrototypeOf(HarmonyImportDependency.prototype), "updateHash", this).call(this, hash);

      var importedModule = this._module;
      hash.update((importedModule && (!importedModule.buildMeta || importedModule.buildMeta.exportsType)) + "");
      hash.update((importedModule && importedModule.id) + "");
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      _get(_getPrototypeOf(HarmonyImportDependency.prototype), "disconnect", this).call(this);

      this.redirectedModule = undefined;
    }
  }, {
    key: "_module",
    get: function get() {
      return this.redirectedModule || this.module;
    }
  }]);

  return HarmonyImportDependency;
}(ModuleDependency);

module.exports = HarmonyImportDependency;
var importEmittedMap = new WeakMap();

HarmonyImportDependency.Template =
/*#__PURE__*/
function () {
  function HarmonyImportDependencyTemplate() {
    _classCallCheck(this, HarmonyImportDependencyTemplate);
  }

  _createClass(HarmonyImportDependencyTemplate, [{
    key: "apply",
    value: function apply(dep, source, runtime) {// no-op
    }
  }, {
    key: "getHarmonyInitOrder",
    value: function getHarmonyInitOrder(dep) {
      return dep.sourceOrder;
    }
  }, {
    key: "harmonyInit",
    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {
      var sourceInfo = importEmittedMap.get(source);

      if (!sourceInfo) {
        importEmittedMap.set(source, sourceInfo = {
          emittedImports: new Map()
        });
      }

      var key = dep._module || dep.request;
      if (key && sourceInfo.emittedImports.get(key)) return;
      sourceInfo.emittedImports.set(key, true);
      var content = dep.getImportStatement(false, runtime);
      source.insert(-1, content);
    }
  }], [{
    key: "isImportEmitted",
    value: function isImportEmitted(dep, source) {
      var sourceInfo = importEmittedMap.get(source);
      if (!sourceInfo) return false;
      var key = dep._module || dep.request;
      return key && sourceInfo.emittedImports.get(key);
    }
  }]);

  return HarmonyImportDependencyTemplate;
}();