/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HarmonyExportExpressionDependency = require("./HarmonyExportExpressionDependency");

var HarmonyImportSideEffectDependency = require("./HarmonyImportSideEffectDependency");

var HarmonyExportHeaderDependency = require("./HarmonyExportHeaderDependency");

var HarmonyExportSpecifierDependency = require("./HarmonyExportSpecifierDependency");

var HarmonyExportImportedSpecifierDependency = require("./HarmonyExportImportedSpecifierDependency");

var ConstDependency = require("./ConstDependency");

module.exports =
/*#__PURE__*/
function () {
  function HarmonyExportDependencyParserPlugin(moduleOptions) {
    _classCallCheck(this, HarmonyExportDependencyParserPlugin);

    this.strictExportPresence = moduleOptions.strictExportPresence;
  }

  _createClass(HarmonyExportDependencyParserPlugin, [{
    key: "apply",
    value: function apply(parser) {
      var _this = this;

      parser.hooks["export"].tap("HarmonyExportDependencyParserPlugin", function (statement) {
        var dep = new HarmonyExportHeaderDependency(statement.declaration && statement.declaration.range, statement.range);
        dep.loc = Object.create(statement.loc);
        dep.loc.index = -1;
        parser.state.current.addDependency(dep);
        return true;
      });
      parser.hooks.exportImport.tap("HarmonyExportDependencyParserPlugin", function (statement, source) {
        parser.state.lastHarmonyImportOrder = (parser.state.lastHarmonyImportOrder || 0) + 1;
        var clearDep = new ConstDependency("", statement.range);
        clearDep.loc = Object.create(statement.loc);
        clearDep.loc.index = -1;
        parser.state.current.addDependency(clearDep);
        var sideEffectDep = new HarmonyImportSideEffectDependency(source, parser.state.module, parser.state.lastHarmonyImportOrder, parser.state.harmonyParserScope);
        sideEffectDep.loc = Object.create(statement.loc);
        sideEffectDep.loc.index = -1;
        parser.state.current.addDependency(sideEffectDep);
        return true;
      });
      parser.hooks.exportExpression.tap("HarmonyExportDependencyParserPlugin", function (statement, expr) {
        var comments = parser.getComments([statement.range[0], expr.range[0]]);
        var dep = new HarmonyExportExpressionDependency(parser.state.module, expr.range, statement.range, comments.map(function (c) {
          switch (c.type) {
            case "Block":
              return "/*".concat(c.value, "*/");

            case "Line":
              return "//".concat(c.value, "\n");
          }

          return "";
        }).join(""));
        dep.loc = Object.create(statement.loc);
        dep.loc.index = -1;
        parser.state.current.addDependency(dep);
        return true;
      });
      parser.hooks.exportDeclaration.tap("HarmonyExportDependencyParserPlugin", function (statement) {});
      parser.hooks.exportSpecifier.tap("HarmonyExportDependencyParserPlugin", function (statement, id, name, idx) {
        var rename = parser.scope.renames.get(id);
        var dep;
        var harmonyNamedExports = parser.state.harmonyNamedExports = parser.state.harmonyNamedExports || new Set();
        harmonyNamedExports.add(name);

        if (rename === "imported var") {
          var settings = parser.state.harmonySpecifier.get(id);
          dep = new HarmonyExportImportedSpecifierDependency(settings.source, parser.state.module, settings.sourceOrder, parser.state.harmonyParserScope, settings.id, name, harmonyNamedExports, null, _this.strictExportPresence);
        } else {
          dep = new HarmonyExportSpecifierDependency(parser.state.module, id, name);
        }

        dep.loc = Object.create(statement.loc);
        dep.loc.index = idx;
        parser.state.current.addDependency(dep);
        return true;
      });
      parser.hooks.exportImportSpecifier.tap("HarmonyExportDependencyParserPlugin", function (statement, source, id, name, idx) {
        var harmonyNamedExports = parser.state.harmonyNamedExports = parser.state.harmonyNamedExports || new Set();
        var harmonyStarExports = null;

        if (name) {
          harmonyNamedExports.add(name);
        } else {
          harmonyStarExports = parser.state.harmonyStarExports = parser.state.harmonyStarExports || [];
        }

        var dep = new HarmonyExportImportedSpecifierDependency(source, parser.state.module, parser.state.lastHarmonyImportOrder, parser.state.harmonyParserScope, id, name, harmonyNamedExports, harmonyStarExports && harmonyStarExports.slice(), _this.strictExportPresence);

        if (harmonyStarExports) {
          harmonyStarExports.push(dep);
        }

        dep.loc = Object.create(statement.loc);
        dep.loc.index = idx;
        parser.state.current.addDependency(dep);
        return true;
      });
    }
  }]);

  return HarmonyExportDependencyParserPlugin;
}();