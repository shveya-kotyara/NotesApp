/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Florent Cailhol @ooflorent
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ConstDependency = require("./ConstDependency");

var HarmonyTopLevelThisParserPlugin =
/*#__PURE__*/
function () {
  function HarmonyTopLevelThisParserPlugin() {
    _classCallCheck(this, HarmonyTopLevelThisParserPlugin);
  }

  _createClass(HarmonyTopLevelThisParserPlugin, [{
    key: "apply",
    value: function apply(parser) {
      parser.hooks.expression["for"]("this").tap("HarmonyTopLevelThisParserPlugin", function (node) {
        if (!parser.scope.topLevelScope) return;
        var module = parser.state.module;
        var isHarmony = !!(module.buildMeta && module.buildMeta.exportsType);

        if (isHarmony) {
          var dep = new ConstDependency("undefined", node.range, false);
          dep.loc = node.loc;
          parser.state.current.addDependency(dep);
        }
      });
    }
  }]);

  return HarmonyTopLevelThisParserPlugin;
}();

module.exports = HarmonyTopLevelThisParserPlugin;