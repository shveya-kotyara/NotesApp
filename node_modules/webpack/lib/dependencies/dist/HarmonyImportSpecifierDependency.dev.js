/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DependencyReference = require("./DependencyReference");

var HarmonyImportDependency = require("./HarmonyImportDependency");

var HarmonyLinkingError = require("../HarmonyLinkingError");

var HarmonyImportSpecifierDependency =
/*#__PURE__*/
function (_HarmonyImportDepende) {
  _inherits(HarmonyImportSpecifierDependency, _HarmonyImportDepende);

  function HarmonyImportSpecifierDependency(request, originModule, sourceOrder, parserScope, id, name, range, strictExportPresence) {
    var _this;

    _classCallCheck(this, HarmonyImportSpecifierDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HarmonyImportSpecifierDependency).call(this, request, originModule, sourceOrder, parserScope));
    _this.id = id === null ? null : "".concat(id);
    _this.redirectedId = undefined;
    _this.name = name;
    _this.range = range;
    _this.strictExportPresence = strictExportPresence;
    _this.namespaceObjectAsContext = false;
    _this.callArgs = undefined;
    _this.call = undefined;
    _this.directImport = undefined;
    _this.shorthand = undefined;
    return _this;
  }

  _createClass(HarmonyImportSpecifierDependency, [{
    key: "getReference",
    value: function getReference() {
      if (!this._module) return null;
      return new DependencyReference(this._module, this._id && !this.namespaceObjectAsContext ? [this._id] : true, false, this.sourceOrder);
    }
  }, {
    key: "getWarnings",
    value: function getWarnings() {
      if (this.strictExportPresence || this.originModule.buildMeta.strictHarmonyModule) {
        return [];
      }

      return this._getErrors();
    }
  }, {
    key: "getErrors",
    value: function getErrors() {
      if (this.strictExportPresence || this.originModule.buildMeta.strictHarmonyModule) {
        return this._getErrors();
      }

      return [];
    }
  }, {
    key: "_getErrors",
    value: function _getErrors() {
      var importedModule = this._module;

      if (!importedModule) {
        return;
      }

      if (!importedModule.buildMeta || !importedModule.buildMeta.exportsType) {
        // It's not an harmony module
        if (this.originModule.buildMeta.strictHarmonyModule && this._id && this._id !== "default") {
          // In strict harmony modules we only support the default export
          return [new HarmonyLinkingError("Can't import the named export '".concat(this._id, "' from non EcmaScript module (only default export is available)"))];
        }

        return;
      }

      if (!this._id) {
        return;
      }

      if (importedModule.isProvided(this._id) !== false) {
        // It's provided or we are not sure
        return;
      } // We are sure that it's not provided


      var idIsNotNameMessage = this._id !== this.name ? " (imported as '".concat(this.name, "')") : "";
      var errorMessage = "\"export '".concat(this._id, "'").concat(idIsNotNameMessage, " was not found in '").concat(this.userRequest, "'");
      return [new HarmonyLinkingError(errorMessage)];
    } // implement this method to allow the occurrence order plugin to count correctly

  }, {
    key: "getNumberOfIdOccurrences",
    value: function getNumberOfIdOccurrences() {
      return 0;
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      _get(_getPrototypeOf(HarmonyImportSpecifierDependency.prototype), "updateHash", this).call(this, hash);

      var importedModule = this._module;
      hash.update((importedModule && this._id) + "");
      hash.update((importedModule && this._id && importedModule.isUsed(this._id)) + "");
      hash.update((importedModule && (!importedModule.buildMeta || importedModule.buildMeta.exportsType)) + "");
      hash.update((importedModule && importedModule.used + JSON.stringify(importedModule.usedExports)) + "");
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      _get(_getPrototypeOf(HarmonyImportSpecifierDependency.prototype), "disconnect", this).call(this);

      this.redirectedId = undefined;
    }
  }, {
    key: "type",
    get: function get() {
      return "harmony import specifier";
    }
  }, {
    key: "_id",
    get: function get() {
      return this.redirectedId || this.id;
    }
  }]);

  return HarmonyImportSpecifierDependency;
}(HarmonyImportDependency);

HarmonyImportSpecifierDependency.Template =
/*#__PURE__*/
function (_HarmonyImportDepende2) {
  _inherits(HarmonyImportSpecifierDependencyTemplate, _HarmonyImportDepende2);

  function HarmonyImportSpecifierDependencyTemplate() {
    _classCallCheck(this, HarmonyImportSpecifierDependencyTemplate);

    return _possibleConstructorReturn(this, _getPrototypeOf(HarmonyImportSpecifierDependencyTemplate).apply(this, arguments));
  }

  _createClass(HarmonyImportSpecifierDependencyTemplate, [{
    key: "apply",
    value: function apply(dep, source, runtime) {
      _get(_getPrototypeOf(HarmonyImportSpecifierDependencyTemplate.prototype), "apply", this).call(this, dep, source, runtime);

      var content = this.getContent(dep, runtime);
      source.replace(dep.range[0], dep.range[1] - 1, content);
    }
  }, {
    key: "getContent",
    value: function getContent(dep, runtime) {
      var exportExpr = runtime.exportFromImport({
        module: dep._module,
        request: dep.request,
        exportName: dep._id,
        originModule: dep.originModule,
        asiSafe: dep.shorthand,
        isCall: dep.call,
        callContext: !dep.directImport,
        importVar: dep.getImportVar()
      });
      return dep.shorthand ? "".concat(dep.name, ": ").concat(exportExpr) : exportExpr;
    }
  }]);

  return HarmonyImportSpecifierDependencyTemplate;
}(HarmonyImportDependency.Template);

module.exports = HarmonyImportSpecifierDependency;