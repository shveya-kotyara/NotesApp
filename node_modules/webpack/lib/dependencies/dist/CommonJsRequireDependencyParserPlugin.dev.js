/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CommonJsRequireDependency = require("./CommonJsRequireDependency");

var CommonJsRequireContextDependency = require("./CommonJsRequireContextDependency");

var RequireHeaderDependency = require("./RequireHeaderDependency");

var LocalModuleDependency = require("./LocalModuleDependency");

var ContextDependencyHelpers = require("./ContextDependencyHelpers");

var LocalModulesHelpers = require("./LocalModulesHelpers");

var ParserHelpers = require("../ParserHelpers");

var CommonJsRequireDependencyParserPlugin =
/*#__PURE__*/
function () {
  function CommonJsRequireDependencyParserPlugin(options) {
    _classCallCheck(this, CommonJsRequireDependencyParserPlugin);

    this.options = options;
  }

  _createClass(CommonJsRequireDependencyParserPlugin, [{
    key: "apply",
    value: function apply(parser) {
      var options = this.options;

      var processItem = function processItem(expr, param) {
        if (param.isString()) {
          var dep = new CommonJsRequireDependency(param.string, param.range);
          dep.loc = expr.loc;
          dep.optional = !!parser.scope.inTry;
          parser.state.current.addDependency(dep);
          return true;
        }
      };

      var processContext = function processContext(expr, param) {
        var dep = ContextDependencyHelpers.create(CommonJsRequireContextDependency, expr.range, param, expr, options, {}, parser);
        if (!dep) return;
        dep.loc = expr.loc;
        dep.optional = !!parser.scope.inTry;
        parser.state.current.addDependency(dep);
        return true;
      };

      parser.hooks.expression["for"]("require.cache").tap("CommonJsRequireDependencyParserPlugin", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, "__webpack_require__.c"));
      parser.hooks.expression["for"]("require").tap("CommonJsRequireDependencyParserPlugin", function (expr) {
        var dep = new CommonJsRequireContextDependency({
          request: options.unknownContextRequest,
          recursive: options.unknownContextRecursive,
          regExp: options.unknownContextRegExp,
          mode: "sync"
        }, expr.range);
        dep.critical = options.unknownContextCritical && "require function is used in a way in which dependencies cannot be statically extracted";
        dep.loc = expr.loc;
        dep.optional = !!parser.scope.inTry;
        parser.state.current.addDependency(dep);
        return true;
      });

      var createHandler = function createHandler(callNew) {
        return function (expr) {
          if (expr.arguments.length !== 1) return;
          var localModule;
          var param = parser.evaluateExpression(expr.arguments[0]);

          if (param.isConditional()) {
            var isExpression = false;
            var prevLength = parser.state.current.dependencies.length;
            var dep = new RequireHeaderDependency(expr.callee.range);
            dep.loc = expr.loc;
            parser.state.current.addDependency(dep);
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = param.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var p = _step.value;
                var result = processItem(expr, p);

                if (result === undefined) {
                  isExpression = true;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            if (isExpression) {
              parser.state.current.dependencies.length = prevLength;
            } else {
              return true;
            }
          }

          if (param.isString() && (localModule = LocalModulesHelpers.getLocalModule(parser.state, param.string))) {
            var _dep = new LocalModuleDependency(localModule, expr.range, callNew);

            _dep.loc = expr.loc;
            parser.state.current.addDependency(_dep);
            return true;
          } else {
            var _result = processItem(expr, param);

            if (_result === undefined) {
              processContext(expr, param);
            } else {
              var _dep2 = new RequireHeaderDependency(expr.callee.range);

              _dep2.loc = expr.loc;
              parser.state.current.addDependency(_dep2);
            }

            return true;
          }
        };
      };

      parser.hooks.call["for"]("require").tap("CommonJsRequireDependencyParserPlugin", createHandler(false));
      parser.hooks["new"]["for"]("require").tap("CommonJsRequireDependencyParserPlugin", createHandler(true));
      parser.hooks.call["for"]("module.require").tap("CommonJsRequireDependencyParserPlugin", createHandler(false));
      parser.hooks["new"]["for"]("module.require").tap("CommonJsRequireDependencyParserPlugin", createHandler(true));
    }
  }]);

  return CommonJsRequireDependencyParserPlugin;
}();

module.exports = CommonJsRequireDependencyParserPlugin;