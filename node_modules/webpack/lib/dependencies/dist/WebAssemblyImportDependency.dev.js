/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DependencyReference = require("./DependencyReference");

var ModuleDependency = require("./ModuleDependency");

var UnsupportedWebAssemblyFeatureError = require("../wasm/UnsupportedWebAssemblyFeatureError");
/** @typedef {import("@webassemblyjs/ast").ModuleImportDescription} ModuleImportDescription */


var WebAssemblyImportDependency =
/*#__PURE__*/
function (_ModuleDependency) {
  _inherits(WebAssemblyImportDependency, _ModuleDependency);

  /**
   * @param {string} request the request
   * @param {string} name the imported name
   * @param {ModuleImportDescription} description the WASM ast node
   * @param {false | string} onlyDirectImport if only direct imports are allowed
   */
  function WebAssemblyImportDependency(request, name, description, onlyDirectImport) {
    var _this;

    _classCallCheck(this, WebAssemblyImportDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebAssemblyImportDependency).call(this, request));
    /** @type {string} */

    _this.name = name;
    /** @type {ModuleImportDescription} */

    _this.description = description;
    /** @type {false | string} */

    _this.onlyDirectImport = onlyDirectImport;
    return _this;
  }

  _createClass(WebAssemblyImportDependency, [{
    key: "getReference",
    value: function getReference() {
      if (!this.module) return null;
      return new DependencyReference(this.module, [this.name], false);
    }
  }, {
    key: "getErrors",
    value: function getErrors() {
      if (this.onlyDirectImport && this.module && !this.module.type.startsWith("webassembly")) {
        return [new UnsupportedWebAssemblyFeatureError("Import \"".concat(this.name, "\" from \"").concat(this.request, "\" with ").concat(this.onlyDirectImport, " can only be used for direct wasm to wasm dependencies"))];
      }
    }
  }, {
    key: "type",
    get: function get() {
      return "wasm import";
    }
  }]);

  return WebAssemblyImportDependency;
}(ModuleDependency);

module.exports = WebAssemblyImportDependency;