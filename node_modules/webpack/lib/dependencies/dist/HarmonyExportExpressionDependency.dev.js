/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var NullDependency = require("./NullDependency");

var HarmonyExportExpressionDependency =
/*#__PURE__*/
function (_NullDependency) {
  _inherits(HarmonyExportExpressionDependency, _NullDependency);

  function HarmonyExportExpressionDependency(originModule, range, rangeStatement, prefix) {
    var _this;

    _classCallCheck(this, HarmonyExportExpressionDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HarmonyExportExpressionDependency).call(this));
    _this.originModule = originModule;
    _this.range = range;
    _this.rangeStatement = rangeStatement;
    _this.prefix = prefix;
    return _this;
  }

  _createClass(HarmonyExportExpressionDependency, [{
    key: "getExports",
    value: function getExports() {
      return {
        exports: ["default"],
        dependencies: undefined
      };
    }
  }, {
    key: "type",
    get: function get() {
      return "harmony export expression";
    }
  }]);

  return HarmonyExportExpressionDependency;
}(NullDependency);

HarmonyExportExpressionDependency.Template =
/*#__PURE__*/
function () {
  function HarmonyExportDependencyTemplate() {
    _classCallCheck(this, HarmonyExportDependencyTemplate);
  }

  _createClass(HarmonyExportDependencyTemplate, [{
    key: "apply",
    value: function apply(dep, source) {
      var used = dep.originModule.isUsed("default");
      var content = this.getContent(dep.originModule, used);

      if (dep.range) {
        source.replace(dep.rangeStatement[0], dep.range[0] - 1, content + "(" + dep.prefix);
        source.replace(dep.range[1], dep.rangeStatement[1] - 1, ");");
        return;
      }

      source.replace(dep.rangeStatement[0], dep.rangeStatement[1] - 1, content);
    }
  }, {
    key: "getContent",
    value: function getContent(module, used) {
      var exportsName = module.exportsArgument;

      if (used) {
        return "/* harmony default export */ ".concat(exportsName, "[").concat(JSON.stringify(used), "] = ");
      }

      return "/* unused harmony default export */ var _unused_webpack_default_export = ";
    }
  }]);

  return HarmonyExportDependencyTemplate;
}();

module.exports = HarmonyExportExpressionDependency;