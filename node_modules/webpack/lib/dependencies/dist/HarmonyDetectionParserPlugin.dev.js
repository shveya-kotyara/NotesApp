/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HarmonyCompatibilityDependency = require("./HarmonyCompatibilityDependency");

var HarmonyInitDependency = require("./HarmonyInitDependency");

module.exports =
/*#__PURE__*/
function () {
  function HarmonyDetectionParserPlugin() {
    _classCallCheck(this, HarmonyDetectionParserPlugin);
  }

  _createClass(HarmonyDetectionParserPlugin, [{
    key: "apply",
    value: function apply(parser) {
      parser.hooks.program.tap("HarmonyDetectionParserPlugin", function (ast) {
        var isStrictHarmony = parser.state.module.type === "javascript/esm";
        var isHarmony = isStrictHarmony || ast.body.some(function (statement) {
          return statement.type === "ImportDeclaration" || statement.type === "ExportDefaultDeclaration" || statement.type === "ExportNamedDeclaration" || statement.type === "ExportAllDeclaration";
        });

        if (isHarmony) {
          var _module = parser.state.module;
          var compatDep = new HarmonyCompatibilityDependency(_module);
          compatDep.loc = {
            start: {
              line: -1,
              column: 0
            },
            end: {
              line: -1,
              column: 0
            },
            index: -3
          };

          _module.addDependency(compatDep);

          var initDep = new HarmonyInitDependency(_module);
          initDep.loc = {
            start: {
              line: -1,
              column: 0
            },
            end: {
              line: -1,
              column: 0
            },
            index: -2
          };

          _module.addDependency(initDep);

          parser.state.harmonyParserScope = parser.state.harmonyParserScope || {};
          parser.scope.isStrict = true;
          _module.buildMeta.exportsType = "namespace";
          _module.buildInfo.strict = true;
          _module.buildInfo.exportsArgument = "__webpack_exports__";

          if (isStrictHarmony) {
            _module.buildMeta.strictHarmonyModule = true;
            _module.buildInfo.moduleArgument = "__webpack_module__";
          }
        }
      });

      var skipInHarmony = function skipInHarmony() {
        var module = parser.state.module;

        if (module && module.buildMeta && module.buildMeta.exportsType) {
          return true;
        }
      };

      var nullInHarmony = function nullInHarmony() {
        var module = parser.state.module;

        if (module && module.buildMeta && module.buildMeta.exportsType) {
          return null;
        }
      };

      var nonHarmonyIdentifiers = ["define", "exports"];

      for (var _i = 0, _nonHarmonyIdentifier = nonHarmonyIdentifiers; _i < _nonHarmonyIdentifier.length; _i++) {
        var identifer = _nonHarmonyIdentifier[_i];
        parser.hooks.evaluateTypeof["for"](identifer).tap("HarmonyDetectionParserPlugin", nullInHarmony);
        parser.hooks["typeof"]["for"](identifer).tap("HarmonyDetectionParserPlugin", skipInHarmony);
        parser.hooks.evaluate["for"](identifer).tap("HarmonyDetectionParserPlugin", nullInHarmony);
        parser.hooks.expression["for"](identifer).tap("HarmonyDetectionParserPlugin", skipInHarmony);
        parser.hooks.call["for"](identifer).tap("HarmonyDetectionParserPlugin", skipInHarmony);
      }
    }
  }]);

  return HarmonyDetectionParserPlugin;
}();