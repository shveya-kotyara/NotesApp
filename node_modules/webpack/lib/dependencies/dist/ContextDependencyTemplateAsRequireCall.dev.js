/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ContextDependencyTemplateAsRequireCall =
/*#__PURE__*/
function () {
  function ContextDependencyTemplateAsRequireCall() {
    _classCallCheck(this, ContextDependencyTemplateAsRequireCall);
  }

  _createClass(ContextDependencyTemplateAsRequireCall, [{
    key: "apply",
    value: function apply(dep, source, runtime) {
      var moduleExports = runtime.moduleExports({
        module: dep.module,
        request: dep.request
      });

      if (dep.module) {
        if (dep.valueRange) {
          if (Array.isArray(dep.replaces)) {
            for (var i = 0; i < dep.replaces.length; i++) {
              var rep = dep.replaces[i];
              source.replace(rep.range[0], rep.range[1] - 1, rep.value);
            }
          }

          source.replace(dep.valueRange[1], dep.range[1] - 1, ")"); // TODO webpack 5 remove `prepend` it's no longer used

          source.replace(dep.range[0], dep.valueRange[0] - 1, "".concat(moduleExports, "(").concat(typeof dep.prepend === "string" ? JSON.stringify(dep.prepend) : ""));
        } else {
          source.replace(dep.range[0], dep.range[1] - 1, moduleExports);
        }
      } else {
        source.replace(dep.range[0], dep.range[1] - 1, moduleExports);
      }
    }
  }]);

  return ContextDependencyTemplateAsRequireCall;
}();

module.exports = ContextDependencyTemplateAsRequireCall;