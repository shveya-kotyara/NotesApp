/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var NullDependency = require("./NullDependency");

var HarmonyInitDependency =
/*#__PURE__*/
function (_NullDependency) {
  _inherits(HarmonyInitDependency, _NullDependency);

  function HarmonyInitDependency(originModule) {
    var _this;

    _classCallCheck(this, HarmonyInitDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HarmonyInitDependency).call(this));
    _this.originModule = originModule;
    return _this;
  }

  _createClass(HarmonyInitDependency, [{
    key: "type",
    get: function get() {
      return "harmony init";
    }
  }]);

  return HarmonyInitDependency;
}(NullDependency);

module.exports = HarmonyInitDependency;

HarmonyInitDependency.Template =
/*#__PURE__*/
function () {
  function HarmonyInitDependencyTemplate() {
    _classCallCheck(this, HarmonyInitDependencyTemplate);
  }

  _createClass(HarmonyInitDependencyTemplate, [{
    key: "apply",
    value: function apply(dep, source, runtime, dependencyTemplates) {
      var module = dep.originModule;
      var list = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = module.dependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var dependency = _step.value;
          var template = dependencyTemplates.get(dependency.constructor);

          if (template && typeof template.harmonyInit === "function" && typeof template.getHarmonyInitOrder === "function") {
            var order = template.getHarmonyInitOrder(dependency);

            if (!isNaN(order)) {
              list.push({
                order: order,
                listOrder: list.length,
                dependency: dependency,
                template: template
              });
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      list.sort(function (a, b) {
        var x = a.order - b.order;
        if (x) return x;
        return a.listOrder - b.listOrder;
      });

      for (var _i = 0, _list = list; _i < _list.length; _i++) {
        var item = _list[_i];
        item.template.harmonyInit(item.dependency, source, runtime, dependencyTemplates);
      }
    }
  }]);

  return HarmonyInitDependencyTemplate;
}();