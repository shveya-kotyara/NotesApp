/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ParserHelpers = require("../ParserHelpers");

var WebpackError = require("../WebpackError");

var SystemPlugin =
/*#__PURE__*/
function () {
  function SystemPlugin(options) {
    _classCallCheck(this, SystemPlugin);

    this.options = options;
  }

  _createClass(SystemPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("SystemPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;

        var handler = function handler(parser, parserOptions) {
          if (parserOptions.system !== undefined && !parserOptions.system) return;
          var shouldWarn = parserOptions.system === undefined;

          var setNotSupported = function setNotSupported(name) {
            parser.hooks.evaluateTypeof["for"](name).tap("SystemPlugin", ParserHelpers.evaluateToString("undefined"));
            parser.hooks.expression["for"](name).tap("SystemPlugin", ParserHelpers.expressionIsUnsupported(parser, name + " is not supported by webpack."));
          };

          parser.hooks["typeof"]["for"]("System.import").tap("SystemPlugin", ParserHelpers.toConstantDependency(parser, JSON.stringify("function")));
          parser.hooks.evaluateTypeof["for"]("System.import").tap("SystemPlugin", ParserHelpers.evaluateToString("function"));
          parser.hooks["typeof"]["for"]("System").tap("SystemPlugin", ParserHelpers.toConstantDependency(parser, JSON.stringify("object")));
          parser.hooks.evaluateTypeof["for"]("System").tap("SystemPlugin", ParserHelpers.evaluateToString("object"));
          setNotSupported("System.set");
          setNotSupported("System.get");
          setNotSupported("System.register");
          parser.hooks.expression["for"]("System").tap("SystemPlugin", function () {
            var systemPolyfillRequire = ParserHelpers.requireFileAsExpression(parser.state.module.context, require.resolve("../../buildin/system"));
            return ParserHelpers.addParsedVariableToModule(parser, "System", systemPolyfillRequire);
          });
          parser.hooks.call["for"]("System.import").tap("SystemPlugin", function (expr) {
            if (shouldWarn) {
              parser.state.module.warnings.push(new SystemImportDeprecationWarning(parser.state.module, expr.loc));
            }

            return parser.hooks.importCall.call(expr);
          });
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("SystemPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("SystemPlugin", handler);
      });
    }
  }]);

  return SystemPlugin;
}();

var SystemImportDeprecationWarning =
/*#__PURE__*/
function (_WebpackError) {
  _inherits(SystemImportDeprecationWarning, _WebpackError);

  function SystemImportDeprecationWarning(module, loc) {
    var _this;

    _classCallCheck(this, SystemImportDeprecationWarning);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SystemImportDeprecationWarning).call(this, "System.import() is deprecated and will be removed soon. Use import() instead.\n" + "For more info visit https://webpack.js.org/guides/code-splitting/"));
    _this.name = "SystemImportDeprecationWarning";
    _this.module = module;
    _this.loc = loc;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    return _this;
  }

  return SystemImportDeprecationWarning;
}(WebpackError);

module.exports = SystemPlugin;