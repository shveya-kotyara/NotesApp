/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var NullDependency = require("./NullDependency");

var AMDRequireDependency =
/*#__PURE__*/
function (_NullDependency) {
  _inherits(AMDRequireDependency, _NullDependency);

  function AMDRequireDependency(block) {
    var _this;

    _classCallCheck(this, AMDRequireDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AMDRequireDependency).call(this));
    _this.block = block;
    return _this;
  }

  return AMDRequireDependency;
}(NullDependency);

AMDRequireDependency.Template =
/*#__PURE__*/
function () {
  function AMDRequireDependencyTemplate() {
    _classCallCheck(this, AMDRequireDependencyTemplate);
  }

  _createClass(AMDRequireDependencyTemplate, [{
    key: "apply",
    value: function apply(dep, source, runtime) {
      var depBlock = dep.block;
      var promise = runtime.blockPromise({
        block: depBlock,
        message: "AMD require"
      }); // has array range but no function range

      if (depBlock.arrayRange && !depBlock.functionRange) {
        var startBlock = "".concat(promise, ".then(function() {");
        var endBlock = ";}).catch(".concat(runtime.onError(), ")");
        source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, startBlock);
        source.replace(depBlock.arrayRange[1], depBlock.outerRange[1] - 1, endBlock);
        return;
      } // has function range but no array range


      if (depBlock.functionRange && !depBlock.arrayRange) {
        var _startBlock = "".concat(promise, ".then((");

        var _endBlock = ").bind(exports, __webpack_require__, exports, module)).catch(".concat(runtime.onError(), ")");

        source.replace(depBlock.outerRange[0], depBlock.functionRange[0] - 1, _startBlock);
        source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, _endBlock);
        return;
      } // has array range, function range, and errorCallbackRange


      if (depBlock.arrayRange && depBlock.functionRange && depBlock.errorCallbackRange) {
        var _startBlock2 = "".concat(promise, ".then(function() { ");

        var errorRangeBlock = "}".concat(depBlock.functionBindThis ? ".bind(this)" : "", ").catch(");

        var _endBlock2 = "".concat(depBlock.errorCallbackBindThis ? ".bind(this)" : "", ")");

        source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, _startBlock2);
        source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
        source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; (");
        source.insert(depBlock.functionRange[1], ").apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);");
        source.replace(depBlock.functionRange[1], depBlock.errorCallbackRange[0] - 1, errorRangeBlock);
        source.replace(depBlock.errorCallbackRange[1], depBlock.outerRange[1] - 1, _endBlock2);
        return;
      } // has array range, function range, but no errorCallbackRange


      if (depBlock.arrayRange && depBlock.functionRange) {
        var _startBlock3 = "".concat(promise, ".then(function() { ");

        var _endBlock3 = "}".concat(depBlock.functionBindThis ? ".bind(this)" : "", ").catch(").concat(runtime.onError(), ")");

        source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, _startBlock3);
        source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
        source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; (");
        source.insert(depBlock.functionRange[1], ").apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);");
        source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, _endBlock3);
      }
    }
  }]);

  return AMDRequireDependencyTemplate;
}();

module.exports = AMDRequireDependency;