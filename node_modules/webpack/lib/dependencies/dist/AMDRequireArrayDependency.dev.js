/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Dependency = require("../Dependency");

var AMDRequireArrayDependency =
/*#__PURE__*/
function (_Dependency) {
  _inherits(AMDRequireArrayDependency, _Dependency);

  function AMDRequireArrayDependency(depsArray, range) {
    var _this;

    _classCallCheck(this, AMDRequireArrayDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AMDRequireArrayDependency).call(this));
    _this.depsArray = depsArray;
    _this.range = range;
    return _this;
  }

  _createClass(AMDRequireArrayDependency, [{
    key: "type",
    get: function get() {
      return "amd require array";
    }
  }]);

  return AMDRequireArrayDependency;
}(Dependency);

AMDRequireArrayDependency.Template =
/*#__PURE__*/
function () {
  function AMDRequireArrayDependencyTemplate() {
    _classCallCheck(this, AMDRequireArrayDependencyTemplate);
  }

  _createClass(AMDRequireArrayDependencyTemplate, [{
    key: "apply",
    value: function apply(dep, source, runtime) {
      var content = this.getContent(dep, runtime);
      source.replace(dep.range[0], dep.range[1] - 1, content);
    }
  }, {
    key: "getContent",
    value: function getContent(dep, runtime) {
      var _this2 = this;

      var requires = dep.depsArray.map(function (dependency) {
        return _this2.contentForDependency(dependency, runtime);
      });
      return "[".concat(requires.join(", "), "]");
    }
  }, {
    key: "contentForDependency",
    value: function contentForDependency(dep, runtime) {
      if (typeof dep === "string") {
        return dep;
      }

      if (dep.localModule) {
        return dep.localModule.variableName();
      } else {
        return runtime.moduleExports({
          module: dep.module,
          request: dep.request
        });
      }
    }
  }]);

  return AMDRequireArrayDependencyTemplate;
}();

module.exports = AMDRequireArrayDependency;