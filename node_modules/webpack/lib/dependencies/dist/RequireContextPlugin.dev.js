/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RequireContextDependency = require("./RequireContextDependency");

var ContextElementDependency = require("./ContextElementDependency");

var RequireContextDependencyParserPlugin = require("./RequireContextDependencyParserPlugin");

var RequireContextPlugin =
/*#__PURE__*/
function () {
  function RequireContextPlugin(modulesDirectories, extensions, mainFiles) {
    _classCallCheck(this, RequireContextPlugin);

    if (!Array.isArray(modulesDirectories)) {
      throw new Error("modulesDirectories must be an array");
    }

    if (!Array.isArray(extensions)) {
      throw new Error("extensions must be an array");
    }

    this.modulesDirectories = modulesDirectories;
    this.extensions = extensions;
    this.mainFiles = mainFiles;
  }

  _createClass(RequireContextPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.compilation.tap("RequireContextPlugin", function (compilation, _ref) {
        var contextModuleFactory = _ref.contextModuleFactory,
            normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(RequireContextDependency, contextModuleFactory);
        compilation.dependencyTemplates.set(RequireContextDependency, new RequireContextDependency.Template());
        compilation.dependencyFactories.set(ContextElementDependency, normalModuleFactory);

        var handler = function handler(parser, parserOptions) {
          if (parserOptions.requireContext !== undefined && !parserOptions.requireContext) return;
          new RequireContextDependencyParserPlugin().apply(parser);
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("RequireContextPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("RequireContextPlugin", handler);
        contextModuleFactory.hooks.alternatives.tap("RequireContextPlugin", function (items) {
          if (items.length === 0) return items;
          return items.map(function (obj) {
            return _this.extensions.filter(function (ext) {
              var l = obj.request.length;
              return l > ext.length && obj.request.substr(l - ext.length, l) === ext;
            }).map(function (ext) {
              var l = obj.request.length;
              return {
                context: obj.context,
                request: obj.request.substr(0, l - ext.length)
              };
            }).concat(obj);
          }).reduce(function (a, b) {
            return a.concat(b);
          }, []);
        });
        contextModuleFactory.hooks.alternatives.tap("RequireContextPlugin", function (items) {
          if (items.length === 0) return items;
          return items.map(function (obj) {
            return _this.mainFiles.filter(function (mainFile) {
              var l = obj.request.length;
              return l > mainFile.length + 1 && obj.request.substr(l - mainFile.length - 1, l) === "/" + mainFile;
            }).map(function (mainFile) {
              var l = obj.request.length;
              return [{
                context: obj.context,
                request: obj.request.substr(0, l - mainFile.length)
              }, {
                context: obj.context,
                request: obj.request.substr(0, l - mainFile.length - 1)
              }];
            }).reduce(function (a, b) {
              return a.concat(b);
            }, []).concat(obj);
          }).reduce(function (a, b) {
            return a.concat(b);
          }, []);
        });
        contextModuleFactory.hooks.alternatives.tap("RequireContextPlugin", function (items) {
          if (items.length === 0) return items;
          return items.map(function (obj) {
            for (var i = 0; i < _this.modulesDirectories.length; i++) {
              var dir = _this.modulesDirectories[i];
              var idx = obj.request.indexOf("./" + dir + "/");

              if (idx === 0) {
                obj.request = obj.request.slice(dir.length + 3);
                break;
              }
            }

            return obj;
          });
        });
      });
    }
  }]);

  return RequireContextPlugin;
}();

module.exports = RequireContextPlugin;