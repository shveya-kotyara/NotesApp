/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ImportDependency = require("./ImportDependency");

var ImportEagerDependency = require("./ImportEagerDependency");

var ImportWeakDependency = require("./ImportWeakDependency");

var ImportContextDependency = require("./ImportContextDependency");

var ImportParserPlugin = require("./ImportParserPlugin");

var ImportPlugin =
/*#__PURE__*/
function () {
  function ImportPlugin(options) {
    _classCallCheck(this, ImportPlugin);

    this.options = options;
  }

  _createClass(ImportPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;
      compiler.hooks.compilation.tap("ImportPlugin", function (compilation, _ref) {
        var contextModuleFactory = _ref.contextModuleFactory,
            normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(ImportDependency, normalModuleFactory);
        compilation.dependencyTemplates.set(ImportDependency, new ImportDependency.Template());
        compilation.dependencyFactories.set(ImportEagerDependency, normalModuleFactory);
        compilation.dependencyTemplates.set(ImportEagerDependency, new ImportEagerDependency.Template());
        compilation.dependencyFactories.set(ImportWeakDependency, normalModuleFactory);
        compilation.dependencyTemplates.set(ImportWeakDependency, new ImportWeakDependency.Template());
        compilation.dependencyFactories.set(ImportContextDependency, contextModuleFactory);
        compilation.dependencyTemplates.set(ImportContextDependency, new ImportContextDependency.Template());

        var handler = function handler(parser, parserOptions) {
          if (parserOptions["import"] !== undefined && !parserOptions["import"]) return;
          new ImportParserPlugin(options).apply(parser);
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("ImportPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("ImportPlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/esm").tap("ImportPlugin", handler);
      });
    }
  }]);

  return ImportPlugin;
}();

module.exports = ImportPlugin;