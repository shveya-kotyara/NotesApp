/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DependencyReference = require("./DependencyReference");

var HarmonyImportDependency = require("./HarmonyImportDependency");

var Template = require("../Template");

var HarmonyLinkingError = require("../HarmonyLinkingError");
/** @typedef {import("../Module")} Module */

/** @typedef {"missing"|"unused"|"empty-star"|"reexport-non-harmony-default"|"reexport-named-default"|"reexport-namespace-object"|"reexport-non-harmony-default-strict"|"reexport-fake-namespace-object"|"rexport-non-harmony-undefined"|"safe-reexport"|"checked-reexport"|"dynamic-reexport"} ExportModeType */

/** @type {Map<string, string>} */


var EMPTY_MAP = new Map();

var ExportMode =
/**
 * @param {ExportModeType} type type of the mode
 */
function ExportMode(type) {
  _classCallCheck(this, ExportMode);

  /** @type {ExportModeType} */
  this.type = type;
  /** @type {string|null} */

  this.name = null;
  /** @type {Map<string, string>} */

  this.map = EMPTY_MAP;
  /** @type {Set<string>|null} */

  this.ignored = null;
  /** @type {Module|null} */

  this.module = null;
  /** @type {string|null} */

  this.userRequest = null;
};

var EMPTY_STAR_MODE = new ExportMode("empty-star");

var HarmonyExportImportedSpecifierDependency =
/*#__PURE__*/
function (_HarmonyImportDepende) {
  _inherits(HarmonyExportImportedSpecifierDependency, _HarmonyImportDepende);

  function HarmonyExportImportedSpecifierDependency(request, originModule, sourceOrder, parserScope, id, name, activeExports, otherStarExports, strictExportPresence) {
    var _this;

    _classCallCheck(this, HarmonyExportImportedSpecifierDependency);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(HarmonyExportImportedSpecifierDependency).call(this, request, originModule, sourceOrder, parserScope));
    _this.id = id;
    _this.redirectedId = undefined;
    _this.name = name;
    _this.activeExports = activeExports;
    _this.otherStarExports = otherStarExports;
    _this.strictExportPresence = strictExportPresence;
    return _this;
  }

  _createClass(HarmonyExportImportedSpecifierDependency, [{
    key: "getMode",
    value: function getMode(ignoreUnused) {
      var _this2 = this;

      var name = this.name;
      var id = this._id;
      var used = this.originModule.isUsed(name);
      var importedModule = this._module;

      if (!importedModule) {
        var _mode = new ExportMode("missing");

        _mode.userRequest = this.userRequest;
        return _mode;
      }

      if (!ignoreUnused && (name ? !used : this.originModule.usedExports === false)) {
        var _mode2 = new ExportMode("unused");

        _mode2.name = name || "*";
        return _mode2;
      }

      var strictHarmonyModule = this.originModule.buildMeta.strictHarmonyModule;

      if (name && id === "default" && importedModule.buildMeta) {
        if (!importedModule.buildMeta.exportsType) {
          var _mode3 = new ExportMode(strictHarmonyModule ? "reexport-non-harmony-default-strict" : "reexport-non-harmony-default");

          _mode3.name = name;
          _mode3.module = importedModule;
          return _mode3;
        } else if (importedModule.buildMeta.exportsType === "named") {
          var _mode4 = new ExportMode("reexport-named-default");

          _mode4.name = name;
          _mode4.module = importedModule;
          return _mode4;
        }
      }

      var isNotAHarmonyModule = importedModule.buildMeta && !importedModule.buildMeta.exportsType;

      if (name) {
        var _mode5;

        if (id) {
          // export { name as name }
          if (isNotAHarmonyModule && strictHarmonyModule) {
            _mode5 = new ExportMode("rexport-non-harmony-undefined");
            _mode5.name = name;
          } else {
            _mode5 = new ExportMode("safe-reexport");
            _mode5.map = new Map([[name, id]]);
          }
        } else {
          // export { * as name }
          if (isNotAHarmonyModule && strictHarmonyModule) {
            _mode5 = new ExportMode("reexport-fake-namespace-object");
            _mode5.name = name;
          } else {
            _mode5 = new ExportMode("reexport-namespace-object");
            _mode5.name = name;
          }
        }

        _mode5.module = importedModule;
        return _mode5;
      }

      var hasUsedExports = Array.isArray(this.originModule.usedExports);
      var hasProvidedExports = Array.isArray(importedModule.buildMeta.providedExports);

      var activeFromOtherStarExports = this._discoverActiveExportsFromOtherStartExports(); // export *


      if (hasUsedExports) {
        // reexport * with known used exports
        if (hasProvidedExports) {
          var _map = new Map(this.originModule.usedExports.filter(function (id) {
            if (id === "default") return false;
            if (_this2.activeExports.has(id)) return false;
            if (activeFromOtherStarExports.has(id)) return false;
            if (!importedModule.buildMeta.providedExports.includes(id)) return false;
            return true;
          }).map(function (item) {
            return [item, item];
          }));

          if (_map.size === 0) {
            return EMPTY_STAR_MODE;
          }

          var _mode7 = new ExportMode("safe-reexport");

          _mode7.module = importedModule;
          _mode7.map = _map;
          return _mode7;
        }

        var map = new Map(this.originModule.usedExports.filter(function (id) {
          if (id === "default") return false;
          if (_this2.activeExports.has(id)) return false;
          if (activeFromOtherStarExports.has(id)) return false;
          return true;
        }).map(function (item) {
          return [item, item];
        }));

        if (map.size === 0) {
          return EMPTY_STAR_MODE;
        }

        var _mode6 = new ExportMode("checked-reexport");

        _mode6.module = importedModule;
        _mode6.map = map;
        return _mode6;
      }

      if (hasProvidedExports) {
        var _map2 = new Map(importedModule.buildMeta.providedExports.filter(function (id) {
          if (id === "default") return false;
          if (_this2.activeExports.has(id)) return false;
          if (activeFromOtherStarExports.has(id)) return false;
          return true;
        }).map(function (item) {
          return [item, item];
        }));

        if (_map2.size === 0) {
          return EMPTY_STAR_MODE;
        }

        var _mode8 = new ExportMode("safe-reexport");

        _mode8.module = importedModule;
        _mode8.map = _map2;
        return _mode8;
      }

      var mode = new ExportMode("dynamic-reexport");
      mode.module = importedModule;
      mode.ignored = new Set(["default"].concat(_toConsumableArray(this.activeExports), _toConsumableArray(activeFromOtherStarExports)));
      return mode;
    }
  }, {
    key: "getReference",
    value: function getReference() {
      var mode = this.getMode(false);

      switch (mode.type) {
        case "missing":
        case "unused":
        case "empty-star":
          return null;

        case "reexport-non-harmony-default":
        case "reexport-named-default":
          return new DependencyReference(mode.module, ["default"], false, this.sourceOrder);

        case "reexport-namespace-object":
        case "reexport-non-harmony-default-strict":
        case "reexport-fake-namespace-object":
        case "rexport-non-harmony-undefined":
          return new DependencyReference(mode.module, true, false, this.sourceOrder);

        case "safe-reexport":
        case "checked-reexport":
          return new DependencyReference(mode.module, Array.from(mode.map.values()), false, this.sourceOrder);

        case "dynamic-reexport":
          return new DependencyReference(mode.module, true, false, this.sourceOrder);

        default:
          throw new Error("Unknown mode ".concat(mode.type));
      }
    }
  }, {
    key: "_discoverActiveExportsFromOtherStartExports",
    value: function _discoverActiveExportsFromOtherStartExports() {
      if (!this.otherStarExports) return new Set();
      var result = new Set(); // try to learn impossible exports from other star exports with provided exports

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.otherStarExports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var otherStarExport = _step.value;
          var otherImportedModule = otherStarExport._module;

          if (otherImportedModule && Array.isArray(otherImportedModule.buildMeta.providedExports)) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = otherImportedModule.buildMeta.providedExports[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var exportName = _step2.value;
                result.add(exportName);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  }, {
    key: "getExports",
    value: function getExports() {
      var _this3 = this;

      if (this.name) {
        return {
          exports: [this.name],
          dependencies: undefined
        };
      }

      var importedModule = this._module;

      if (!importedModule) {
        // no imported module available
        return {
          exports: null,
          dependencies: undefined
        };
      }

      if (Array.isArray(importedModule.buildMeta.providedExports)) {
        var activeFromOtherStarExports = this._discoverActiveExportsFromOtherStartExports();

        return {
          exports: importedModule.buildMeta.providedExports.filter(function (id) {
            return id !== "default" && !activeFromOtherStarExports.has(id) && !_this3.activeExports.has(id);
          }),
          dependencies: [importedModule]
        };
      }

      if (importedModule.buildMeta.providedExports) {
        return {
          exports: true,
          dependencies: undefined
        };
      }

      return {
        exports: null,
        dependencies: [importedModule]
      };
    }
  }, {
    key: "getWarnings",
    value: function getWarnings() {
      if (this.strictExportPresence || this.originModule.buildMeta.strictHarmonyModule) {
        return [];
      }

      return this._getErrors();
    }
  }, {
    key: "getErrors",
    value: function getErrors() {
      if (this.strictExportPresence || this.originModule.buildMeta.strictHarmonyModule) {
        return this._getErrors();
      }

      return [];
    }
  }, {
    key: "_getErrors",
    value: function _getErrors() {
      var importedModule = this._module;

      if (!importedModule) {
        return;
      }

      if (!importedModule.buildMeta || !importedModule.buildMeta.exportsType) {
        // It's not an harmony module
        if (this.originModule.buildMeta.strictHarmonyModule && this._id && this._id !== "default") {
          // In strict harmony modules we only support the default export
          return [new HarmonyLinkingError("Can't reexport the named export '".concat(this._id, "' from non EcmaScript module (only default export is available)"))];
        }

        return;
      }

      if (!this._id) {
        return;
      }

      if (importedModule.isProvided(this._id) !== false) {
        // It's provided or we are not sure
        return;
      } // We are sure that it's not provided


      var idIsNotNameMessage = this._id !== this.name ? " (reexported as '".concat(this.name, "')") : "";
      var errorMessage = "\"export '".concat(this._id, "'").concat(idIsNotNameMessage, " was not found in '").concat(this.userRequest, "'");
      return [new HarmonyLinkingError(errorMessage)];
    }
  }, {
    key: "updateHash",
    value: function updateHash(hash) {
      _get(_getPrototypeOf(HarmonyExportImportedSpecifierDependency.prototype), "updateHash", this).call(this, hash);

      var hashValue = this.getHashValue(this._module);
      hash.update(hashValue);
    }
  }, {
    key: "getHashValue",
    value: function getHashValue(importedModule) {
      if (!importedModule) {
        return "";
      }

      var stringifiedUsedExport = JSON.stringify(importedModule.usedExports);
      var stringifiedProvidedExport = JSON.stringify(importedModule.buildMeta.providedExports);
      return importedModule.used + stringifiedUsedExport + stringifiedProvidedExport;
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      _get(_getPrototypeOf(HarmonyExportImportedSpecifierDependency.prototype), "disconnect", this).call(this);

      this.redirectedId = undefined;
    }
  }, {
    key: "type",
    get: function get() {
      return "harmony export imported specifier";
    }
  }, {
    key: "_id",
    get: function get() {
      return this.redirectedId || this.id;
    }
  }]);

  return HarmonyExportImportedSpecifierDependency;
}(HarmonyImportDependency);

module.exports = HarmonyExportImportedSpecifierDependency;

HarmonyExportImportedSpecifierDependency.Template =
/*#__PURE__*/
function (_HarmonyImportDepende2) {
  _inherits(HarmonyExportImportedSpecifierDependencyTemplate, _HarmonyImportDepende2);

  function HarmonyExportImportedSpecifierDependencyTemplate() {
    _classCallCheck(this, HarmonyExportImportedSpecifierDependencyTemplate);

    return _possibleConstructorReturn(this, _getPrototypeOf(HarmonyExportImportedSpecifierDependencyTemplate).apply(this, arguments));
  }

  _createClass(HarmonyExportImportedSpecifierDependencyTemplate, [{
    key: "harmonyInit",
    value: function harmonyInit(dep, source, runtime, dependencyTemplates) {
      _get(_getPrototypeOf(HarmonyExportImportedSpecifierDependencyTemplate.prototype), "harmonyInit", this).call(this, dep, source, runtime, dependencyTemplates);

      var content = this.getContent(dep);
      source.insert(-1, content);
    }
  }, {
    key: "getHarmonyInitOrder",
    value: function getHarmonyInitOrder(dep) {
      if (dep.name) {
        var used = dep.originModule.isUsed(dep.name);
        if (!used) return NaN;
      } else {
        var importedModule = dep._module;

        var activeFromOtherStarExports = dep._discoverActiveExportsFromOtherStartExports();

        if (Array.isArray(dep.originModule.usedExports)) {
          // we know which exports are used
          var unused = dep.originModule.usedExports.every(function (id) {
            if (id === "default") return true;
            if (dep.activeExports.has(id)) return true;
            if (importedModule.isProvided(id) === false) return true;
            if (activeFromOtherStarExports.has(id)) return true;
            return false;
          });
          if (unused) return NaN;
        } else if (dep.originModule.usedExports && importedModule && Array.isArray(importedModule.buildMeta.providedExports)) {
          // not sure which exports are used, but we know which are provided
          var _unused = importedModule.buildMeta.providedExports.every(function (id) {
            if (id === "default") return true;
            if (dep.activeExports.has(id)) return true;
            if (activeFromOtherStarExports.has(id)) return true;
            return false;
          });

          if (_unused) return NaN;
        }
      }

      return _get(_getPrototypeOf(HarmonyExportImportedSpecifierDependencyTemplate.prototype), "getHarmonyInitOrder", this).call(this, dep);
    }
  }, {
    key: "getContent",
    value: function getContent(dep) {
      var _this4 = this;

      var mode = dep.getMode(false);
      var module = dep.originModule;
      var importedModule = dep._module;
      var importVar = dep.getImportVar();

      switch (mode.type) {
        case "missing":
          return "throw new Error(".concat(JSON.stringify("Cannot find module '".concat(mode.userRequest, "'")), ");\n");

        case "unused":
          return "".concat(Template.toNormalComment("unused harmony reexport ".concat(mode.name)), "\n");

        case "reexport-non-harmony-default":
          return "/* harmony reexport (default from non-harmony) */ " + this.getReexportStatement(module, module.isUsed(mode.name), importVar, null);

        case "reexport-named-default":
          return "/* harmony reexport (default from named exports) */ " + this.getReexportStatement(module, module.isUsed(mode.name), importVar, "");

        case "reexport-fake-namespace-object":
          return "/* harmony reexport (fake namespace object from non-harmony) */ " + this.getReexportFakeNamespaceObjectStatement(module, module.isUsed(mode.name), importVar);

        case "rexport-non-harmony-undefined":
          return "/* harmony reexport (non default export from non-harmony) */ " + this.getReexportStatement(module, module.isUsed(mode.name), "undefined", "");

        case "reexport-non-harmony-default-strict":
          return "/* harmony reexport (default from non-harmony) */ " + this.getReexportStatement(module, module.isUsed(mode.name), importVar, "");

        case "reexport-namespace-object":
          return "/* harmony reexport (module object) */ " + this.getReexportStatement(module, module.isUsed(mode.name), importVar, "");

        case "empty-star":
          return "/* empty/unused harmony star reexport */";

        case "safe-reexport":
          return Array.from(mode.map.entries()).map(function (item) {
            return "/* harmony reexport (safe) */ " + _this4.getReexportStatement(module, module.isUsed(item[0]), importVar, importedModule.isUsed(item[1])) + "\n";
          }).join("");

        case "checked-reexport":
          return Array.from(mode.map.entries()).map(function (item) {
            return "/* harmony reexport (checked) */ " + _this4.getConditionalReexportStatement(module, item[0], importVar, item[1]) + "\n";
          }).join("");

        case "dynamic-reexport":
          {
            var ignoredExports = mode.ignored;
            var content = "/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in " + importVar + ") "; // Filter out exports which are defined by other exports
            // and filter out default export because it cannot be reexported with *

            if (ignoredExports.size > 0) {
              content += "if(" + JSON.stringify(Array.from(ignoredExports)) + ".indexOf(__WEBPACK_IMPORT_KEY__) < 0) ";
            } else {
              content += "if(__WEBPACK_IMPORT_KEY__ !== 'default') ";
            }

            var exportsName = dep.originModule.exportsArgument;
            return content + "(function(key) { __webpack_require__.d(".concat(exportsName, ", key, function() { return ").concat(importVar, "[key]; }) }(__WEBPACK_IMPORT_KEY__));\n");
          }

        default:
          throw new Error("Unknown mode ".concat(mode.type));
      }
    }
  }, {
    key: "getReexportStatement",
    value: function getReexportStatement(module, key, name, valueKey) {
      var exportsName = module.exportsArgument;
      var returnValue = this.getReturnValue(name, valueKey);
      return "__webpack_require__.d(".concat(exportsName, ", ").concat(JSON.stringify(key), ", function() { return ").concat(returnValue, "; });\n");
    }
  }, {
    key: "getReexportFakeNamespaceObjectStatement",
    value: function getReexportFakeNamespaceObjectStatement(module, key, name) {
      var exportsName = module.exportsArgument;
      return "__webpack_require__.d(".concat(exportsName, ", ").concat(JSON.stringify(key), ", function() { return __webpack_require__.t(").concat(name, "); });\n");
    }
  }, {
    key: "getConditionalReexportStatement",
    value: function getConditionalReexportStatement(module, key, name, valueKey) {
      if (valueKey === false) {
        return "/* unused export */\n";
      }

      var exportsName = module.exportsArgument;
      var returnValue = this.getReturnValue(name, valueKey);
      return "if(__webpack_require__.o(".concat(name, ", ").concat(JSON.stringify(valueKey), ")) __webpack_require__.d(").concat(exportsName, ", ").concat(JSON.stringify(key), ", function() { return ").concat(returnValue, "; });\n");
    }
  }, {
    key: "getReturnValue",
    value: function getReturnValue(name, valueKey) {
      if (valueKey === null) {
        return "".concat(name, "_default.a");
      }

      if (valueKey === "") {
        return name;
      }

      if (valueKey === false) {
        return "/* unused export */ undefined";
      }

      return "".concat(name, "[").concat(JSON.stringify(valueKey), "]");
    }
  }]);

  return HarmonyExportImportedSpecifierDependencyTemplate;
}(HarmonyImportDependency.Template);