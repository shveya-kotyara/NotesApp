/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LoaderDependency = require("./LoaderDependency");

var NormalModule = require("../NormalModule");
/** @typedef {import("../Module")} Module */

/**
 * @callback LoadModuleCallback
 * @param {Error=} err error object
 * @param {string=} source source code
 * @param {object=} map source map
 * @param {Module=} module loaded module if successful
 */


var LoaderPlugin =
/*#__PURE__*/
function () {
  function LoaderPlugin() {
    _classCallCheck(this, LoaderPlugin);
  }

  _createClass(LoaderPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.hooks.compilation.tap("LoaderPlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;
        compilation.dependencyFactories.set(LoaderDependency, normalModuleFactory);
      });
      compiler.hooks.compilation.tap("LoaderPlugin", function (compilation) {
        compilation.hooks.normalModuleLoader.tap("LoaderPlugin", function (loaderContext, module) {
          /**
           * @param {string} request the request string to load the module from
           * @param {LoadModuleCallback} callback callback returning the loaded module or error
           * @returns {void}
           */
          loaderContext.loadModule = function (request, callback) {
            var dep = new LoaderDependency(request);
            dep.loc = {
              name: request
            };
            var factory = compilation.dependencyFactories.get(dep.constructor);

            if (factory === undefined) {
              return callback(new Error("No module factory available for dependency type: ".concat(dep.constructor.name)));
            }

            compilation.semaphore.release();
            compilation.addModuleDependencies(module, [{
              factory: factory,
              dependencies: [dep]
            }], true, "lm", true, function (err) {
              compilation.semaphore.acquire(function () {
                if (err) {
                  return callback(err);
                }

                if (!dep.module) {
                  return callback(new Error("Cannot load the module"));
                } // TODO consider removing this in webpack 5


                if (dep.module instanceof NormalModule && dep.module.error) {
                  return callback(dep.module.error);
                }

                if (!dep.module._source) {
                  throw new Error("The module created for a LoaderDependency must have a property _source");
                }

                var source, map;
                var moduleSource = dep.module._source;

                if (moduleSource.sourceAndMap) {
                  var sourceAndMap = moduleSource.sourceAndMap();
                  map = sourceAndMap.map;
                  source = sourceAndMap.source;
                } else {
                  map = moduleSource.map();
                  source = moduleSource.source();
                }

                if (dep.module.buildInfo.fileDependencies) {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = dep.module.buildInfo.fileDependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var d = _step.value;
                      loaderContext.addDependency(d);
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                        _iterator["return"]();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                }

                if (dep.module.buildInfo.contextDependencies) {
                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = undefined;

                  try {
                    for (var _iterator2 = dep.module.buildInfo.contextDependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var _d = _step2.value;
                      loaderContext.addContextDependency(_d);
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                        _iterator2["return"]();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }
                }

                return callback(null, source, map, dep.module);
              });
            });
          };
        });
      });
    }
  }]);

  return LoaderPlugin;
}();

module.exports = LoaderPlugin;