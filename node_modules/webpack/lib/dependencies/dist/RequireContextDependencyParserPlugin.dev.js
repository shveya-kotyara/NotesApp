/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RequireContextDependency = require("./RequireContextDependency");

module.exports =
/*#__PURE__*/
function () {
  function RequireContextDependencyParserPlugin() {
    _classCallCheck(this, RequireContextDependencyParserPlugin);
  }

  _createClass(RequireContextDependencyParserPlugin, [{
    key: "apply",
    value: function apply(parser) {
      parser.hooks.call["for"]("require.context").tap("RequireContextDependencyParserPlugin", function (expr) {
        var regExp = /^\.\/.*$/;
        var recursive = true;
        var mode = "sync";

        switch (expr.arguments.length) {
          case 4:
            {
              var modeExpr = parser.evaluateExpression(expr.arguments[3]);
              if (!modeExpr.isString()) return;
              mode = modeExpr.string;
            }
          // falls through

          case 3:
            {
              var regExpExpr = parser.evaluateExpression(expr.arguments[2]);
              if (!regExpExpr.isRegExp()) return;
              regExp = regExpExpr.regExp;
            }
          // falls through

          case 2:
            {
              var recursiveExpr = parser.evaluateExpression(expr.arguments[1]);
              if (!recursiveExpr.isBoolean()) return;
              recursive = recursiveExpr.bool;
            }
          // falls through

          case 1:
            {
              var requestExpr = parser.evaluateExpression(expr.arguments[0]);
              if (!requestExpr.isString()) return;
              var dep = new RequireContextDependency({
                request: requestExpr.string,
                recursive: recursive,
                regExp: regExp,
                mode: mode
              }, expr.range);
              dep.loc = expr.loc;
              dep.optional = parser.scope.inTry;
              parser.state.current.addDependency(dep);
              return true;
            }
        }
      });
    }
  }]);

  return RequireContextDependencyParserPlugin;
}();