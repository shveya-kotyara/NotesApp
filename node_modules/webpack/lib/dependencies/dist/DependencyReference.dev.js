/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Florent Cailhol @ooflorent
*/
"use strict";
/** @typedef {import("../Module")} Module */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DependencyReference =
/*#__PURE__*/
function () {
  // TODO webpack 5: module must be dynamic, you must pass a function returning a module
  // This is needed to remove the hack in ConcatenatedModule
  // The problem is that the `module` in Dependency could be replaced i. e. because of Scope Hoisting

  /**
   *
   * @param {Module} module the referenced module
   * @param {string[] | boolean} importedNames imported named from the module
   * @param {boolean=} weak if this is a weak reference
   * @param {number} order the order information or NaN if don't care
   */
  function DependencyReference(module, importedNames) {
    var weak = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NaN;

    _classCallCheck(this, DependencyReference);

    // TODO webpack 5: make it a getter
    this.module = module; // true: full object
    // false: only sideeffects/no export
    // array of strings: the exports with this names

    this.importedNames = importedNames;
    this.weak = !!weak;
    this.order = order;
  }
  /**
   * @param {DependencyReference[]} array an array (will be modified)
   * @returns {DependencyReference[]} the array again
   */


  _createClass(DependencyReference, null, [{
    key: "sort",
    value: function sort(array) {
      /** @type {WeakMap<DependencyReference, number>} */
      var originalOrder = new WeakMap();
      var i = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var ref = _step.value;
          originalOrder.set(ref, i++);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return array.sort(function (a, b) {
        var aOrder = a.order;
        var bOrder = b.order;

        if (isNaN(aOrder)) {
          if (!isNaN(bOrder)) {
            return 1;
          }
        } else {
          if (isNaN(bOrder)) {
            return -1;
          }

          if (aOrder !== bOrder) {
            return aOrder - bOrder;
          }
        }

        var aOrg = originalOrder.get(a);
        var bOrg = originalOrder.get(b);
        return aOrg - bOrg;
      });
    }
  }]);

  return DependencyReference;
}();

module.exports = DependencyReference;