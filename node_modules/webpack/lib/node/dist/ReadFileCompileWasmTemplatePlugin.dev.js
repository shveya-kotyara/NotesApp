/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Template = require("../Template");

var WasmMainTemplatePlugin = require("../wasm/WasmMainTemplatePlugin");

var ReadFileCompileWasmTemplatePlugin =
/*#__PURE__*/
function () {
  function ReadFileCompileWasmTemplatePlugin(options) {
    _classCallCheck(this, ReadFileCompileWasmTemplatePlugin);

    this.options = options || {};
  }

  _createClass(ReadFileCompileWasmTemplatePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      compiler.hooks.thisCompilation.tap("ReadFileCompileWasmTemplatePlugin", function (compilation) {
        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {
          return Template.asString(["new Promise(function (resolve, reject) {", Template.indent(["var { readFile } = require('fs');", "var { join } = require('path');", "", "try {", Template.indent(["readFile(join(__dirname, ".concat(path, "), function(err, buffer){"), Template.indent(["if (err) return reject(err);", "", "// Fake fetch response", "resolve({", Template.indent(["arrayBuffer() { return Promise.resolve(buffer); }"]), "});"]), "});"]), "} catch (err) { reject(err); }"]), "})"]);
        };

        var plugin = new WasmMainTemplatePlugin(Object.assign({
          generateLoadBinaryCode: generateLoadBinaryCode,
          supportsStreaming: false
        }, _this.options));
        plugin.apply(compilation.mainTemplate);
      });
    }
  }]);

  return ReadFileCompileWasmTemplatePlugin;
}();

module.exports = ReadFileCompileWasmTemplatePlugin;