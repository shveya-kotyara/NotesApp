/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AliasPlugin = require("enhanced-resolve/lib/AliasPlugin");

var ParserHelpers = require("../ParserHelpers");

var nodeLibsBrowser = require("node-libs-browser");

module.exports =
/*#__PURE__*/
function () {
  function NodeSourcePlugin(options) {
    _classCallCheck(this, NodeSourcePlugin);

    this.options = options;
  }

  _createClass(NodeSourcePlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var options = this.options;

      if (options === false) {
        // allow single kill switch to turn off this plugin
        return;
      }

      var getPathToModule = function getPathToModule(module, type) {
        if (type === true || type === undefined && nodeLibsBrowser[module]) {
          if (!nodeLibsBrowser[module]) {
            throw new Error("No browser version for node.js core module ".concat(module, " available"));
          }

          return nodeLibsBrowser[module];
        } else if (type === "mock") {
          return require.resolve("node-libs-browser/mock/".concat(module));
        } else if (type === "empty") {
          return require.resolve("node-libs-browser/mock/empty");
        } else {
          return module;
        }
      };

      var addExpression = function addExpression(parser, name, module, type, suffix) {
        suffix = suffix || "";
        parser.hooks.expression["for"](name).tap("NodeSourcePlugin", function () {
          if (parser.state.module && parser.state.module.resource === getPathToModule(module, type)) return;
          var mockModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, getPathToModule(module, type));
          return ParserHelpers.addParsedVariableToModule(parser, name, mockModule + suffix);
        });
      };

      compiler.hooks.compilation.tap("NodeSourcePlugin", function (compilation, _ref) {
        var normalModuleFactory = _ref.normalModuleFactory;

        var handler = function handler(parser, parserOptions) {
          if (parserOptions.node === false) return;
          var localOptions = options;

          if (parserOptions.node) {
            localOptions = Object.assign({}, localOptions, parserOptions.node);
          }

          if (localOptions.global) {
            parser.hooks.expression["for"]("global").tap("NodeSourcePlugin", function () {
              var retrieveGlobalModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, require.resolve("../../buildin/global"));
              return ParserHelpers.addParsedVariableToModule(parser, "global", retrieveGlobalModule);
            });
          }

          if (localOptions.process) {
            var processType = localOptions.process;
            addExpression(parser, "process", "process", processType);
          }

          if (localOptions.console) {
            var consoleType = localOptions.console;
            addExpression(parser, "console", "console", consoleType);
          }

          var bufferType = localOptions.Buffer;

          if (bufferType) {
            addExpression(parser, "Buffer", "buffer", bufferType, ".Buffer");
          }

          if (localOptions.setImmediate) {
            var setImmediateType = localOptions.setImmediate;
            addExpression(parser, "setImmediate", "timers", setImmediateType, ".setImmediate");
            addExpression(parser, "clearImmediate", "timers", setImmediateType, ".clearImmediate");
          }
        };

        normalModuleFactory.hooks.parser["for"]("javascript/auto").tap("NodeSourcePlugin", handler);
        normalModuleFactory.hooks.parser["for"]("javascript/dynamic").tap("NodeSourcePlugin", handler);
      });
      compiler.hooks.afterResolvers.tap("NodeSourcePlugin", function (compiler) {
        var _loop = function _loop() {
          var lib = _Object$keys[_i];

          if (options[lib] !== false) {
            compiler.resolverFactory.hooks.resolver["for"]("normal").tap("NodeSourcePlugin", function (resolver) {
              new AliasPlugin("described-resolve", {
                name: lib,
                onlyModule: true,
                alias: getPathToModule(lib, options[lib])
              }, "resolve").apply(resolver);
            });
          }
        };

        for (var _i = 0, _Object$keys = Object.keys(nodeLibsBrowser); _i < _Object$keys.length; _i++) {
          _loop();
        }
      });
    }
  }]);

  return NodeSourcePlugin;
}();