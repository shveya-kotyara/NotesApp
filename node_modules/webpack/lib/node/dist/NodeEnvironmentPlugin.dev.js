/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NodeWatchFileSystem = require("./NodeWatchFileSystem");

var NodeOutputFileSystem = require("./NodeOutputFileSystem");

var NodeJsInputFileSystem = require("enhanced-resolve/lib/NodeJsInputFileSystem");

var CachedInputFileSystem = require("enhanced-resolve/lib/CachedInputFileSystem");

var createConsoleLogger = require("../logging/createConsoleLogger");

var nodeConsole = require("./nodeConsole");

var NodeEnvironmentPlugin =
/*#__PURE__*/
function () {
  function NodeEnvironmentPlugin(options) {
    _classCallCheck(this, NodeEnvironmentPlugin);

    this.options = options || {};
  }

  _createClass(NodeEnvironmentPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      compiler.infrastructureLogger = createConsoleLogger(Object.assign({
        level: "info",
        debug: false,
        console: nodeConsole
      }, this.options.infrastructureLogging));
      compiler.inputFileSystem = new CachedInputFileSystem(new NodeJsInputFileSystem(), 60000);
      var inputFileSystem = compiler.inputFileSystem;
      compiler.outputFileSystem = new NodeOutputFileSystem();
      compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);
      compiler.hooks.beforeRun.tap("NodeEnvironmentPlugin", function (compiler) {
        if (compiler.inputFileSystem === inputFileSystem) inputFileSystem.purge();
      });
    }
  }]);

  return NodeEnvironmentPlugin;
}();

module.exports = NodeEnvironmentPlugin;