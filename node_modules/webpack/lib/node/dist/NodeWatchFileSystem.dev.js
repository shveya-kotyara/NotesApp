/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Watchpack = require("watchpack");

var objectToMap = require("../util/objectToMap");

var NodeWatchFileSystem =
/*#__PURE__*/
function () {
  function NodeWatchFileSystem(inputFileSystem) {
    _classCallCheck(this, NodeWatchFileSystem);

    this.inputFileSystem = inputFileSystem;
    this.watcherOptions = {
      aggregateTimeout: 0
    };
    this.watcher = new Watchpack(this.watcherOptions);
  }

  _createClass(NodeWatchFileSystem, [{
    key: "watch",
    value: function watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {
      var _this = this;

      if (!Array.isArray(files)) {
        throw new Error("Invalid arguments: 'files'");
      }

      if (!Array.isArray(dirs)) {
        throw new Error("Invalid arguments: 'dirs'");
      }

      if (!Array.isArray(missing)) {
        throw new Error("Invalid arguments: 'missing'");
      }

      if (typeof callback !== "function") {
        throw new Error("Invalid arguments: 'callback'");
      }

      if (typeof startTime !== "number" && startTime) {
        throw new Error("Invalid arguments: 'startTime'");
      }

      if (_typeof(options) !== "object") {
        throw new Error("Invalid arguments: 'options'");
      }

      if (typeof callbackUndelayed !== "function" && callbackUndelayed) {
        throw new Error("Invalid arguments: 'callbackUndelayed'");
      }

      var oldWatcher = this.watcher;
      this.watcher = new Watchpack(options);

      if (callbackUndelayed) {
        this.watcher.once("change", callbackUndelayed);
      }

      var cachedFiles = files;
      var cachedDirs = dirs;
      this.watcher.once("aggregated", function (changes, removals) {
        changes = changes.concat(removals);

        if (_this.inputFileSystem && _this.inputFileSystem.purge) {
          _this.inputFileSystem.purge(changes);
        }

        var times = objectToMap(_this.watcher.getTimes());
        files = new Set(files);
        dirs = new Set(dirs);
        missing = new Set(missing);
        removals = new Set(removals.filter(function (file) {
          return files.has(file);
        }));
        callback(null, changes.filter(function (file) {
          return files.has(file);
        }).sort(), changes.filter(function (file) {
          return dirs.has(file);
        }).sort(), changes.filter(function (file) {
          return missing.has(file);
        }).sort(), times, times, removals);
      });
      this.watcher.watch(cachedFiles.concat(missing), cachedDirs.concat(missing), startTime);

      if (oldWatcher) {
        oldWatcher.close();
      }

      return {
        close: function close() {
          if (_this.watcher) {
            _this.watcher.close();

            _this.watcher = null;
          }
        },
        pause: function pause() {
          if (_this.watcher) {
            _this.watcher.pause();
          }
        },
        getFileTimestamps: function getFileTimestamps() {
          if (_this.watcher) {
            return objectToMap(_this.watcher.getTimes());
          } else {
            return new Map();
          }
        },
        getContextTimestamps: function getContextTimestamps() {
          if (_this.watcher) {
            return objectToMap(_this.watcher.getTimes());
          } else {
            return new Map();
          }
        }
      };
    }
  }]);

  return NodeWatchFileSystem;
}();

module.exports = NodeWatchFileSystem;