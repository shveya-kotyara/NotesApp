"use strict";

var errorMessage = function errorMessage(schema, data, message) {
  return {
    keyword: "absolutePath",
    params: {
      absolutePath: data
    },
    message: message,
    parentSchema: schema
  };
};

var getErrorFor = function getErrorFor(shouldBeAbsolute, data, schema) {
  var message = shouldBeAbsolute ? "The provided value ".concat(JSON.stringify(data), " is not an absolute path!") : "A relative path is expected. However, the provided value ".concat(JSON.stringify(data), " is an absolute path!");
  return errorMessage(schema, data, message);
};

module.exports = function (ajv) {
  return ajv.addKeyword("absolutePath", {
    errors: true,
    type: "string",
    compile: function compile(expected, schema) {
      function callback(data) {
        var passes = true;
        var isExclamationMarkPresent = data.includes("!");

        if (isExclamationMarkPresent) {
          callback.errors = [errorMessage(schema, data, "The provided value ".concat(JSON.stringify(data), " contains exclamation mark (!) which is not allowed because it's reserved for loader syntax."))];
          passes = false;
        } // ?:[A-Za-z]:\\ - Windows absolute path
        // \\\\ - Windows network absolute path
        // \/ - Unix-like OS absolute path


        var isCorrectAbsolutePath = expected === /^(?:[A-Za-z]:\\|\\\\|\/)/.test(data);

        if (!isCorrectAbsolutePath) {
          callback.errors = [getErrorFor(expected, data, schema)];
          passes = false;
        }

        return passes;
      }

      callback.errors = [];
      return callback;
    }
  });
};