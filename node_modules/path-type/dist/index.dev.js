'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var fs = require('fs');

var pify = require('pify');

function type(fn, fn2, fp) {
  if (typeof fp !== 'string') {
    return Promise.reject(new TypeError("Expected a string, got ".concat(_typeof(fp))));
  }

  return pify(fs[fn])(fp).then(function (stats) {
    return stats[fn2]();
  })["catch"](function (err) {
    if (err.code === 'ENOENT') {
      return false;
    }

    throw err;
  });
}

function typeSync(fn, fn2, fp) {
  if (typeof fp !== 'string') {
    throw new TypeError("Expected a string, got ".concat(_typeof(fp)));
  }

  try {
    return fs[fn](fp)[fn2]();
  } catch (err) {
    if (err.code === 'ENOENT') {
      return false;
    }

    throw err;
  }
}

exports.file = type.bind(null, 'stat', 'isFile');
exports.dir = type.bind(null, 'stat', 'isDirectory');
exports.symlink = type.bind(null, 'lstat', 'isSymbolicLink');
exports.fileSync = typeSync.bind(null, 'statSync', 'isFile');
exports.dirSync = typeSync.bind(null, 'statSync', 'isDirectory');
exports.symlinkSync = typeSync.bind(null, 'lstatSync', 'isSymbolicLink');