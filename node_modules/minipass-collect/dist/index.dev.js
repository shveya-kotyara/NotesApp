"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Minipass = require('minipass');

var _data = Symbol('_data');

var _length = Symbol('_length');

var Collect =
/*#__PURE__*/
function (_Minipass) {
  _inherits(Collect, _Minipass);

  function Collect(options) {
    var _this;

    _classCallCheck(this, Collect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Collect).call(this, options));
    _this[_data] = [];
    _this[_length] = 0;
    return _this;
  }

  _createClass(Collect, [{
    key: "write",
    value: function write(chunk, encoding, cb) {
      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';
      if (!encoding) encoding = 'utf8';
      var c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);

      this[_data].push(c);

      this[_length] += c.length;
      if (cb) cb();
      return true;
    }
  }, {
    key: "end",
    value: function end(chunk, encoding, cb) {
      if (typeof chunk === 'function') cb = chunk, chunk = null;
      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';
      if (chunk) this.write(chunk, encoding);
      var result = Buffer.concat(this[_data], this[_length]);

      _get(_getPrototypeOf(Collect.prototype), "write", this).call(this, result);

      return _get(_getPrototypeOf(Collect.prototype), "end", this).call(this, cb);
    }
  }]);

  return Collect;
}(Minipass);

module.exports = Collect; // it would be possible to DRY this a bit by doing something like
// this.collector = new Collect() and listening on its data event,
// but it's not much code, and we may as well save the extra obj

var CollectPassThrough =
/*#__PURE__*/
function (_Minipass2) {
  _inherits(CollectPassThrough, _Minipass2);

  function CollectPassThrough(options) {
    var _this2;

    _classCallCheck(this, CollectPassThrough);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CollectPassThrough).call(this, options));
    _this2[_data] = [];
    _this2[_length] = 0;
    return _this2;
  }

  _createClass(CollectPassThrough, [{
    key: "write",
    value: function write(chunk, encoding, cb) {
      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';
      if (!encoding) encoding = 'utf8';
      var c = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);

      this[_data].push(c);

      this[_length] += c.length;
      return _get(_getPrototypeOf(CollectPassThrough.prototype), "write", this).call(this, chunk, encoding, cb);
    }
  }, {
    key: "end",
    value: function end(chunk, encoding, cb) {
      if (typeof chunk === 'function') cb = chunk, chunk = null;
      if (typeof encoding === 'function') cb = encoding, encoding = 'utf8';
      if (chunk) this.write(chunk, encoding);
      var result = Buffer.concat(this[_data], this[_length]);
      this.emit('collect', result);
      return _get(_getPrototypeOf(CollectPassThrough.prototype), "end", this).call(this, cb);
    }
  }]);

  return CollectPassThrough;
}(Minipass);

module.exports.PassThrough = CollectPassThrough;