'use strict';

var fs = require('fs');

var stream = require('stream');

var zlib = require('zlib');

var duplexer = require('duplexer');

var pify = require('pify');

var getOptions = function getOptions(options) {
  return Object.assign({
    level: 9
  }, options);
};

module.exports = function (input, options) {
  if (!input) {
    return Promise.resolve(0);
  }

  return pify(zlib.gzip)(input, getOptions(options)).then(function (data) {
    return data.length;
  })["catch"](function (_) {
    return 0;
  });
};

module.exports.sync = function (input, options) {
  return zlib.gzipSync(input, getOptions(options)).length;
};

module.exports.stream = function (options) {
  var input = new stream.PassThrough();
  var output = new stream.PassThrough();
  var wrapper = duplexer(input, output);
  var gzipSize = 0;
  var gzip = zlib.createGzip(getOptions(options)).on('data', function (buf) {
    gzipSize += buf.length;
  }).on('error', function () {
    wrapper.gzipSize = 0;
  }).on('end', function () {
    wrapper.gzipSize = gzipSize;
    wrapper.emit('gzip-size', gzipSize);
    output.end();
  });
  input.pipe(gzip);
  input.pipe(output, {
    end: false
  });
  return wrapper;
};

module.exports.file = function (path, options) {
  return new Promise(function (resolve, reject) {
    var stream = fs.createReadStream(path);
    stream.on('error', reject);
    var gzipStream = stream.pipe(module.exports.stream(options));
    gzipStream.on('error', reject);
    gzipStream.on('gzip-size', resolve);
  });
};

module.exports.fileSync = function (path, options) {
  return module.exports.sync(fs.readFileSync(path), options);
};