'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _postcss = require('postcss');

var _postcssValueParser = require('postcss-value-parser');

var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);

var _cssnanoUtilGetArguments = require('cssnano-util-get-arguments');

var _cssnanoUtilGetArguments2 = _interopRequireDefault(_cssnanoUtilGetArguments);

var _has = require('has');

var _has2 = _interopRequireDefault(_has);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var directions = ['top', 'right', 'bottom', 'left', 'center'];
var center = '50%';
var horizontal = {
  right: '100%',
  left: '0'
};
var vertical = {
  bottom: '100%',
  top: '0'
};

function transform(value) {
  var parsed = (0, _postcssValueParser2["default"])(value);
  var args = (0, _cssnanoUtilGetArguments2["default"])(parsed);
  var relevant = [];
  args.forEach(function (arg) {
    relevant.push({
      start: null,
      end: null
    });
    arg.forEach(function (part, index) {
      var isPosition = ~directions.indexOf(part.value.toLowerCase()) || (0, _postcssValueParser.unit)(part.value);
      var len = relevant.length - 1;

      if (relevant[len].start === null && isPosition) {
        relevant[len].start = index;
        relevant[len].end = index;
        return;
      }

      if (relevant[len].start !== null) {
        if (part.type === 'space') {
          return;
        } else if (isPosition) {
          relevant[len].end = index;
          return;
        }

        return;
      }
    });
  });
  relevant.forEach(function (range, index) {
    if (range.start === null) {
      return;
    }

    var position = args[index].slice(range.start, range.end + 1);

    if (position.length > 3) {
      return;
    }

    var firstValue = position[0].value.toLowerCase();
    var secondValue = position[2] && position[2].value ? position[2].value.toLowerCase() : null;

    if (position.length === 1 || secondValue === 'center') {
      if (secondValue) {
        position[2].value = position[1].value = '';
      }

      var map = Object.assign({}, horizontal, {
        center: center
      });

      if ((0, _has2["default"])(map, firstValue)) {
        position[0].value = map[firstValue];
      }

      return;
    }

    if (firstValue === 'center' && ~directions.indexOf(secondValue)) {
      position[0].value = position[1].value = '';

      if ((0, _has2["default"])(horizontal, secondValue)) {
        position[2].value = horizontal[secondValue];
      }

      return;
    }

    if ((0, _has2["default"])(horizontal, firstValue) && (0, _has2["default"])(vertical, secondValue)) {
      position[0].value = horizontal[firstValue];
      position[2].value = vertical[secondValue];
      return;
    } else if ((0, _has2["default"])(vertical, firstValue) && (0, _has2["default"])(horizontal, secondValue)) {
      position[0].value = horizontal[secondValue];
      position[2].value = vertical[firstValue];
      return;
    }
  });
  return parsed.toString();
}

exports["default"] = (0, _postcss.plugin)('postcss-normalize-positions', function () {
  return function (css) {
    var cache = {};
    css.walkDecls(/^(background(-position)?|(-webkit-)?perspective-origin)$/i, function (decl) {
      var value = decl.value;

      if (cache[value]) {
        decl.value = cache[value];
        return;
      }

      var result = transform(value);
      decl.value = result;
      cache[value] = result;
    });
  };
});
module.exports = exports['default'];