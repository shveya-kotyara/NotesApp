'use strict';

var concat = require('../utils').concat;

function isRelative(module) {
  return module.startsWith('./') || module.startsWith('../');
}

function formatFileList(files) {
  var length = files.length;
  if (!length) return '';
  return " in ".concat(files[0]).concat(files[1] ? ", ".concat(files[1]) : '').concat(length > 2 ? " and ".concat(length - 2, " other").concat(length === 3 ? '' : 's') : '');
}

function formatGroup(group) {
  var files = group.errors.map(function (e) {
    return e.file;
  }).filter(Boolean);
  return "* ".concat(group.module).concat(formatFileList(files));
}

function forgetToInstall(missingDependencies) {
  var moduleNames = missingDependencies.map(function (missingDependency) {
    return missingDependency.module;
  });

  if (missingDependencies.length === 1) {
    return "To install it, you can run: npm install --save ".concat(moduleNames.join(' '));
  }

  return "To install them, you can run: npm install --save ".concat(moduleNames.join(' '));
}

function dependenciesNotFound(dependencies) {
  if (dependencies.length === 0) return;
  return concat(dependencies.length === 1 ? 'This dependency was not found:' : 'These dependencies were not found:', '', dependencies.map(formatGroup), '', forgetToInstall(dependencies));
}

function relativeModulesNotFound(modules) {
  if (modules.length === 0) return;
  return concat(modules.length === 1 ? 'This relative module was not found:' : 'These relative modules were not found:', '', modules.map(formatGroup));
}

function groupModules(errors) {
  var missingModule = new Map();
  errors.forEach(function (error) {
    if (!missingModule.has(error.module)) {
      missingModule.set(error.module, []);
    }

    missingModule.get(error.module).push(error);
  });
  return Array.from(missingModule.keys()).map(function (module) {
    return {
      module: module,
      relative: isRelative(module),
      errors: missingModule.get(module)
    };
  });
}

function formatErrors(errors) {
  if (errors.length === 0) {
    return [];
  }

  var groups = groupModules(errors);
  var dependencies = groups.filter(function (group) {
    return !group.relative;
  });
  var relativeModules = groups.filter(function (group) {
    return group.relative;
  });
  return concat(dependenciesNotFound(dependencies), dependencies.length && relativeModules.length ? ['', ''] : null, relativeModulesNotFound(relativeModules));
}

function format(errors) {
  return formatErrors(errors.filter(function (e) {
    return e.type === 'module-not-found';
  }));
}

module.exports = format;