'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var colors = require('./utils/colors');

var chalk = require('chalk');

var stringWidth = require('string-width');

var readline = require('readline');

var Debugger =
/*#__PURE__*/
function () {
  function Debugger() {
    _classCallCheck(this, Debugger);

    this.enabled = true;
    this.capturing = false;
    this.capturedMessages = [];
  }

  _createClass(Debugger, [{
    key: "enable",
    value: function enable() {
      this.enabled = true;
    }
  }, {
    key: "capture",
    value: function capture() {
      this.enabled = true;
      this.capturing = true;
    }
  }, {
    key: "endCapture",
    value: function endCapture() {
      this.enabled = false;
      this.capturing = false;
      this.capturedMessages = [];
    }
  }, {
    key: "log",
    value: function log() {
      if (this.enabled) {
        this.captureConsole(Array.from(arguments), console.log);
      }
    }
  }, {
    key: "info",
    value: function info(message) {
      if (this.enabled) {
        var titleFormatted = colors.formatTitle('info', 'I');
        this.log(titleFormatted, message);
      }
    }
  }, {
    key: "note",
    value: function note(message) {
      if (this.enabled) {
        var titleFormatted = colors.formatTitle('note', 'N');
        this.log(titleFormatted, message);
      }
    }
  }, {
    key: "title",
    value: function title(severity, _title, subtitle) {
      if (this.enabled) {
        var date = new Date();
        var dateString = chalk.grey(date.toLocaleTimeString());
        var titleFormatted = colors.formatTitle(severity, _title);
        var subTitleFormatted = colors.formatText(severity, subtitle);
        var message = "".concat(titleFormatted, " ").concat(subTitleFormatted); // In test environment we don't include timestamp

        if (process.env.NODE_ENV === 'test') {
          this.log(message);
          this.log();
          return;
        } // Make timestamp appear at the end of the line


        var logSpace = process.stdout.columns - stringWidth(message) - stringWidth(dateString);

        if (logSpace <= 0) {
          logSpace = 10;
        }

        this.log("".concat(message).concat(' '.repeat(logSpace)).concat(dateString));
        this.log();
      }
    }
  }, {
    key: "clearConsole",
    value: function clearConsole() {
      if (!this.capturing && this.enabled && process.stdout.isTTY) {
        // Fill screen with blank lines. Then move to 0 (beginning of visible part) and clear it
        var blank = '\n'.repeat(process.stdout.rows);
        console.log(blank);
        readline.cursorTo(process.stdout, 0, 0);
        readline.clearScreenDown(process.stdout);
      }
    }
  }, {
    key: "captureLogs",
    value: function captureLogs(fun) {
      try {
        this.capture();
        fun.call();
        return this.capturedMessages;
      } catch (e) {
        throw e;
      } finally {
        this.endCapture();
      }
    }
  }, {
    key: "captureConsole",
    value: function captureConsole(args, method) {
      if (this.capturing) {
        this.capturedMessages.push(chalk.stripColor(args.join(' ')).trim());
      } else {
        method.apply(console, args);
      }
    }
  }]);

  return Debugger;
}();

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

module.exports = new Debugger();