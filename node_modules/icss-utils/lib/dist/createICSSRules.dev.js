"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _postcss = _interopRequireDefault(require("postcss"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var createImports = function createImports(imports) {
  return Object.keys(imports).map(function (path) {
    var aliases = imports[path];
    var declarations = Object.keys(aliases).map(function (key) {
      return _postcss["default"].decl({
        prop: key,
        value: aliases[key],
        raws: {
          before: "\n  "
        }
      });
    });
    var hasDeclarations = declarations.length > 0;

    var rule = _postcss["default"].rule({
      selector: ":import('".concat(path, "')"),
      raws: {
        after: hasDeclarations ? "\n" : ""
      }
    });

    if (hasDeclarations) {
      rule.append(declarations);
    }

    return rule;
  });
};

var createExports = function createExports(exports) {
  var declarations = Object.keys(exports).map(function (key) {
    return _postcss["default"].decl({
      prop: key,
      value: exports[key],
      raws: {
        before: "\n  "
      }
    });
  });

  if (declarations.length === 0) {
    return [];
  }

  var rule = _postcss["default"].rule({
    selector: ":export",
    raws: {
      after: "\n"
    }
  }).append(declarations);

  return [rule];
};

var createICSSRules = function createICSSRules(imports, exports) {
  return [].concat(_toConsumableArray(createImports(imports)), _toConsumableArray(createExports(exports)));
};

var _default = createICSSRules;
exports["default"] = _default;