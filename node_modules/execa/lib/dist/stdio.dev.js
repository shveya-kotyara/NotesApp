'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var alias = ['stdin', 'stdout', 'stderr'];

var hasAlias = function hasAlias(opts) {
  return alias.some(function (x) {
    return Boolean(opts[x]);
  });
};

module.exports = function (opts) {
  if (!opts) {
    return null;
  }

  if (opts.stdio && hasAlias(opts)) {
    throw new Error("It's not possible to provide `stdio` in combination with one of ".concat(alias.map(function (x) {
      return "`".concat(x, "`");
    }).join(', ')));
  }

  if (typeof opts.stdio === 'string') {
    return opts.stdio;
  }

  var stdio = opts.stdio || [];

  if (!Array.isArray(stdio)) {
    throw new TypeError("Expected `stdio` to be of type `string` or `Array`, got `".concat(_typeof(stdio), "`"));
  }

  var result = [];
  var len = Math.max(stdio.length, alias.length);

  for (var i = 0; i < len; i++) {
    var value = null;

    if (stdio[i] !== undefined) {
      value = stdio[i];
    } else if (opts[alias[i]] !== undefined) {
      value = opts[alias[i]];
    }

    result[i] = value;
  }

  return result;
};