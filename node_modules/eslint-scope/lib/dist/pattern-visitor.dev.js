/*
  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
"use strict";
/* eslint-disable no-undefined */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Syntax = require("estraverse").Syntax;

var esrecurse = require("esrecurse");
/**
 * Get last array element
 * @param {array} xs - array
 * @returns {any} Last elment
 */


function getLast(xs) {
  return xs[xs.length - 1] || null;
}

var PatternVisitor =
/*#__PURE__*/
function (_esrecurse$Visitor) {
  _inherits(PatternVisitor, _esrecurse$Visitor);

  _createClass(PatternVisitor, null, [{
    key: "isPattern",
    value: function isPattern(node) {
      var nodeType = node.type;
      return nodeType === Syntax.Identifier || nodeType === Syntax.ObjectPattern || nodeType === Syntax.ArrayPattern || nodeType === Syntax.SpreadElement || nodeType === Syntax.RestElement || nodeType === Syntax.AssignmentPattern;
    }
  }]);

  function PatternVisitor(options, rootPattern, callback) {
    var _this;

    _classCallCheck(this, PatternVisitor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatternVisitor).call(this, null, options));
    _this.rootPattern = rootPattern;
    _this.callback = callback;
    _this.assignments = [];
    _this.rightHandNodes = [];
    _this.restElements = [];
    return _this;
  }

  _createClass(PatternVisitor, [{
    key: "Identifier",
    value: function Identifier(pattern) {
      var lastRestElement = getLast(this.restElements);
      this.callback(pattern, {
        topLevel: pattern === this.rootPattern,
        rest: lastRestElement !== null && lastRestElement !== undefined && lastRestElement.argument === pattern,
        assignments: this.assignments
      });
    }
  }, {
    key: "Property",
    value: function Property(property) {
      // Computed property's key is a right hand node.
      if (property.computed) {
        this.rightHandNodes.push(property.key);
      } // If it's shorthand, its key is same as its value.
      // If it's shorthand and has its default value, its key is same as its value.left (the value is AssignmentPattern).
      // If it's not shorthand, the name of new variable is its value's.


      this.visit(property.value);
    }
  }, {
    key: "ArrayPattern",
    value: function ArrayPattern(pattern) {
      for (var i = 0, iz = pattern.elements.length; i < iz; ++i) {
        var element = pattern.elements[i];
        this.visit(element);
      }
    }
  }, {
    key: "AssignmentPattern",
    value: function AssignmentPattern(pattern) {
      this.assignments.push(pattern);
      this.visit(pattern.left);
      this.rightHandNodes.push(pattern.right);
      this.assignments.pop();
    }
  }, {
    key: "RestElement",
    value: function RestElement(pattern) {
      this.restElements.push(pattern);
      this.visit(pattern.argument);
      this.restElements.pop();
    }
  }, {
    key: "MemberExpression",
    value: function MemberExpression(node) {
      // Computed property's key is a right hand node.
      if (node.computed) {
        this.rightHandNodes.push(node.property);
      } // the object is only read, write to its property.


      this.rightHandNodes.push(node.object);
    } //
    // ForInStatement.left and AssignmentExpression.left are LeftHandSideExpression.
    // By spec, LeftHandSideExpression is Pattern or MemberExpression.
    //   (see also: https://github.com/estree/estree/pull/20#issuecomment-74584758)
    // But espree 2.0 parses to ArrayExpression, ObjectExpression, etc...
    //

  }, {
    key: "SpreadElement",
    value: function SpreadElement(node) {
      this.visit(node.argument);
    }
  }, {
    key: "ArrayExpression",
    value: function ArrayExpression(node) {
      node.elements.forEach(this.visit, this);
    }
  }, {
    key: "AssignmentExpression",
    value: function AssignmentExpression(node) {
      this.assignments.push(node);
      this.visit(node.left);
      this.rightHandNodes.push(node.right);
      this.assignments.pop();
    }
  }, {
    key: "CallExpression",
    value: function CallExpression(node) {
      var _this2 = this;

      // arguments are right hand nodes.
      node.arguments.forEach(function (a) {
        _this2.rightHandNodes.push(a);
      });
      this.visit(node.callee);
    }
  }]);

  return PatternVisitor;
}(esrecurse.Visitor);

module.exports = PatternVisitor;
/* vim: set sw=4 ts=4 et tw=80 : */