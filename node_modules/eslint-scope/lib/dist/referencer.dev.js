/*
  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
"use strict";
/* eslint-disable no-underscore-dangle */

/* eslint-disable no-undefined */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Syntax = require("estraverse").Syntax;

var esrecurse = require("esrecurse");

var Reference = require("./reference");

var Variable = require("./variable");

var PatternVisitor = require("./pattern-visitor");

var definition = require("./definition");

var assert = require("assert");

var ParameterDefinition = definition.ParameterDefinition;
var Definition = definition.Definition;
/**
 * Traverse identifier in pattern
 * @param {Object} options - options
 * @param {pattern} rootPattern - root pattern
 * @param {Refencer} referencer - referencer
 * @param {callback} callback - callback
 * @returns {void}
 */

function traverseIdentifierInPattern(options, rootPattern, referencer, callback) {
  // Call the callback at left hand identifier nodes, and Collect right hand nodes.
  var visitor = new PatternVisitor(options, rootPattern, callback);
  visitor.visit(rootPattern); // Process the right hand nodes recursively.

  if (referencer !== null && referencer !== undefined) {
    visitor.rightHandNodes.forEach(referencer.visit, referencer);
  }
} // Importing ImportDeclaration.
// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-moduledeclarationinstantiation
// https://github.com/estree/estree/blob/master/es6.md#importdeclaration
// FIXME: Now, we don't create module environment, because the context is
// implementation dependent.


var Importer =
/*#__PURE__*/
function (_esrecurse$Visitor) {
  _inherits(Importer, _esrecurse$Visitor);

  function Importer(declaration, referencer) {
    var _this;

    _classCallCheck(this, Importer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Importer).call(this, null, referencer.options));
    _this.declaration = declaration;
    _this.referencer = referencer;
    return _this;
  }

  _createClass(Importer, [{
    key: "visitImport",
    value: function visitImport(id, specifier) {
      var _this2 = this;

      this.referencer.visitPattern(id, function (pattern) {
        _this2.referencer.currentScope().__define(pattern, new Definition(Variable.ImportBinding, pattern, specifier, _this2.declaration, null, null));
      });
    }
  }, {
    key: "ImportNamespaceSpecifier",
    value: function ImportNamespaceSpecifier(node) {
      var local = node.local || node.id;

      if (local) {
        this.visitImport(local, node);
      }
    }
  }, {
    key: "ImportDefaultSpecifier",
    value: function ImportDefaultSpecifier(node) {
      var local = node.local || node.id;
      this.visitImport(local, node);
    }
  }, {
    key: "ImportSpecifier",
    value: function ImportSpecifier(node) {
      var local = node.local || node.id;

      if (node.name) {
        this.visitImport(node.name, node);
      } else {
        this.visitImport(local, node);
      }
    }
  }]);

  return Importer;
}(esrecurse.Visitor); // Referencing variables and creating bindings.


var Referencer =
/*#__PURE__*/
function (_esrecurse$Visitor2) {
  _inherits(Referencer, _esrecurse$Visitor2);

  function Referencer(options, scopeManager) {
    var _this3;

    _classCallCheck(this, Referencer);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Referencer).call(this, null, options));
    _this3.options = options;
    _this3.scopeManager = scopeManager;
    _this3.parent = null;
    _this3.isInnerMethodDefinition = false;
    return _this3;
  }

  _createClass(Referencer, [{
    key: "currentScope",
    value: function currentScope() {
      return this.scopeManager.__currentScope;
    }
  }, {
    key: "close",
    value: function close(node) {
      while (this.currentScope() && node === this.currentScope().block) {
        this.scopeManager.__currentScope = this.currentScope().__close(this.scopeManager);
      }
    }
  }, {
    key: "pushInnerMethodDefinition",
    value: function pushInnerMethodDefinition(isInnerMethodDefinition) {
      var previous = this.isInnerMethodDefinition;
      this.isInnerMethodDefinition = isInnerMethodDefinition;
      return previous;
    }
  }, {
    key: "popInnerMethodDefinition",
    value: function popInnerMethodDefinition(isInnerMethodDefinition) {
      this.isInnerMethodDefinition = isInnerMethodDefinition;
    }
  }, {
    key: "referencingDefaultValue",
    value: function referencingDefaultValue(pattern, assignments, maybeImplicitGlobal, init) {
      var scope = this.currentScope();
      assignments.forEach(function (assignment) {
        scope.__referencing(pattern, Reference.WRITE, assignment.right, maybeImplicitGlobal, pattern !== assignment.left, init);
      });
    }
  }, {
    key: "visitPattern",
    value: function visitPattern(node, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {
          processRightHandNodes: false
        };
      }

      traverseIdentifierInPattern(this.options, node, options.processRightHandNodes ? this : null, callback);
    }
  }, {
    key: "visitFunction",
    value: function visitFunction(node) {
      var _this4 = this;

      var i, iz; // FunctionDeclaration name is defined in upper scope
      // NOTE: Not referring variableScope. It is intended.
      // Since
      //  in ES5, FunctionDeclaration should be in FunctionBody.
      //  in ES6, FunctionDeclaration should be block scoped.

      if (node.type === Syntax.FunctionDeclaration) {
        // id is defined in upper scope
        this.currentScope().__define(node.id, new Definition(Variable.FunctionName, node.id, node, null, null, null));
      } // FunctionExpression with name creates its special scope;
      // FunctionExpressionNameScope.


      if (node.type === Syntax.FunctionExpression && node.id) {
        this.scopeManager.__nestFunctionExpressionNameScope(node);
      } // Consider this function is in the MethodDefinition.


      this.scopeManager.__nestFunctionScope(node, this.isInnerMethodDefinition);

      var that = this;
      /**
       * Visit pattern callback
       * @param {pattern} pattern - pattern
       * @param {Object} info - info
       * @returns {void}
       */

      function visitPatternCallback(pattern, info) {
        that.currentScope().__define(pattern, new ParameterDefinition(pattern, node, i, info.rest));

        that.referencingDefaultValue(pattern, info.assignments, null, true);
      } // Process parameter declarations.


      for (i = 0, iz = node.params.length; i < iz; ++i) {
        this.visitPattern(node.params[i], {
          processRightHandNodes: true
        }, visitPatternCallback);
      } // if there's a rest argument, add that


      if (node.rest) {
        this.visitPattern({
          type: "RestElement",
          argument: node.rest
        }, function (pattern) {
          _this4.currentScope().__define(pattern, new ParameterDefinition(pattern, node, node.params.length, true));
        });
      } // In TypeScript there are a number of function-like constructs which have no body,
      // so check it exists before traversing


      if (node.body) {
        // Skip BlockStatement to prevent creating BlockStatement scope.
        if (node.body.type === Syntax.BlockStatement) {
          this.visitChildren(node.body);
        } else {
          this.visit(node.body);
        }
      }

      this.close(node);
    }
  }, {
    key: "visitClass",
    value: function visitClass(node) {
      if (node.type === Syntax.ClassDeclaration) {
        this.currentScope().__define(node.id, new Definition(Variable.ClassName, node.id, node, null, null, null));
      }

      this.visit(node.superClass);

      this.scopeManager.__nestClassScope(node);

      if (node.id) {
        this.currentScope().__define(node.id, new Definition(Variable.ClassName, node.id, node));
      }

      this.visit(node.body);
      this.close(node);
    }
  }, {
    key: "visitProperty",
    value: function visitProperty(node) {
      var previous;

      if (node.computed) {
        this.visit(node.key);
      }

      var isMethodDefinition = node.type === Syntax.MethodDefinition;

      if (isMethodDefinition) {
        previous = this.pushInnerMethodDefinition(true);
      }

      this.visit(node.value);

      if (isMethodDefinition) {
        this.popInnerMethodDefinition(previous);
      }
    }
  }, {
    key: "visitForIn",
    value: function visitForIn(node) {
      var _this5 = this;

      if (node.left.type === Syntax.VariableDeclaration && node.left.kind !== "var") {
        this.scopeManager.__nestForScope(node);
      }

      if (node.left.type === Syntax.VariableDeclaration) {
        this.visit(node.left);
        this.visitPattern(node.left.declarations[0].id, function (pattern) {
          _this5.currentScope().__referencing(pattern, Reference.WRITE, node.right, null, true, true);
        });
      } else {
        this.visitPattern(node.left, {
          processRightHandNodes: true
        }, function (pattern, info) {
          var maybeImplicitGlobal = null;

          if (!_this5.currentScope().isStrict) {
            maybeImplicitGlobal = {
              pattern: pattern,
              node: node
            };
          }

          _this5.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);

          _this5.currentScope().__referencing(pattern, Reference.WRITE, node.right, maybeImplicitGlobal, true, false);
        });
      }

      this.visit(node.right);
      this.visit(node.body);
      this.close(node);
    }
  }, {
    key: "visitVariableDeclaration",
    value: function visitVariableDeclaration(variableTargetScope, type, node, index) {
      var _this6 = this;

      var decl = node.declarations[index];
      var init = decl.init;
      this.visitPattern(decl.id, {
        processRightHandNodes: true
      }, function (pattern, info) {
        variableTargetScope.__define(pattern, new Definition(type, pattern, decl, node, index, node.kind));

        _this6.referencingDefaultValue(pattern, info.assignments, null, true);

        if (init) {
          _this6.currentScope().__referencing(pattern, Reference.WRITE, init, null, !info.topLevel, true);
        }
      });
    }
  }, {
    key: "AssignmentExpression",
    value: function AssignmentExpression(node) {
      var _this7 = this;

      if (PatternVisitor.isPattern(node.left)) {
        if (node.operator === "=") {
          this.visitPattern(node.left, {
            processRightHandNodes: true
          }, function (pattern, info) {
            var maybeImplicitGlobal = null;

            if (!_this7.currentScope().isStrict) {
              maybeImplicitGlobal = {
                pattern: pattern,
                node: node
              };
            }

            _this7.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);

            _this7.currentScope().__referencing(pattern, Reference.WRITE, node.right, maybeImplicitGlobal, !info.topLevel, false);
          });
        } else {
          this.currentScope().__referencing(node.left, Reference.RW, node.right);
        }
      } else {
        this.visit(node.left);
      }

      this.visit(node.right);
    }
  }, {
    key: "CatchClause",
    value: function CatchClause(node) {
      var _this8 = this;

      this.scopeManager.__nestCatchScope(node);

      this.visitPattern(node.param, {
        processRightHandNodes: true
      }, function (pattern, info) {
        _this8.currentScope().__define(pattern, new Definition(Variable.CatchClause, node.param, node, null, null, null));

        _this8.referencingDefaultValue(pattern, info.assignments, null, true);
      });
      this.visit(node.body);
      this.close(node);
    }
  }, {
    key: "Program",
    value: function Program(node) {
      this.scopeManager.__nestGlobalScope(node);

      if (this.scopeManager.__isNodejsScope()) {
        // Force strictness of GlobalScope to false when using node.js scope.
        this.currentScope().isStrict = false;

        this.scopeManager.__nestFunctionScope(node, false);
      }

      if (this.scopeManager.__isES6() && this.scopeManager.isModule()) {
        this.scopeManager.__nestModuleScope(node);
      }

      if (this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict()) {
        this.currentScope().isStrict = true;
      }

      this.visitChildren(node);
      this.close(node);
    }
  }, {
    key: "Identifier",
    value: function Identifier(node) {
      this.currentScope().__referencing(node);
    }
  }, {
    key: "UpdateExpression",
    value: function UpdateExpression(node) {
      if (PatternVisitor.isPattern(node.argument)) {
        this.currentScope().__referencing(node.argument, Reference.RW, null);
      } else {
        this.visitChildren(node);
      }
    }
  }, {
    key: "MemberExpression",
    value: function MemberExpression(node) {
      this.visit(node.object);

      if (node.computed) {
        this.visit(node.property);
      }
    }
  }, {
    key: "Property",
    value: function Property(node) {
      this.visitProperty(node);
    }
  }, {
    key: "MethodDefinition",
    value: function MethodDefinition(node) {
      this.visitProperty(node);
    }
  }, {
    key: "BreakStatement",
    value: function BreakStatement() {} // eslint-disable-line class-methods-use-this

  }, {
    key: "ContinueStatement",
    value: function ContinueStatement() {} // eslint-disable-line class-methods-use-this

  }, {
    key: "LabeledStatement",
    value: function LabeledStatement(node) {
      this.visit(node.body);
    }
  }, {
    key: "ForStatement",
    value: function ForStatement(node) {
      // Create ForStatement declaration.
      // NOTE: In ES6, ForStatement dynamically generates
      // per iteration environment. However, escope is
      // a static analyzer, we only generate one scope for ForStatement.
      if (node.init && node.init.type === Syntax.VariableDeclaration && node.init.kind !== "var") {
        this.scopeManager.__nestForScope(node);
      }

      this.visitChildren(node);
      this.close(node);
    }
  }, {
    key: "ClassExpression",
    value: function ClassExpression(node) {
      this.visitClass(node);
    }
  }, {
    key: "ClassDeclaration",
    value: function ClassDeclaration(node) {
      this.visitClass(node);
    }
  }, {
    key: "CallExpression",
    value: function CallExpression(node) {
      // Check this is direct call to eval
      if (!this.scopeManager.__ignoreEval() && node.callee.type === Syntax.Identifier && node.callee.name === "eval") {
        // NOTE: This should be `variableScope`. Since direct eval call always creates Lexical environment and
        // let / const should be enclosed into it. Only VariableDeclaration affects on the caller's environment.
        this.currentScope().variableScope.__detectEval();
      }

      this.visitChildren(node);
    }
  }, {
    key: "BlockStatement",
    value: function BlockStatement(node) {
      if (this.scopeManager.__isES6()) {
        this.scopeManager.__nestBlockScope(node);
      }

      this.visitChildren(node);
      this.close(node);
    }
  }, {
    key: "ThisExpression",
    value: function ThisExpression() {
      this.currentScope().variableScope.__detectThis();
    }
  }, {
    key: "WithStatement",
    value: function WithStatement(node) {
      this.visit(node.object); // Then nest scope for WithStatement.

      this.scopeManager.__nestWithScope(node);

      this.visit(node.body);
      this.close(node);
    }
  }, {
    key: "VariableDeclaration",
    value: function VariableDeclaration(node) {
      var variableTargetScope = node.kind === "var" ? this.currentScope().variableScope : this.currentScope();

      for (var i = 0, iz = node.declarations.length; i < iz; ++i) {
        var decl = node.declarations[i];
        this.visitVariableDeclaration(variableTargetScope, Variable.Variable, node, i);

        if (decl.init) {
          this.visit(decl.init);
        }
      }
    } // sec 13.11.8

  }, {
    key: "SwitchStatement",
    value: function SwitchStatement(node) {
      this.visit(node.discriminant);

      if (this.scopeManager.__isES6()) {
        this.scopeManager.__nestSwitchScope(node);
      }

      for (var i = 0, iz = node.cases.length; i < iz; ++i) {
        this.visit(node.cases[i]);
      }

      this.close(node);
    }
  }, {
    key: "FunctionDeclaration",
    value: function FunctionDeclaration(node) {
      this.visitFunction(node);
    }
  }, {
    key: "FunctionExpression",
    value: function FunctionExpression(node) {
      this.visitFunction(node);
    }
  }, {
    key: "ForOfStatement",
    value: function ForOfStatement(node) {
      this.visitForIn(node);
    }
  }, {
    key: "ForInStatement",
    value: function ForInStatement(node) {
      this.visitForIn(node);
    }
  }, {
    key: "ArrowFunctionExpression",
    value: function ArrowFunctionExpression(node) {
      this.visitFunction(node);
    }
  }, {
    key: "ImportDeclaration",
    value: function ImportDeclaration(node) {
      assert(this.scopeManager.__isES6() && this.scopeManager.isModule(), "ImportDeclaration should appear when the mode is ES6 and in the module context.");
      var importer = new Importer(node, this);
      importer.visit(node);
    }
  }, {
    key: "visitExportDeclaration",
    value: function visitExportDeclaration(node) {
      if (node.source) {
        return;
      }

      if (node.declaration) {
        this.visit(node.declaration);
        return;
      }

      this.visitChildren(node);
    }
  }, {
    key: "ExportDeclaration",
    value: function ExportDeclaration(node) {
      this.visitExportDeclaration(node);
    }
  }, {
    key: "ExportNamedDeclaration",
    value: function ExportNamedDeclaration(node) {
      this.visitExportDeclaration(node);
    }
  }, {
    key: "ExportSpecifier",
    value: function ExportSpecifier(node) {
      var local = node.id || node.local;
      this.visit(local);
    }
  }, {
    key: "MetaProperty",
    value: function MetaProperty() {// eslint-disable-line class-methods-use-this
      // do nothing.
    }
  }]);

  return Referencer;
}(esrecurse.Visitor);

module.exports = Referencer;
/* vim: set sw=4 ts=4 et tw=80 : */