'use strict';

var ls = require('../ls.js');

var get = require('../get.js');

var put = require('../put.js');

var rm = require('../rm.js');

var verify = require('../verify.js');

var setLocale = require('../lib/util/y.js').setLocale;

var clearMemoized = require('../lib/memoization.js').clearMemoized;

var tmp = require('../lib/util/tmp.js');

setLocale('es');
var x = module.exports;

x.ls = function (cache) {
  return ls(cache);
};

x.ls.flujo = function (cache) {
  return ls.stream(cache);
};

x.saca = function (cache, clave, ops) {
  return get(cache, clave, ops);
};

x.saca.porHacheo = function (cache, hacheo, ops) {
  return get.byDigest(cache, hacheo, ops);
};

x.saca.sinc = function (cache, clave, ops) {
  return get.sync(cache, clave, ops);
};

x.saca.sinc.porHacheo = function (cache, hacheo, ops) {
  return get.sync.byDigest(cache, hacheo, ops);
};

x.saca.flujo = function (cache, clave, ops) {
  return get.stream(cache, clave, ops);
};

x.saca.flujo.porHacheo = function (cache, hacheo, ops) {
  return get.stream.byDigest(cache, hacheo, ops);
};

x.sava.copia = function (cache, clave, destino, opts) {
  return get.copy(cache, clave, destino, opts);
};

x.sava.copia.porHacheo = function (cache, hacheo, destino, opts) {
  return get.copy.byDigest(cache, hacheo, destino, opts);
};

x.saca.info = function (cache, clave) {
  return get.info(cache, clave);
};

x.saca.tieneDatos = function (cache, hacheo) {
  return get.hasContent(cache, hacheo);
};

x.saca.tieneDatos.sinc = function (cache, hacheo) {
  return get.hasContent.sync(cache, hacheo);
};

x.mete = function (cache, clave, datos, ops) {
  return put(cache, clave, datos, ops);
};

x.mete.flujo = function (cache, clave, ops) {
  return put.stream(cache, clave, ops);
};

x.rm = function (cache, clave) {
  return rm.entry(cache, clave);
};

x.rm.todo = function (cache) {
  return rm.all(cache);
};

x.rm.entrada = x.rm;

x.rm.datos = function (cache, hacheo) {
  return rm.content(cache, hacheo);
};

x.ponLenguaje = function (lang) {
  return setLocale(lang);
};

x.limpiaMemoizado = function () {
  return clearMemoized();
};

x.tmp = {};

x.tmp.mkdir = function (cache, ops) {
  return tmp.mkdir(cache, ops);
};

x.tmp.hazdir = x.tmp.mkdir;

x.tmp.conTmp = function (cache, ops, cb) {
  return tmp.withTmp(cache, ops, cb);
};

x.verifica = function (cache, ops) {
  return verify(cache, ops);
};

x.verifica.ultimaVez = function (cache) {
  return verify.lastRun(cache);
};

x.verifica.ÃºltimaVez = x.verifica.ultimaVez;