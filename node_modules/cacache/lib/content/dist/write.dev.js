'use strict';

function _templateObject4() {
  var data = _taggedTemplateLiteral(["Integrity check failed:\n  Wanted: ", "\n   Found: ", ""]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Bad data size: expected inserted data to be ", " bytes, but got ", " instead"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Cache input stream was empty"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["opts.algorithms only supports a single algorithm for now"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var BB = require('bluebird');

var contentPath = require('./path');

var fixOwner = require('../util/fix-owner');

var fs = require('graceful-fs');

var moveFile = require('../util/move-file');

var PassThrough = require('stream').PassThrough;

var path = require('path');

var pipe = BB.promisify(require('mississippi').pipe);
var rimraf = BB.promisify(require('rimraf'));

var ssri = require('ssri');

var to = require('mississippi').to;

var uniqueFilename = require('unique-filename');

var Y = require('../util/y.js');

var writeFileAsync = BB.promisify(fs.writeFile);
module.exports = write;

function write(cache, data, opts) {
  opts = opts || {};

  if (opts.algorithms && opts.algorithms.length > 1) {
    throw new Error(Y(_templateObject()));
  }

  if (typeof opts.size === 'number' && data.length !== opts.size) {
    return BB.reject(sizeError(opts.size, data.length));
  }

  var sri = ssri.fromData(data, {
    algorithms: opts.algorithms
  });

  if (opts.integrity && !ssri.checkData(data, opts.integrity, opts)) {
    return BB.reject(checksumError(opts.integrity, sri));
  }

  return BB.using(makeTmp(cache, opts), function (tmp) {
    return writeFileAsync(tmp.target, data, {
      flag: 'wx'
    }).then(function () {
      return moveToDestination(tmp, cache, sri, opts);
    });
  }).then(function () {
    return {
      integrity: sri,
      size: data.length
    };
  });
}

module.exports.stream = writeStream;

function writeStream(cache, opts) {
  opts = opts || {};
  var inputStream = new PassThrough();
  var inputErr = false;

  function errCheck() {
    if (inputErr) {
      throw inputErr;
    }
  }

  var allDone;
  var ret = to(function (c, n, cb) {
    if (!allDone) {
      allDone = handleContent(inputStream, cache, opts, errCheck);
    }

    inputStream.write(c, n, cb);
  }, function (cb) {
    inputStream.end(function () {
      if (!allDone) {
        var e = new Error(Y(_templateObject2()));
        e.code = 'ENODATA';
        return ret.emit('error', e);
      }

      allDone.then(function (res) {
        res.integrity && ret.emit('integrity', res.integrity);
        res.size !== null && ret.emit('size', res.size);
        cb();
      }, function (e) {
        ret.emit('error', e);
      });
    });
  });
  ret.once('error', function (e) {
    inputErr = e;
  });
  return ret;
}

function handleContent(inputStream, cache, opts, errCheck) {
  return BB.using(makeTmp(cache, opts), function (tmp) {
    errCheck();
    return pipeToTmp(inputStream, cache, tmp.target, opts, errCheck).then(function (res) {
      return moveToDestination(tmp, cache, res.integrity, opts, errCheck).then(function () {
        return res;
      });
    });
  });
}

function pipeToTmp(inputStream, cache, tmpTarget, opts, errCheck) {
  return BB.resolve().then(function () {
    var integrity;
    var size;
    var hashStream = ssri.integrityStream({
      integrity: opts.integrity,
      algorithms: opts.algorithms,
      size: opts.size
    }).on('integrity', function (s) {
      integrity = s;
    }).on('size', function (s) {
      size = s;
    });
    var outStream = fs.createWriteStream(tmpTarget, {
      flags: 'wx'
    });
    errCheck();
    return pipe(inputStream, hashStream, outStream).then(function () {
      return {
        integrity: integrity,
        size: size
      };
    })["catch"](function (err) {
      return rimraf(tmpTarget).then(function () {
        throw err;
      });
    });
  });
}

function makeTmp(cache, opts) {
  var tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix);
  return fixOwner.mkdirfix(cache, path.dirname(tmpTarget)).then(function () {
    return {
      target: tmpTarget,
      moved: false
    };
  }).disposer(function (tmp) {
    return !tmp.moved && rimraf(tmp.target);
  });
}

function moveToDestination(tmp, cache, sri, opts, errCheck) {
  errCheck && errCheck();
  var destination = contentPath(cache, sri);
  var destDir = path.dirname(destination);
  return fixOwner.mkdirfix(cache, destDir).then(function () {
    errCheck && errCheck();
    return moveFile(tmp.target, destination);
  }).then(function () {
    errCheck && errCheck();
    tmp.moved = true;
    return fixOwner.chownr(cache, destination);
  });
}

function sizeError(expected, found) {
  var err = new Error(Y(_templateObject3(), expected, found));
  err.expected = expected;
  err.found = found;
  err.code = 'EBADSIZE';
  return err;
}

function checksumError(expected, found) {
  var err = new Error(Y(_templateObject4(), expected, found));
  err.code = 'EINTEGRITY';
  err.expected = expected;
  err.found = found;
  return err;
}