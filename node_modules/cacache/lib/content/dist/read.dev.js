'use strict';

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Integrity verification failed for ", " (", ")"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["Bad data size: expected inserted data to be ", " bytes, but got ", " instead"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var BB = require('bluebird');

var contentPath = require('./path');

var figgyPudding = require('figgy-pudding');

var fs = require('graceful-fs');

var PassThrough = require('stream').PassThrough;

var pipe = BB.promisify(require('mississippi').pipe);

var ssri = require('ssri');

var Y = require('../util/y.js');

var lstatAsync = BB.promisify(fs.lstat);
var readFileAsync = BB.promisify(fs.readFile);
var ReadOpts = figgyPudding({
  size: {}
});
module.exports = read;

function read(cache, integrity, opts) {
  opts = ReadOpts(opts);
  return withContentSri(cache, integrity, function (cpath, sri) {
    return readFileAsync(cpath, null).then(function (data) {
      if (typeof opts.size === 'number' && opts.size !== data.length) {
        throw sizeError(opts.size, data.length);
      } else if (ssri.checkData(data, sri)) {
        return data;
      } else {
        throw integrityError(sri, cpath);
      }
    });
  });
}

module.exports.sync = readSync;

function readSync(cache, integrity, opts) {
  opts = ReadOpts(opts);
  return withContentSriSync(cache, integrity, function (cpath, sri) {
    var data = fs.readFileSync(cpath);

    if (typeof opts.size === 'number' && opts.size !== data.length) {
      throw sizeError(opts.size, data.length);
    } else if (ssri.checkData(data, sri)) {
      return data;
    } else {
      throw integrityError(sri, cpath);
    }
  });
}

module.exports.stream = readStream;
module.exports.readStream = readStream;

function readStream(cache, integrity, opts) {
  opts = ReadOpts(opts);
  var stream = new PassThrough();
  withContentSri(cache, integrity, function (cpath, sri) {
    return lstatAsync(cpath).then(function (stat) {
      return {
        cpath: cpath,
        sri: sri,
        stat: stat
      };
    });
  }).then(function (_ref) {
    var cpath = _ref.cpath,
        sri = _ref.sri,
        stat = _ref.stat;
    return pipe(fs.createReadStream(cpath), ssri.integrityStream({
      integrity: sri,
      size: opts.size
    }), stream);
  })["catch"](function (err) {
    stream.emit('error', err);
  });
  return stream;
}

var copyFileAsync;

if (fs.copyFile) {
  module.exports.copy = copy;
  module.exports.copy.sync = copySync;
  copyFileAsync = BB.promisify(fs.copyFile);
}

function copy(cache, integrity, dest, opts) {
  opts = ReadOpts(opts);
  return withContentSri(cache, integrity, function (cpath, sri) {
    return copyFileAsync(cpath, dest);
  });
}

function copySync(cache, integrity, dest, opts) {
  opts = ReadOpts(opts);
  return withContentSriSync(cache, integrity, function (cpath, sri) {
    return fs.copyFileSync(cpath, dest);
  });
}

module.exports.hasContent = hasContent;

function hasContent(cache, integrity) {
  if (!integrity) {
    return BB.resolve(false);
  }

  return withContentSri(cache, integrity, function (cpath, sri) {
    return lstatAsync(cpath).then(function (stat) {
      return {
        size: stat.size,
        sri: sri,
        stat: stat
      };
    });
  })["catch"](function (err) {
    if (err.code === 'ENOENT') {
      return false;
    }

    if (err.code === 'EPERM') {
      if (process.platform !== 'win32') {
        throw err;
      } else {
        return false;
      }
    }
  });
}

module.exports.hasContent.sync = hasContentSync;

function hasContentSync(cache, integrity) {
  if (!integrity) {
    return false;
  }

  return withContentSriSync(cache, integrity, function (cpath, sri) {
    try {
      var stat = fs.lstatSync(cpath);
      return {
        size: stat.size,
        sri: sri,
        stat: stat
      };
    } catch (err) {
      if (err.code === 'ENOENT') {
        return false;
      }

      if (err.code === 'EPERM') {
        if (process.platform !== 'win32') {
          throw err;
        } else {
          return false;
        }
      }
    }
  });
}

function withContentSri(cache, integrity, fn) {
  return BB["try"](function () {
    var sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest
    // with available local data.

    var algo = sri.pickAlgorithm();
    var digests = sri[algo];

    if (digests.length <= 1) {
      var cpath = contentPath(cache, digests[0]);
      return fn(cpath, digests[0]);
    } else {
      return BB.any(sri[sri.pickAlgorithm()].map(function (meta) {
        return withContentSri(cache, meta, fn);
      }, {
        concurrency: 1
      }))["catch"](function (err) {
        if ([].some.call(err, function (e) {
          return e.code === 'ENOENT';
        })) {
          throw Object.assign(new Error('No matching content found for ' + sri.toString()), {
            code: 'ENOENT'
          });
        } else {
          throw err[0];
        }
      });
    }
  });
}

function withContentSriSync(cache, integrity, fn) {
  var sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest
  // with available local data.

  var algo = sri.pickAlgorithm();
  var digests = sri[algo];

  if (digests.length <= 1) {
    var cpath = contentPath(cache, digests[0]);
    return fn(cpath, digests[0]);
  } else {
    var lastErr = null;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = sri[sri.pickAlgorithm()][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var meta = _step.value;

        try {
          return withContentSriSync(cache, meta, fn);
        } catch (err) {
          lastErr = err;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (lastErr) {
      throw lastErr;
    }
  }
}

function sizeError(expected, found) {
  var err = new Error(Y(_templateObject(), expected, found));
  err.expected = expected;
  err.found = found;
  err.code = 'EBADSIZE';
  return err;
}

function integrityError(sri, path) {
  var err = new Error(Y(_templateObject2(), sri, path));
  err.code = 'EINTEGRITY';
  err.sri = sri;
  err.path = path;
  return err;
}