"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _postcss = _interopRequireDefault(require("postcss"));

var _ava = _interopRequireDefault(require("ava"));

var _diff = require("diff");

var _chalk = _interopRequireDefault(require("chalk"));

var _ = _interopRequireDefault(require("../"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getDiff(left, right) {
  var msg = ['\n'];
  (0, _diff.diffLines)(left, right).forEach(function (item) {
    if (item.added || item.removed) {
      var text = item.value.replace('\n', "\xB6\n").replace("\uFEFF", '[[BOM]]');
      msg.push(_chalk["default"][item.added ? 'green' : 'red'](text));
    } else {
      var value = item.value.replace("\uFEFF", '[[BOM]]');
      var lines = value.split('\n'); // max line count for each item

      var keepLines = 6; // lines to be omitted

      var omitLines = lines.length - keepLines;

      if (lines.length > keepLines) {
        lines.splice(Math.floor(keepLines / 2), omitLines, _chalk["default"].gray('(...' + omitLines + ' lines omitted...)'));
      }

      msg.concat(lines);
    }
  });
  msg.push('\n');
  return msg.map(function (line) {
    return '  ' + line;
  }).join('');
}

function read(file) {
  return _fs["default"].readFileSync(__dirname + "/fixtures/".concat(file, ".css"), {
    encoding: 'utf-8'
  });
}

function exec(t, input) {
  var output = read("".concat(input, ".post"));
  return (0, _postcss["default"])([(0, _["default"])()]).process(read(input)).then(function (result) {
    if (result.css !== output) {
      t.fail(getDiff(result.css, output));
    }

    t.deepEqual(result.warnings().length, 0);
  });
}

(0, _ava["default"])('Overridden @keyframes should be discarded correctly.', exec, 'keyframes');
(0, _ava["default"])('Overridden @counter-style should be discarded correctly.', exec, 'counter-style');