"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ChainedMap = require('./ChainedMap');

var ChainedSet = require('./ChainedSet');

var Resolve = require('./Resolve');

var ResolveLoader = require('./ResolveLoader');

var Output = require('./Output');

var DevServer = require('./DevServer');

var Plugin = require('./Plugin');

var Module = require('./Module');

var Optimization = require('./Optimization');

var Performance = require('./Performance');

module.exports =
/*#__PURE__*/
function (_ChainedMap) {
  _inherits(_class, _ChainedMap);

  function _class() {
    var _this;

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));
    _this.devServer = new DevServer(_assertThisInitialized(_this));
    _this.entryPoints = new ChainedMap(_assertThisInitialized(_this));
    _this.module = new Module(_assertThisInitialized(_this));
    _this.node = new ChainedMap(_assertThisInitialized(_this));
    _this.optimization = new Optimization(_assertThisInitialized(_this));
    _this.output = new Output(_assertThisInitialized(_this));
    _this.performance = new Performance(_assertThisInitialized(_this));
    _this.plugins = new ChainedMap(_assertThisInitialized(_this));
    _this.resolve = new Resolve(_assertThisInitialized(_this));
    _this.resolveLoader = new ResolveLoader(_assertThisInitialized(_this));

    _this.extend(['amd', 'bail', 'cache', 'context', 'devtool', 'externals', 'loader', 'mode', 'name', 'parallelism', 'profile', 'recordsInputPath', 'recordsPath', 'recordsOutputPath', 'stats', 'target', 'watch', 'watchOptions']);

    return _this;
  }

  _createClass(_class, [{
    key: "entry",
    value: function entry(name) {
      var _this2 = this;

      return this.entryPoints.getOrCompute(name, function () {
        return new ChainedSet(_this2);
      });
    }
  }, {
    key: "plugin",
    value: function plugin(name) {
      var _this3 = this;

      return this.plugins.getOrCompute(name, function () {
        return new Plugin(_this3, name);
      });
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      var entryPoints = this.entryPoints.entries() || {};
      return this.clean(Object.assign(this.entries() || {}, {
        node: this.node.entries(),
        output: this.output.entries(),
        resolve: this.resolve.toConfig(),
        resolveLoader: this.resolveLoader.toConfig(),
        devServer: this.devServer.toConfig(),
        module: this.module.toConfig(),
        optimization: this.optimization.toConfig(),
        plugins: this.plugins.values().map(function (plugin) {
          return plugin.toConfig();
        }),
        performance: this.performance.entries(),
        entry: Object.keys(entryPoints).reduce(function (acc, key) {
          return Object.assign(acc, _defineProperty({}, key, entryPoints[key].values()));
        }, {})
      }));
    }
  }, {
    key: "toString",
    value: function toString(options) {
      return module.exports.toString(this.toConfig(), options);
    }
  }, {
    key: "merge",
    value: function merge() {
      var _this4 = this;

      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var omit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var omissions = ['node', 'output', 'resolve', 'resolveLoader', 'devServer', 'optimization', 'performance', 'module'];

      if (!omit.includes('entry') && 'entry' in obj) {
        Object.keys(obj.entry).forEach(function (name) {
          return _this4.entry(name).merge([].concat(obj.entry[name]));
        });
      }

      if (!omit.includes('plugin') && 'plugin' in obj) {
        Object.keys(obj.plugin).forEach(function (name) {
          return _this4.plugin(name).merge(obj.plugin[name]);
        });
      }

      omissions.forEach(function (key) {
        if (!omit.includes(key) && key in obj) {
          _this4[key].merge(obj[key]);
        }
      });
      return _get(_getPrototypeOf(_class.prototype), "merge", this).call(this, obj, [].concat(_toConsumableArray(omit), omissions, ['entry', 'plugin']));
    }
  }], [{
    key: "toString",
    value: function toString(config) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$verbose = _ref.verbose,
          verbose = _ref$verbose === void 0 ? false : _ref$verbose,
          _ref$configPrefix = _ref.configPrefix,
          configPrefix = _ref$configPrefix === void 0 ? 'config' : _ref$configPrefix;

      // eslint-disable-next-line global-require
      var _require = require('javascript-stringify'),
          stringify = _require.stringify;

      return stringify(config, function (value, indent, stringify) {
        // improve plugin output
        if (value && value.__pluginName) {
          var prefix = "/* ".concat(configPrefix, ".").concat(value.__pluginType, "('").concat(value.__pluginName, "') */\n");
          var constructorExpression = value.__pluginPath ? // The path is stringified to ensure special characters are escaped
          // (such as the backslashes in Windows-style paths).
          "(require(".concat(stringify(value.__pluginPath), "))") : value.__pluginConstructorName;

          if (constructorExpression) {
            // get correct indentation for args by stringifying the args array and
            // discarding the square brackets.
            var args = stringify(value.__pluginArgs).slice(1, -1);
            return "".concat(prefix, "new ").concat(constructorExpression, "(").concat(args, ")");
          }

          return prefix + stringify(value.__pluginArgs && value.__pluginArgs.length ? {
            args: value.__pluginArgs
          } : {});
        } // improve rule/use output


        if (value && value.__ruleNames) {
          var ruleTypes = value.__ruleTypes;

          var _prefix = "/* ".concat(configPrefix, ".module").concat(value.__ruleNames.map(function (r, index) {
            return ".".concat(ruleTypes ? ruleTypes[index] : 'rule', "('").concat(r, "')");
          }).join('')).concat(value.__useName ? ".use('".concat(value.__useName, "')") : "", " */\n");

          return _prefix + stringify(value);
        }

        if (value && value.__expression) {
          return value.__expression;
        } // shorten long functions


        if (typeof value === 'function') {
          if (!verbose && value.toString().length > 100) {
            return "function () { /* omitted long function */ }";
          }
        }

        return stringify(value);
      }, 2);
    }
  }]);

  return _class;
}(ChainedMap);