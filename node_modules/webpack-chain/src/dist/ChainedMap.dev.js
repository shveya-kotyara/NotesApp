"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _merge = require('deepmerge');

var Chainable = require('./Chainable');

module.exports =
/*#__PURE__*/
function (_Chainable) {
  _inherits(_class, _Chainable);

  function _class(parent) {
    var _this;

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, parent));
    _this.store = new Map();
    return _this;
  }

  _createClass(_class, [{
    key: "extend",
    value: function extend(methods) {
      var _this2 = this;

      this.shorthands = methods;
      methods.forEach(function (method) {
        _this2[method] = function (value) {
          return _this2.set(method, value);
        };
      });
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.store.clear();
      return this;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      this.store["delete"](key);
      return this;
    }
  }, {
    key: "order",
    value: function order() {
      var entries = _toConsumableArray(this.store).reduce(function (acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        acc[key] = value;
        return acc;
      }, {});

      var names = Object.keys(entries);

      var order = _toConsumableArray(names);

      names.forEach(function (name) {
        if (!entries[name]) {
          return;
        }

        var _entries$name = entries[name],
            __before = _entries$name.__before,
            __after = _entries$name.__after;

        if (__before && order.includes(__before)) {
          order.splice(order.indexOf(name), 1);
          order.splice(order.indexOf(__before), 0, name);
        } else if (__after && order.includes(__after)) {
          order.splice(order.indexOf(name), 1);
          order.splice(order.indexOf(__after) + 1, 0, name);
        }
      });
      return {
        entries: entries,
        order: order
      };
    }
  }, {
    key: "entries",
    value: function entries() {
      var _this$order = this.order(),
          entries = _this$order.entries,
          order = _this$order.order;

      if (order.length) {
        return entries;
      }

      return undefined;
    }
  }, {
    key: "values",
    value: function values() {
      var _this$order2 = this.order(),
          entries = _this$order2.entries,
          order = _this$order2.order;

      return order.map(function (name) {
        return entries[name];
      });
    }
  }, {
    key: "get",
    value: function get(key) {
      return this.store.get(key);
    }
  }, {
    key: "getOrCompute",
    value: function getOrCompute(key, fn) {
      if (!this.has(key)) {
        this.set(key, fn());
      }

      return this.get(key);
    }
  }, {
    key: "has",
    value: function has(key) {
      return this.store.has(key);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      this.store.set(key, value);
      return this;
    }
  }, {
    key: "merge",
    value: function merge(obj) {
      var _this3 = this;

      var omit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      Object.keys(obj).forEach(function (key) {
        if (omit.includes(key)) {
          return;
        }

        var value = obj[key];

        if (!Array.isArray(value) && _typeof(value) !== 'object' || value === null || !_this3.has(key)) {
          _this3.set(key, value);
        } else {
          _this3.set(key, _merge(_this3.get(key), value));
        }
      });
      return this;
    }
  }, {
    key: "clean",
    value: function clean(obj) {
      return Object.keys(obj).reduce(function (acc, key) {
        var value = obj[key];

        if (value === undefined) {
          return acc;
        }

        if (Array.isArray(value) && !value.length) {
          return acc;
        }

        if (Object.prototype.toString.call(value) === '[object Object]' && !Object.keys(value).length) {
          return acc;
        }

        acc[key] = value;
        return acc;
      }, {});
    }
  }, {
    key: "when",
    value: function when(condition) {
      var whenTruthy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Function.prototype;
      var whenFalsy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Function.prototype;

      if (condition) {
        whenTruthy(this);
      } else {
        whenFalsy(this);
      }

      return this;
    }
  }]);

  return _class;
}(Chainable);