"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ChainedMap = require('./ChainedMap');

var ChainedSet = require('./ChainedSet');

var Orderable = require('./Orderable');

var Use = require('./Use');

var Resolve = require('./Resolve');

function toArray(arr) {
  return Array.isArray(arr) ? arr : [arr];
}

var Rule = Orderable(
/*#__PURE__*/
function (_ChainedMap) {
  _inherits(_class, _ChainedMap);

  function _class(parent, name) {
    var _this;

    var ruleType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rule';

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, parent));
    _this.name = name;
    _this.names = [];
    _this.ruleType = ruleType;
    _this.ruleTypes = [];

    var rule = _assertThisInitialized(_this);

    while (rule instanceof Rule) {
      _this.names.unshift(rule.name);

      _this.ruleTypes.unshift(rule.ruleType);

      rule = rule.parent;
    }

    _this.uses = new ChainedMap(_assertThisInitialized(_this));
    _this.include = new ChainedSet(_assertThisInitialized(_this));
    _this.exclude = new ChainedSet(_assertThisInitialized(_this));
    _this.rules = new ChainedMap(_assertThisInitialized(_this));
    _this.oneOfs = new ChainedMap(_assertThisInitialized(_this));
    _this.resolve = new Resolve(_assertThisInitialized(_this));

    _this.extend(['enforce', 'issuer', 'parser', 'resource', 'resourceQuery', 'sideEffects', 'test', 'type']);

    return _this;
  }

  _createClass(_class, [{
    key: "use",
    value: function use(name) {
      var _this2 = this;

      return this.uses.getOrCompute(name, function () {
        return new Use(_this2, name);
      });
    }
  }, {
    key: "rule",
    value: function rule(name) {
      var _this3 = this;

      return this.rules.getOrCompute(name, function () {
        return new Rule(_this3, name, 'rule');
      });
    }
  }, {
    key: "oneOf",
    value: function oneOf(name) {
      var _this4 = this;

      return this.oneOfs.getOrCompute(name, function () {
        return new Rule(_this4, name, 'oneOf');
      });
    }
  }, {
    key: "pre",
    value: function pre() {
      return this.enforce('pre');
    }
  }, {
    key: "post",
    value: function post() {
      return this.enforce('post');
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      var config = this.clean(Object.assign(this.entries() || {}, {
        include: this.include.values(),
        exclude: this.exclude.values(),
        rules: this.rules.values().map(function (rule) {
          return rule.toConfig();
        }),
        oneOf: this.oneOfs.values().map(function (oneOf) {
          return oneOf.toConfig();
        }),
        use: this.uses.values().map(function (use) {
          return use.toConfig();
        }),
        resolve: this.resolve.toConfig()
      }));
      Object.defineProperties(config, {
        __ruleNames: {
          value: this.names
        },
        __ruleTypes: {
          value: this.ruleTypes
        }
      });
      return config;
    }
  }, {
    key: "merge",
    value: function merge(obj) {
      var _this5 = this;

      var omit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!omit.includes('include') && 'include' in obj) {
        this.include.merge(toArray(obj.include));
      }

      if (!omit.includes('exclude') && 'exclude' in obj) {
        this.exclude.merge(toArray(obj.exclude));
      }

      if (!omit.includes('use') && 'use' in obj) {
        Object.keys(obj.use).forEach(function (name) {
          return _this5.use(name).merge(obj.use[name]);
        });
      }

      if (!omit.includes('rules') && 'rules' in obj) {
        Object.keys(obj.rules).forEach(function (name) {
          return _this5.rule(name).merge(obj.rules[name]);
        });
      }

      if (!omit.includes('oneOf') && 'oneOf' in obj) {
        Object.keys(obj.oneOf).forEach(function (name) {
          return _this5.oneOf(name).merge(obj.oneOf[name]);
        });
      }

      if (!omit.includes('resolve') && 'resolve' in obj) {
        this.resolve.merge(obj.resolve);
      }

      if (!omit.includes('test') && 'test' in obj) {
        this.test(obj.test instanceof RegExp || typeof obj.test === 'function' ? obj.test : new RegExp(obj.test));
      }

      return _get(_getPrototypeOf(_class.prototype), "merge", this).call(this, obj, [].concat(_toConsumableArray(omit), ['include', 'exclude', 'use', 'rules', 'oneOf', 'resolve', 'test']));
    }
  }]);

  return _class;
}(ChainedMap));
module.exports = Rule;