"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ChainedMap = require('./ChainedMap');

var Rule = require('./Rule');

module.exports =
/*#__PURE__*/
function (_ChainedMap) {
  _inherits(_class, _ChainedMap);

  function _class(parent) {
    var _this;

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, parent));
    _this.rules = new ChainedMap(_assertThisInitialized(_this));
    _this.defaultRules = new ChainedMap(_assertThisInitialized(_this));

    _this.extend(['noParse', 'strictExportPresence']);

    return _this;
  }

  _createClass(_class, [{
    key: "defaultRule",
    value: function defaultRule(name) {
      var _this2 = this;

      return this.defaultRules.getOrCompute(name, function () {
        return new Rule(_this2, name, 'defaultRule');
      });
    }
  }, {
    key: "rule",
    value: function rule(name) {
      var _this3 = this;

      return this.rules.getOrCompute(name, function () {
        return new Rule(_this3, name, 'rule');
      });
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return this.clean(Object.assign(this.entries() || {}, {
        defaultRules: this.defaultRules.values().map(function (r) {
          return r.toConfig();
        }),
        rules: this.rules.values().map(function (r) {
          return r.toConfig();
        })
      }));
    }
  }, {
    key: "merge",
    value: function merge(obj) {
      var _this4 = this;

      var omit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!omit.includes('rule') && 'rule' in obj) {
        Object.keys(obj.rule).forEach(function (name) {
          return _this4.rule(name).merge(obj.rule[name]);
        });
      }

      if (!omit.includes('defaultRule') && 'defaultRule' in obj) {
        Object.keys(obj.defaultRule).forEach(function (name) {
          return _this4.defaultRule(name).merge(obj.defaultRule[name]);
        });
      }

      return _get(_getPrototypeOf(_class.prototype), "merge", this).call(this, obj, ['rule', 'defaultRule']);
    }
  }]);

  return _class;
}(ChainedMap);