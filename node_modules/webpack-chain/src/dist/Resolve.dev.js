"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ChainedMap = require('./ChainedMap');

var ChainedSet = require('./ChainedSet');

var Plugin = require('./Plugin');

module.exports =
/*#__PURE__*/
function (_ChainedMap) {
  _inherits(_class, _ChainedMap);

  function _class(parent) {
    var _this;

    _classCallCheck(this, _class);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, parent));
    _this.alias = new ChainedMap(_assertThisInitialized(_this));
    _this.aliasFields = new ChainedSet(_assertThisInitialized(_this));
    _this.descriptionFiles = new ChainedSet(_assertThisInitialized(_this));
    _this.extensions = new ChainedSet(_assertThisInitialized(_this));
    _this.mainFields = new ChainedSet(_assertThisInitialized(_this));
    _this.mainFiles = new ChainedSet(_assertThisInitialized(_this));
    _this.modules = new ChainedSet(_assertThisInitialized(_this));
    _this.plugins = new ChainedMap(_assertThisInitialized(_this));

    _this.extend(['cachePredicate', 'cacheWithContext', 'concord', 'enforceExtension', 'enforceModuleExtension', 'symlinks', 'unsafeCache']);

    return _this;
  }

  _createClass(_class, [{
    key: "plugin",
    value: function plugin(name) {
      var _this2 = this;

      return this.plugins.getOrCompute(name, function () {
        return new Plugin(_this2, name, 'resolve.plugin');
      });
    }
  }, {
    key: "toConfig",
    value: function toConfig() {
      return this.clean(Object.assign(this.entries() || {}, {
        alias: this.alias.entries(),
        aliasFields: this.aliasFields.values(),
        descriptionFiles: this.descriptionFiles.values(),
        extensions: this.extensions.values(),
        mainFields: this.mainFields.values(),
        mainFiles: this.mainFiles.values(),
        modules: this.modules.values(),
        plugins: this.plugins.values().map(function (plugin) {
          return plugin.toConfig();
        })
      }));
    }
  }, {
    key: "merge",
    value: function merge(obj) {
      var _this3 = this;

      var omit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var omissions = ['alias', 'aliasFields', 'descriptionFiles', 'extensions', 'mainFields', 'mainFiles', 'modules'];

      if (!omit.includes('plugin') && 'plugin' in obj) {
        Object.keys(obj.plugin).forEach(function (name) {
          return _this3.plugin(name).merge(obj.plugin[name]);
        });
      }

      omissions.forEach(function (key) {
        if (!omit.includes(key) && key in obj) {
          _this3[key].merge(obj[key]);
        }
      });
      return _get(_getPrototypeOf(_class.prototype), "merge", this).call(this, obj, [].concat(_toConsumableArray(omit), omissions, ['plugin']));
    }
  }]);

  return _class;
}(ChainedMap);