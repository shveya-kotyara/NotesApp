'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var hexify = function hexify(_char) {
  var h = _char.charCodeAt(0).toString(16).toUpperCase();

  return '0x' + (h.length % 2 ? '0' : '') + h;
};

var parseError = function parseError(e, txt, context) {
  if (!txt) {
    return {
      message: e.message + ' while parsing empty string',
      position: 0
    };
  }

  var badToken = e.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
  var errIdx = badToken ? +badToken[2] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;
  var msg = badToken ? e.message.replace(/^Unexpected token ./, "Unexpected token ".concat(JSON.stringify(badToken[1]), " (").concat(hexify(badToken[1]), ")")) : e.message;

  if (errIdx !== null && errIdx !== undefined) {
    var start = errIdx <= context ? 0 : errIdx - context;
    var end = errIdx + context >= txt.length ? txt.length : errIdx + context;
    var slice = (start === 0 ? '' : '...') + txt.slice(start, end) + (end === txt.length ? '' : '...');
    var near = txt === slice ? '' : 'near ';
    return {
      message: msg + " while parsing ".concat(near).concat(JSON.stringify(slice)),
      position: errIdx
    };
  } else {
    return {
      message: msg + " while parsing '".concat(txt.slice(0, context * 2), "'"),
      position: 0
    };
  }
};

var JSONParseError =
/*#__PURE__*/
function (_SyntaxError) {
  _inherits(JSONParseError, _SyntaxError);

  function JSONParseError(er, txt, context, caller) {
    var _this;

    _classCallCheck(this, JSONParseError);

    context = context || 20;
    var metadata = parseError(er, txt, context);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSONParseError).call(this, metadata.message));
    Object.assign(_assertThisInitialized(_this), metadata);
    _this.code = 'EJSONPARSE';
    _this.systemError = er;
    Error.captureStackTrace(_assertThisInitialized(_this), caller || _this.constructor);
    return _this;
  }

  _createClass(JSONParseError, [{
    key: "name",
    get: function get() {
      return this.constructor.name;
    },
    set: function set(n) {}
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return this.constructor.name;
    }
  }]);

  return JSONParseError;
}(_wrapNativeSuper(SyntaxError));

var kIndent = Symbol["for"]('indent');
var kNewline = Symbol["for"]('newline'); // only respect indentation if we got a line break, otherwise squash it
// things other than objects and arrays aren't indented, so ignore those
// Important: in both of these regexps, the $1 capture group is the newline
// or undefined, and the $2 capture group is the indent, or undefined.

var formatRE = /^\s*[{\[]((?:\r?\n)+)([\s\t]*)/;
var emptyRE = /^(?:\{\}|\[\])((?:\r?\n)+)?$/;

var parseJson = function parseJson(txt, reviver, context) {
  var parseText = stripBOM(txt);
  context = context || 20;

  try {
    // get the indentation so that we can save it back nicely
    // if the file starts with {" then we have an indent of '', ie, none
    // otherwise, pick the indentation of the next line after the first \n
    // If the pattern doesn't match, then it means no indentation.
    // JSON.stringify ignores symbols, so this is reasonably safe.
    // if the string is '{}' or '[]', then use the default 2-space indent.
    var _ref = parseText.match(emptyRE) || parseText.match(formatRE) || [, '', ''],
        _ref2 = _slicedToArray(_ref, 3),
        _ref2$ = _ref2[1],
        newline = _ref2$ === void 0 ? '\n' : _ref2$,
        _ref2$2 = _ref2[2],
        indent = _ref2$2 === void 0 ? '  ' : _ref2$2;

    var result = JSON.parse(parseText, reviver);

    if (result && _typeof(result) === 'object') {
      result[kNewline] = newline;
      result[kIndent] = indent;
    }

    return result;
  } catch (e) {
    if (typeof txt !== 'string' && !Buffer.isBuffer(txt)) {
      var isEmptyArray = Array.isArray(txt) && txt.length === 0;
      throw Object.assign(new TypeError("Cannot parse ".concat(isEmptyArray ? 'an empty array' : String(txt))), {
        code: 'EJSONPARSE',
        systemError: e
      });
    }

    throw new JSONParseError(e, parseText, context, parseJson);
  }
}; // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
// because the buffer-to-string conversion in `fs.readFileSync()`
// translates it to FEFF, the UTF-16 BOM.


var stripBOM = function stripBOM(txt) {
  return String(txt).replace(/^\uFEFF/, '');
};

module.exports = parseJson;
parseJson.JSONParseError = JSONParseError;

parseJson.noExceptions = function (txt, reviver) {
  try {
    return JSON.parse(stripBOM(txt), reviver);
  } catch (e) {}
};