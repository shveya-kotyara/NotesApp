'use strict';

var u = require('universalify').fromCallback;

var fs = require('graceful-fs');

var path = require('path');

var copy = require('../copy').copy;

var remove = require('../remove').remove;

var mkdirp = require('../mkdirs').mkdirp;

var pathExists = require('../path-exists').pathExists;

function move(src, dest, opts, cb) {
  if (typeof opts === 'function') {
    cb = opts;
    opts = {};
  }

  var overwrite = opts.overwrite || opts.clobber || false;
  src = path.resolve(src);
  dest = path.resolve(dest);
  if (src === dest) return fs.access(src, cb);
  fs.stat(src, function (err, st) {
    if (err) return cb(err);

    if (st.isDirectory() && isSrcSubdir(src, dest)) {
      return cb(new Error("Cannot move '".concat(src, "' to a subdirectory of itself, '").concat(dest, "'.")));
    }

    mkdirp(path.dirname(dest), function (err) {
      if (err) return cb(err);
      return doRename(src, dest, overwrite, cb);
    });
  });
}

function doRename(src, dest, overwrite, cb) {
  if (overwrite) {
    return remove(dest, function (err) {
      if (err) return cb(err);
      return rename(src, dest, overwrite, cb);
    });
  }

  pathExists(dest, function (err, destExists) {
    if (err) return cb(err);
    if (destExists) return cb(new Error('dest already exists.'));
    return rename(src, dest, overwrite, cb);
  });
}

function rename(src, dest, overwrite, cb) {
  fs.rename(src, dest, function (err) {
    if (!err) return cb();
    if (err.code !== 'EXDEV') return cb(err);
    return moveAcrossDevice(src, dest, overwrite, cb);
  });
}

function moveAcrossDevice(src, dest, overwrite, cb) {
  var opts = {
    overwrite: overwrite,
    errorOnExist: true
  };
  copy(src, dest, opts, function (err) {
    if (err) return cb(err);
    return remove(src, cb);
  });
}

function isSrcSubdir(src, dest) {
  var srcArray = src.split(path.sep);
  var destArray = dest.split(path.sep);
  return srcArray.reduce(function (acc, current, i) {
    return acc && destArray[i] === current;
  }, true);
}

module.exports = {
  move: u(move)
};