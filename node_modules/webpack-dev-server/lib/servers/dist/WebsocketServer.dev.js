'use strict';
/* eslint-disable
  class-methods-use-this
*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ws = require('ws');

var BaseServer = require('./BaseServer');

module.exports =
/*#__PURE__*/
function (_BaseServer) {
  _inherits(WebsocketServer, _BaseServer);

  function WebsocketServer(server) {
    var _this;

    _classCallCheck(this, WebsocketServer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebsocketServer).call(this, server));
    _this.wsServer = new ws.Server({
      noServer: true,
      path: _this.server.sockPath
    });

    _this.server.listeningApp.on('upgrade', function (req, sock, head) {
      if (!_this.wsServer.shouldHandle(req)) {
        return;
      }

      _this.wsServer.handleUpgrade(req, sock, head, function (connection) {
        _this.wsServer.emit('connection', connection, req);
      });
    });

    _this.wsServer.on('error', function (err) {
      _this.server.log.error(err.message);
    });

    var noop = function noop() {};

    setInterval(function () {
      _this.wsServer.clients.forEach(function (socket) {
        if (socket.isAlive === false) {
          return socket.terminate();
        }

        socket.isAlive = false;
        socket.ping(noop);
      });
    }, _this.server.heartbeatInterval);
    return _this;
  }

  _createClass(WebsocketServer, [{
    key: "send",
    value: function send(connection, message) {
      // prevent cases where the server is trying to send data while connection is closing
      if (connection.readyState !== 1) {
        return;
      }

      connection.send(message);
    }
  }, {
    key: "close",
    value: function close(connection) {
      connection.close();
    } // f should be passed the resulting connection and the connection headers

  }, {
    key: "onConnection",
    value: function onConnection(f) {
      this.wsServer.on('connection', function (connection, req) {
        connection.isAlive = true;
        connection.on('pong', function () {
          connection.isAlive = true;
        });
        f(connection, req.headers);
      });
    }
  }, {
    key: "onConnectionClose",
    value: function onConnectionClose(connection, f) {
      connection.on('close', f);
    }
  }]);

  return WebsocketServer;
}(BaseServer);