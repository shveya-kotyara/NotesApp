'use strict';
/* eslint-disable
  class-methods-use-this,
  func-names
*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var sockjs = require('sockjs');

var BaseServer = require('./BaseServer'); // Workaround for sockjs@~0.3.19
// sockjs will remove Origin header, however Origin header is required for checking host.
// See https://github.com/webpack/webpack-dev-server/issues/1604 for more information


{
  var SockjsSession = require('sockjs/lib/transport').Session;

  var decorateConnection = SockjsSession.prototype.decorateConnection;

  SockjsSession.prototype.decorateConnection = function (req) {
    decorateConnection.call(this, req);
    var connection = this.connection;

    if (connection.headers && !('origin' in connection.headers) && 'origin' in req.headers) {
      connection.headers.origin = req.headers.origin;
    }
  };
}

module.exports =
/*#__PURE__*/
function (_BaseServer) {
  _inherits(SockJSServer, _BaseServer);

  // options has: error (function), debug (function), server (http/s server), path (string)
  function SockJSServer(server) {
    var _this;

    _classCallCheck(this, SockJSServer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SockJSServer).call(this, server));
    _this.socket = sockjs.createServer({
      // Use provided up-to-date sockjs-client
      sockjs_url: '/__webpack_dev_server__/sockjs.bundle.js',
      // Limit useless logs
      log: function log(severity, line) {
        if (severity === 'error') {
          _this.server.log.error(line);
        } else {
          _this.server.log.debug(line);
        }
      }
    });

    _this.socket.installHandlers(_this.server.listeningApp, {
      prefix: _this.server.sockPath
    });

    return _this;
  }

  _createClass(SockJSServer, [{
    key: "send",
    value: function send(connection, message) {
      // prevent cases where the server is trying to send data while connection is closing
      if (connection.readyState !== 1) {
        return;
      }

      connection.write(message);
    }
  }, {
    key: "close",
    value: function close(connection) {
      connection.close();
    } // f should be passed the resulting connection and the connection headers

  }, {
    key: "onConnection",
    value: function onConnection(f) {
      this.socket.on('connection', function (connection) {
        f(connection, connection ? connection.headers : null);
      });
    }
  }, {
    key: "onConnectionClose",
    value: function onConnectionClose(connection, f) {
      connection.on('close', f);
    }
  }]);

  return SockJSServer;
}(BaseServer);