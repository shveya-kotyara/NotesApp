'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var open = require('opn');

var isAbsoluteUrl = require('is-absolute-url');

function runOpen(uri, options, log) {
  // https://github.com/webpack/webpack-dev-server/issues/1990
  var openOptions = {
    wait: false
  };
  var openOptionValue = '';

  if (typeof options.open === 'string') {
    openOptions = Object.assign({}, openOptions, {
      app: options.open
    });
    openOptionValue = ": \"".concat(options.open, "\"");
  } else if (_typeof(options.open) === 'object') {
    openOptions = options.open;
    openOptionValue = ": \"".concat(JSON.stringify(options.open), "\"");
  }

  var pages = typeof options.openPage === 'string' ? [options.openPage] : options.openPage || [''];
  return Promise.all(pages.map(function (page) {
    var pageUrl = page && isAbsoluteUrl(page) ? page : "".concat(uri).concat(page);
    return open(pageUrl, openOptions)["catch"](function () {
      log.warn("Unable to open \"".concat(pageUrl, "\" in browser").concat(openOptionValue, ". If you are running in a headless environment, please do not use the --open flag"));
    });
  }));
}

module.exports = runOpen;