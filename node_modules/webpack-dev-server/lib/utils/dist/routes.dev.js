'use strict';

var _require = require('fs'),
    createReadStream = _require.createReadStream;

var _require2 = require('path'),
    join = _require2.join;

var clientBasePath = join(__dirname, '..', '..', 'client');

function routes(server) {
  var app = server.app;
  var middleware = server.middleware;
  var options = server.options;
  app.get('/__webpack_dev_server__/live.bundle.js', function (req, res) {
    res.setHeader('Content-Type', 'application/javascript');
    createReadStream(join(clientBasePath, 'live.bundle.js')).pipe(res);
  });
  app.get('/__webpack_dev_server__/sockjs.bundle.js', function (req, res) {
    res.setHeader('Content-Type', 'application/javascript');
    createReadStream(join(clientBasePath, 'sockjs.bundle.js')).pipe(res);
  });
  app.get('/webpack-dev-server.js', function (req, res) {
    res.setHeader('Content-Type', 'application/javascript');
    createReadStream(join(clientBasePath, 'index.bundle.js')).pipe(res);
  });
  app.get('/webpack-dev-server/invalidate', function (_req, res) {
    server.invalidate();
    res.end();
  });
  app.get('/webpack-dev-server/*', function (req, res) {
    res.setHeader('Content-Type', 'text/html');
    createReadStream(join(clientBasePath, 'live.html')).pipe(res);
  });
  app.get('/webpack-dev-server', function (req, res) {
    res.setHeader('Content-Type', 'text/html');
    res.write('<!DOCTYPE html><html><head><meta charset="utf-8"/></head><body>');
    var outputPath = middleware.getFilenameFromUrl(options.publicPath || '/');
    var filesystem = middleware.fileSystem;
    writeDirectory(options.publicPath || '/', outputPath);
    res.end('</body></html>');

    function writeDirectory(baseUrl, basePath) {
      var content = filesystem.readdirSync(basePath);
      res.write('<ul>');
      content.forEach(function (item) {
        var p = "".concat(basePath, "/").concat(item);

        if (filesystem.statSync(p).isFile()) {
          res.write("<li><a href=\"".concat(baseUrl + item, "\">").concat(item, "</a></li>"));

          if (/\.js$/.test(item)) {
            var html = item.substr(0, item.length - 3);
            var containerHref = baseUrl + html;
            var magicHtmlHref = baseUrl.replace( // eslint-disable-next-line
            /(^(https?:\/\/[^\/]+)?\/)/, '$1webpack-dev-server/') + html;
            res.write("<li><a href=\"".concat(containerHref, "\">").concat(html, "</a>") + " (magic html for ".concat(item, ") (<a href=\"").concat(magicHtmlHref, "\">webpack-dev-server</a>)") + "</li>");
          }
        } else {
          res.write("<li>".concat(item, "<br>"));
          writeDirectory("".concat(baseUrl + item, "/"), p);
          res.write('</li>');
        }
      });
      res.write('</ul>');
    }
  });
}

module.exports = routes;