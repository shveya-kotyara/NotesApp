'use strict';

var path = require('path');

var fs = require('fs');

var del = require('del');

var createCertificate = require('./createCertificate');

function getCertificate(logger) {
  // Use a self-signed certificate if no certificate was configured.
  // Cycle certs every 24 hours
  var certificatePath = path.join(__dirname, '../../ssl/server.pem');
  var certificateExists = fs.existsSync(certificatePath);

  if (certificateExists) {
    var certificateTtl = 1000 * 60 * 60 * 24;
    var certificateStat = fs.statSync(certificatePath);
    var now = new Date(); // cert is more than 30 days old, kill it with fire

    if ((now - certificateStat.ctime) / certificateTtl > 30) {
      logger.info('SSL Certificate is more than 30 days old. Removing.');
      del.sync([certificatePath], {
        force: true
      });
      certificateExists = false;
    }
  }

  if (!certificateExists) {
    logger.info('Generating SSL Certificate');
    var attributes = [{
      name: 'commonName',
      value: 'localhost'
    }];
    var pems = createCertificate(attributes);
    fs.writeFileSync(certificatePath, pems["private"] + pems.cert, {
      encoding: 'utf8'
    });
  }

  return fs.readFileSync(certificatePath);
}

module.exports = getCertificate;