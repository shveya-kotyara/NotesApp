"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _path = _interopRequireDefault(require("path"));

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _webpackLog = _interopRequireDefault(require("webpack-log"));

var _options = _interopRequireDefault(require("./options.json"));

var _preProcessPattern = _interopRequireDefault(require("./preProcessPattern"));

var _processPattern = _interopRequireDefault(require("./processPattern"));

var _postProcessPattern = _interopRequireDefault(require("./postProcessPattern"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var CopyPlugin =
/*#__PURE__*/
function () {
  function CopyPlugin() {
    var patterns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, CopyPlugin);

    (0, _schemaUtils["default"])(_options["default"], patterns, this.constructor.name);
    this.patterns = patterns;
    this.options = options;
  }

  _createClass(CopyPlugin, [{
    key: "apply",
    value: function apply(compiler) {
      var _this = this;

      var fileDependencies = new Set();
      var contextDependencies = new Set();
      var written = {};
      var context;

      if (!this.options.context) {
        context = compiler.options.context;
      } else if (!_path["default"].isAbsolute(this.options.context)) {
        context = _path["default"].join(compiler.options.context, this.options.context);
      } else {
        context = this.options.context;
      }

      var logger = (0, _webpackLog["default"])({
        name: 'copy-webpack-plugin',
        level: this.options.logLevel || 'warn'
      });
      var plugin = {
        name: 'CopyPlugin'
      };
      compiler.hooks.emit.tapAsync(plugin, function (compilation, callback) {
        logger.debug('starting emit');
        var globalRef = {
          logger: logger,
          compilation: compilation,
          written: written,
          fileDependencies: fileDependencies,
          contextDependencies: contextDependencies,
          context: context,
          inputFileSystem: compiler.inputFileSystem,
          output: compiler.options.output.path,
          ignore: _this.options.ignore || [],
          copyUnmodified: _this.options.copyUnmodified,
          concurrency: _this.options.concurrency
        };

        if (globalRef.output === '/' && compiler.options.devServer && compiler.options.devServer.outputPath) {
          globalRef.output = compiler.options.devServer.outputPath;
        }

        var patterns = _this.patterns;
        Promise.all(patterns.map(function (pattern) {
          return Promise.resolve().then(function () {
            return (0, _preProcessPattern["default"])(globalRef, pattern);
          }) // Every source (from) is assumed to exist here
          // eslint-disable-next-line no-shadow
          .then(function (pattern) {
            return (0, _processPattern["default"])(globalRef, pattern).then(function (files) {
              if (!files) {
                return Promise.resolve();
              }

              return Promise.all(files.filter(Boolean).map(function (file) {
                return (0, _postProcessPattern["default"])(globalRef, pattern, file);
              }));
            });
          });
        }))["catch"](function (error) {
          compilation.errors.push(error);
        }).then(function () {
          logger.debug('finishing emit');
          callback();
        });
      });
      compiler.hooks.afterEmit.tapAsync(plugin, function (compilation, callback) {
        logger.debug('starting after-emit'); // Add file dependencies

        if ('addAll' in compilation.fileDependencies) {
          compilation.fileDependencies.addAll(fileDependencies);
        } else {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = fileDependencies[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var fileDependency = _step.value;
              compilation.fileDependencies.add(fileDependency);
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        } // Add context dependencies


        if ('addAll' in compilation.contextDependencies) {
          compilation.contextDependencies.addAll(contextDependencies);
        } else {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = contextDependencies[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var contextDependency = _step2.value;
              compilation.contextDependencies.add(contextDependency);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }

        logger.debug('finishing after-emit');
        callback();
      });
    }
  }]);

  return CopyPlugin;
}();

var _default = CopyPlugin;
exports["default"] = _default;