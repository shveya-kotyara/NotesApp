'use strict';

var assert = require('chai').assert;

var fs = require('fs');

var path = require('path');

var Promise = require('bluebird');

var request = require('request');

var stream = require('stream');

var modulePath = '../src';
suite('integration:', function () {
  var log;
  setup(function () {
    log = {};
  });
  test('require does not throw', function () {
    assert.doesNotThrow(function () {
      require(modulePath);
    });
  });
  test('require returns object', function () {
    assert.isObject(require(modulePath));
  });
  suite('require:', function () {
    var bfj;
    setup(function () {
      bfj = require(modulePath);
    });
    test('walk function is exported', function () {
      assert.isFunction(bfj.walk);
    });
    test('walk expects one argument', function () {
      assert.lengthOf(bfj.walk, 1);
    });
    test('match function is exported', function () {
      assert.isFunction(bfj.match);
    });
    test('match expects two arguments', function () {
      assert.lengthOf(bfj.match, 2);
    });
    test('parse function is exported', function () {
      assert.isFunction(bfj.parse);
    });
    test('parse expects one argument', function () {
      assert.lengthOf(bfj.parse, 1);
    });
    test('read function is exported', function () {
      assert.isFunction(bfj.read);
    });
    test('read expects two arguments', function () {
      assert.lengthOf(bfj.read, 2);
    });
    test('eventify function is exported', function () {
      assert.isFunction(bfj.eventify);
    });
    test('eventify expects one argument', function () {
      assert.lengthOf(bfj.eventify, 1);
    });
    test('streamify function is exported', function () {
      assert.isFunction(bfj.streamify);
    });
    test('streamify expects one argument', function () {
      assert.lengthOf(bfj.streamify, 1);
    });
    test('stringify function is exported', function () {
      assert.isFunction(bfj.stringify);
    });
    test('stringify expects two arguments', function () {
      assert.lengthOf(bfj.stringify, 2);
    });
    test('write function is exported', function () {
      assert.isFunction(bfj.write);
    });
    test('write expects two arguments', function () {
      assert.lengthOf(bfj.write, 3);
    });
    test('events are exported', function () {
      assert.deepEqual(bfj.events, require('../src/events'));
    });
    suite('read object:', function () {
      var failed, file, result, error;
      setup(function () {
        failed = false;
        file = path.join(__dirname, 'data.json');
        fs.writeFileSync(file, JSON.stringify({
          foo: ['b', 'a', 'r'],
          baz: null,
          qux: 3.14159265359e42
        }, null, '\t'));
        return bfj.read(file).then(function (res) {
          result = res;
        })["catch"](function (err) {
          failed = true;
          error = err;
        });
      });
      teardown(function () {
        fs.unlinkSync(file);
      });
      test('result was correct', function () {
        assert.isFalse(failed);
        assert.isUndefined(error);
        assert.isObject(result);
        assert.lengthOf(Object.keys(result), 3);
        assert.isArray(result.foo);
        assert.lengthOf(result.foo, 3);
        assert.strictEqual(result.foo[0], 'b');
        assert.strictEqual(result.foo[1], 'a');
        assert.strictEqual(result.foo[2], 'r');
        assert.isNull(result.baz);
        assert.strictEqual(result.qux, 3.14159265359e42);
      });
    });
    suite('read value:', function () {
      var failed, file, result, error;
      setup(function () {
        failed = false;
        file = path.join(__dirname, 'data.json');
        fs.writeFileSync(file, '"foo"');
        return bfj.read(file).then(function (res) {
          result = res;
        })["catch"](function (err) {
          failed = true;
          error = err;
        });
      });
      teardown(function () {
        fs.unlinkSync(file);
      });
      test('result was correct', function () {
        assert.isFalse(failed);
        assert.isUndefined(error);
        assert.strictEqual(result, 'foo');
      });
    });
    suite('read error:', function () {
      var failed, file, result, error;
      setup(function () {
        failed = false;
        file = path.join(__dirname, 'data.json');
        fs.writeFileSync(file, '"foo" "bar"');
        return bfj.read(file).then(function (res) {
          return result = res;
        })["catch"](function (err) {
          failed = true;
          error = err;
        });
      });
      teardown(function () {
        fs.unlinkSync(file);
      });
      test('result was correct', function () {
        assert.isTrue(failed);
        assert.isUndefined(result);
        assert.instanceOf(error, Error);
      });
    });
    suite('read missing file:', function () {
      var failed, file, result, error;
      setup(function () {
        failed = false;
        file = path.join(__dirname, 'missing.json');
        assert.isFalse(fs.existsSync(file));
        return bfj.read(file).then(function (res) {
          return result = res;
        })["catch"](function (err) {
          failed = true;
          error = err;
        });
      });
      test('result was correct', function () {
        assert.isTrue(failed);
        assert.isUndefined(result);
        assert.instanceOf(error, Error);
      });
    });
    suite('match predicate:', function () {
      var file, results, errors;
      setup(function (done) {
        file = path.join(__dirname, 'data.json');
        fs.writeFileSync(file, JSON.stringify({
          foo: 'bar',
          baz: 'qux',
          wibble: 'blee'
        }));
        results = [];
        errors = [];
        var datastream = bfj.match(fs.createReadStream(file), function (k, v) {
          return k === 'baz' || v === 'blee';
        });
        datastream.on('data', function (item) {
          return results.push(item);
        });
        datastream.on('error', function (error) {
          return errors.push(error);
        });
        datastream.on('end', done);
      });
      test('the correct properties were matched', function () {
        assert.deepEqual(['qux', 'blee'], results);
      });
      test('no errors occurred', function () {
        assert.deepEqual(errors, []);
      });
    });
    suite('match nested:', function () {
      var file, results, errors;
      setup(function (done) {
        file = path.join(__dirname, 'data.json');
        fs.writeFileSync(file, JSON.stringify({
          foo: {
            bar: 'baz'
          }
        }));
        results = [];
        errors = [];
        var datastream = bfj.match(fs.createReadStream(file), function () {
          return true;
        });
        datastream.on('data', function (item) {
          return results.push(item);
        });
        datastream.on('error', function (error) {
          return errors.push(error);
        });
        datastream.on('end', done);
      });
      test('the correct properties were matched', function () {
        assert.deepEqual(['baz', {
          bar: 'baz'
        }, {
          foo: {
            bar: 'baz'
          }
        }], results);
      });
      test('no errors occurred', function () {
        assert.deepEqual(errors, []);
      });
    });
    suite('match ndjson:', function () {
      var file, results, errors;
      setup(function (done) {
        file = path.join(__dirname, 'data.ndjson');
        fs.writeFileSync(file, [JSON.stringify(['a', 'b']), JSON.stringify(null), '', '', JSON.stringify('wibble')].join('\n'));
        results = [];
        errors = [];
        var datastream = bfj.match(fs.createReadStream(file), function () {
          return true;
        }, {
          ndjson: true
        });
        datastream.on('data', function (item) {
          return results.push(item);
        });
        datastream.on('error', function (error) {
          return errors.push(error);
        });
        datastream.on('end', done);
      });
      test('the correct properties were matched', function () {
        assert.deepEqual(['a', 'b', ['a', 'b'], 'wibble'], results);
      });
      test('no errors occurred', function () {
        assert.deepEqual(errors, []);
      });
    });
    suite('parse request:', function () {
      var error, result;
      setup(function (done) {
        var jsonstream = new stream.PassThrough();
        request({
          url: 'https://gitlab.com/philbooth/bfj/raw/master/package.json'
        }).pipe(bfj.unpipe(function (err, res) {
          error = err;
          result = res;
          done();
        }));
      });
      test('result was correct', function () {
        assert.isNull(error);
        assert.deepEqual(result, require('../package.json'));
      });
    });
    suite('parse NDJSON:', function () {
      var failed, file, results;
      setup(function () {
        failed = false;
        file = path.join(__dirname, 'data.ndjson');
        results = [];
        fs.writeFileSync(file, [JSON.stringify(['b', 'a', 'r']), JSON.stringify(null), '', '', JSON.stringify('wibble')].join('\n'));
        var stream = fs.createReadStream(file);
        return bfj.parse(stream, {
          ndjson: true
        }).then(function (result) {
          results.push(result);
          return bfj.parse(stream, {
            ndjson: true
          });
        }).then(function (result) {
          results.push(result);
          return bfj.parse(stream, {
            ndjson: true
          });
        }).then(function (result) {
          results.push(result);
          return bfj.parse(stream, {
            ndjson: true
          });
        }).then(function (result) {
          results.push(result);
          return bfj.parse(stream, {
            ndjson: true
          });
        }).then(function (result) {
          return results.push(result);
        })["catch"](function (e) {
          failed = true;
        });
      });
      teardown(function () {
        fs.unlinkSync(file);
      });
      test('results were correct', function () {
        assert.isFalse(failed);
        assert.lengthOf(results, 5);
        assert.deepEqual(results, [['b', 'a', 'r'], null, 'wibble', undefined, undefined]);
      });
    });
    suite('stringify value:', function () {
      var result;
      setup(function () {
        return bfj.stringify(new Promise(function (resolve) {
          setTimeout(resolve.bind(null, 'foo\t"\nbar'), 20);
        })).then(function (res) {
          return result = res;
        });
      });
      test('result was correct', function () {
        assert.strictEqual(result, '"foo\\t\\"\\nbar"');
      });
    });
    suite('write object:', function () {
      var failed, file, result;
      setup(function () {
        failed = false;
        file = path.join(__dirname, 'data.json');
        return bfj.write(file, {
          foo: ['b', 'a', 'r'],
          baz: null,
          qux: 3.14159265359e42
        }).then(function () {
          result = fs.readFileSync(file, {
            encoding: 'utf8'
          });
        })["catch"](function (error) {
          failed = true;
          result = error;
        });
      });
      teardown(function () {
        fs.unlinkSync(file);
      });
      test('did not fail', function () {
        assert.isFalse(failed);
      });
      test('result was correct', function () {
        assert.strictEqual(result, '{"foo":["b","a","r"],"baz":null,"qux":3.14159265359e+42}');
      });
    });
  });
});