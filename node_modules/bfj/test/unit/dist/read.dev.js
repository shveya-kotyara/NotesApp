'use strict';

var assert = require('chai').assert;

var proxyquire = require('proxyquire');

var spooks = require('spooks');

var modulePath = '../../src/read';
suite('read:', function () {
  test('require does not throw', function () {
    assert.doesNotThrow(function () {
      require(modulePath);
    });
  });
  test('require returns function', function () {
    assert.isFunction(require(modulePath));
  });
  suite('require:', function () {
    var log, results, read;
    setup(function () {
      log = {};
      results = {
        parse: [{}],
        createReadStream: [{}]
      };
      read = proxyquire(modulePath, {
        fs: {
          createReadStream: spooks.fn({
            name: 'createReadStream',
            log: log,
            results: results.createReadStream
          })
        },
        './parse': spooks.fn({
          name: 'parse',
          log: log,
          results: results.parse
        })
      });
    });
    test('read expects two arguments', function () {
      assert.lengthOf(read, 2);
    });
    test('read does not throw', function () {
      assert.doesNotThrow(function () {
        read();
      });
    });
    test('parse was not called', function () {
      assert.strictEqual(log.counts.parse, 0);
    });
    test('fs.createReadStream was not called', function () {
      assert.strictEqual(log.counts.createReadStream, 0);
    });
    suite('read:', function () {
      var path, options, result;
      setup(function () {
        path = {};
        options = {
          foo: 'bar',
          ndjson: true
        };
        result = read(path, options);
      });
      test('fs.createReadStream was called once', function () {
        assert.strictEqual(log.counts.createReadStream, 1);
      });
      test('fs.createReadStream was called correctly', function () {
        assert.lengthOf(log.args.createReadStream[0], 2);
        assert.strictEqual(log.args.createReadStream[0][0], path);
        assert.lengthOf(Object.keys(log.args.createReadStream[0][0]), 0);
        assert.strictEqual(log.args.createReadStream[0][1], options);
        assert.lengthOf(Object.keys(log.args.createReadStream[0][1]), 2);
      });
      test('parse was called once', function () {
        assert.strictEqual(log.counts.parse, 1);
      });
      test('parse was called correctly', function () {
        assert.isUndefined(log.these.parse[0]);
        assert.lengthOf(log.args.parse[0], 2);
        assert.strictEqual(log.args.parse[0][0], results.createReadStream[0]);
        assert.lengthOf(Object.keys(log.args.parse[0][0]), 0);
        assert.notStrictEqual(log.args.parse[0][1], options);
        assert.deepEqual(log.args.parse[0][1], {
          foo: 'bar',
          ndjson: false
        });
      });
      test('parse result was returned', function () {
        assert.strictEqual(result, results.parse[0]);
      });
    });
  });
});