'use strict';

var assert = require('chai').assert;

var proxyquire = require('proxyquire');

var spooks = require('spooks');

var Promise = require('bluebird');

var modulePath = '../../src/stringify';
suite('stringify:', function () {
  test('require does not throw', function () {
    assert.doesNotThrow(function () {
      require(modulePath);
    });
  });
  test('require returns function', function () {
    assert.isFunction(require(modulePath));
  });
  suite('require:', function () {
    var log, stringify;
    setup(function () {
      log = {};
      stringify = proxyquire(modulePath, {
        './streamify': spooks.fn({
          name: 'streamify',
          log: log,
          results: [{
            on: spooks.fn({
              name: 'on',
              log: log
            })
          }]
        })
      });
    });
    test('stringify expects two arguments', function () {
      assert.lengthOf(stringify, 2);
    });
    test('stringify does not throw', function () {
      assert.doesNotThrow(function () {
        stringify();
      });
    });
    test('stringify returns promise', function () {
      assert.instanceOf(stringify(), Promise);
    });
    test('streamify was not called', function () {
      assert.strictEqual(log.counts.streamify, 0);
    });
    suite('stringify:', function () {
      var data, options, resolved, rejected, result, done;
      setup(function () {
        data = {};
        options = {};
        stringify(data, options).then(function (res) {
          resolved = res;
          done();
        })["catch"](function (rej) {
          rejected = rej;
          done();
        });
      });
      teardown(function () {
        resolved = rejected = undefined;
      });
      test('streamify was called once', function () {
        assert.strictEqual(log.counts.streamify, 1);
        assert.isUndefined(log.these.streamify[0]);
      });
      test('streamify was called correctly', function () {
        assert.lengthOf(log.args.streamify[0], 2);
        assert.strictEqual(log.args.streamify[0][0], data);
        assert.lengthOf(Object.keys(log.args.streamify[0][0]), 0);
        assert.strictEqual(log.args.streamify[0][1], options);
        assert.lengthOf(Object.keys(log.args.streamify[0][1]), 0);
      });
      test('stream.on was called four times', function () {
        assert.strictEqual(log.counts.on, 4);
      });
      test('stream.on was called correctly first time', function () {
        assert.lengthOf(log.args.on[0], 2);
        assert.strictEqual(log.args.on[0][0], 'data');
        assert.isFunction(log.args.on[0][1]);
      });
      test('stream.on was called correctly second time', function () {
        assert.strictEqual(log.args.on[1][0], 'end');
        assert.isFunction(log.args.on[1][1]);
        assert.notStrictEqual(log.args.on[1][1], log.args.on[0][1]);
      });
      test('stream.on was called correctly third time', function () {
        assert.strictEqual(log.args.on[2][0], 'error');
        assert.isFunction(log.args.on[2][1]);
        assert.notStrictEqual(log.args.on[2][1], log.args.on[0][1]);
        assert.notStrictEqual(log.args.on[2][1], log.args.on[1][1]);
      });
      test('stream.on was called correctly fourth time', function () {
        assert.strictEqual(log.args.on[3][0], 'dataError');
        assert.isFunction(log.args.on[3][1]);
        assert.strictEqual(log.args.on[3][1], log.args.on[2][1]);
      });
      test('promise is unfulfilled', function () {
        assert.isUndefined(resolved);
        assert.isUndefined(rejected);
      });
      suite('data event:', function () {
        setup(function () {
          log.args.on[0][1]('foo');
        });
        test('promise is unfulfilled', function () {
          assert.isUndefined(resolved);
          assert.isUndefined(rejected);
        });
        suite('end event:', function () {
          setup(function (d) {
            done = d;
            log.args.on[1][1]();
          });
          test('promise is resolved', function () {
            assert.strictEqual(resolved, 'foo');
          });
          test('promise is not rejected', function () {
            assert.isUndefined(rejected);
          });
        });
        suite('data event:', function () {
          setup(function () {
            log.args.on[0][1]('bar');
          });
          test('promise is unfulfilled', function () {
            assert.isUndefined(resolved);
            assert.isUndefined(rejected);
          });
          suite('end event:', function () {
            setup(function (d) {
              done = d;
              log.args.on[1][1]();
            });
            test('promise is resolved', function () {
              assert.strictEqual(resolved, 'foobar');
            });
          });
          suite('error event:', function () {
            setup(function (d) {
              done = d;
              log.args.on[2][1]('wibble');
            });
            test('promise is rejected', function () {
              assert.strictEqual(rejected, 'wibble');
            });
          });
          suite('dataError event:', function () {
            setup(function (d) {
              done = d;
              log.args.on[3][1]('wibble');
            });
            test('promise is rejected', function () {
              assert.strictEqual(rejected, 'wibble');
            });
          });
        });
      });
    });
  });
});