'use strict';

var assert = require('chai').assert;

var proxyquire = require('proxyquire');

var spooks = require('spooks');

var modulePath = '../../src/match';
suite('match:', function () {
  test('require does not throw', function () {
    assert.doesNotThrow(function () {
      require(modulePath);
    });
  });
  test('require returns function', function () {
    assert.isFunction(require(modulePath));
  });
  suite('require, results.push returns true:', function () {
    var log, resume, results, match;
    setup(function () {
      log = {};
      resume = spooks.fn({
        name: 'resume',
        log: log
      });
      results = {
        walk: [{
          on: spooks.fn({
            name: 'on',
            log: log
          }),
          pause: spooks.fn({
            name: 'pause',
            log: log,
            results: [resume]
          })
        }],
        push: [true]
      };
      match = proxyquire(modulePath, {
        './walk': spooks.fn({
          name: 'walk',
          log: log,
          results: results.walk
        }),
        './datastream': spooks.ctor({
          name: 'DataStream',
          log: log,
          archetype: {
            instance: {
              push: function push() {},
              emit: function emit() {}
            }
          },
          results: results
        })
      });
    });
    test('match expects two arguments', function () {
      assert.lengthOf(match, 2);
    });
    test('match does not throw with match function', function () {
      assert.doesNotThrow(function () {
        return match(null, function () {});
      });
    });
    test('match does not throw with match string', function () {
      assert.doesNotThrow(function () {
        return match(null, ' ');
      });
    });
    test('match throws with empty match string', function () {
      assert["throws"](function () {
        return match(null, '');
      });
    });
    test('match does not throw with match regex', function () {
      assert.doesNotThrow(function () {
        return match(null, /.*/);
      });
    });
    test('match throws with invalid match arg', function () {
      assert["throws"](function () {
        return match(null, {});
      });
    });
    test('match returns stream', function () {
      assert.isFunction(match(null, /.*/).push);
      assert.isFunction(match(null, /.*/).emit);
    });
    test('DataStream was not called', function () {
      assert.strictEqual(log.counts.DataStream, 0);
    });
    test('walk was not called', function () {
      assert.strictEqual(log.counts.walk, 0);
    });
    test('EventEmitter.on was not called', function () {
      assert.strictEqual(log.counts.on, 0);
    });
    test('EventEmitter.pause was not called', function () {
      assert.strictEqual(log.counts.pause, 0);
    });
    suite('match with predicate returning true:', function () {
      var stream, predicate, options, result;
      setup(function () {
        stream = {};
        predicate = spooks.fn({
          name: 'predicate',
          log: log,
          results: [true]
        });
        options = {
          foo: 'bar',
          highWaterMark: 42
        };
        result = match(stream, predicate, options);
      });
      test('DataStream was called once', function () {
        assert.strictEqual(log.counts.DataStream, 1);
        assert.isObject(log.these.DataStream[0]);
      });
      test('DataStream was called correctly', function () {
        assert.lengthOf(log.args.DataStream[0], 2);
        assert.isFunction(log.args.DataStream[0][0]);
        assert.deepEqual(log.args.DataStream[0][1], {
          highWaterMark: 42
        });
      });
      test('walk was called once', function () {
        assert.strictEqual(log.counts.walk, 1);
        assert.isUndefined(log.these.walk[0]);
      });
      test('walk was called correctly', function () {
        assert.lengthOf(log.args.walk[0], 2);
        assert.strictEqual(log.args.walk[0][0], stream);
        assert.lengthOf(Object.keys(log.args.walk[0][0]), 0);
        assert.strictEqual(log.args.walk[0][1], options);
        assert.lengthOf(Object.keys(log.args.walk[0][1]), 2);
      });
      test('EventEmitter.on was called eleven times', function () {
        assert.strictEqual(log.counts.on, 11);
        assert.strictEqual(log.these.on[0], results.walk[0]);
        assert.strictEqual(log.these.on[1], results.walk[0]);
        assert.strictEqual(log.these.on[2], results.walk[0]);
        assert.strictEqual(log.these.on[3], results.walk[0]);
        assert.strictEqual(log.these.on[4], results.walk[0]);
        assert.strictEqual(log.these.on[5], results.walk[0]);
        assert.strictEqual(log.these.on[6], results.walk[0]);
        assert.strictEqual(log.these.on[7], results.walk[0]);
        assert.strictEqual(log.these.on[8], results.walk[0]);
        assert.strictEqual(log.these.on[9], results.walk[0]);
        assert.strictEqual(log.these.on[10], results.walk[0]);
      });
      test('EventEmitter.on was called correctly first time', function () {
        assert.lengthOf(log.args.on[0], 2);
        assert.strictEqual(log.args.on[0][0], 'arr');
        assert.isFunction(log.args.on[0][1]);
      });
      test('EventEmitter.on was called correctly second time', function () {
        assert.lengthOf(log.args.on[1], 2);
        assert.strictEqual(log.args.on[1][0], 'obj');
        assert.isFunction(log.args.on[1][1]);
      });
      test('EventEmitter.on was called correctly third time', function () {
        assert.lengthOf(log.args.on[2], 2);
        assert.strictEqual(log.args.on[2][0], 'pro');
        assert.isFunction(log.args.on[2][1]);
      });
      test('EventEmitter.on was called correctly fourth time', function () {
        assert.lengthOf(log.args.on[3], 2);
        assert.strictEqual(log.args.on[3][0], 'end-arr');
        assert.isFunction(log.args.on[3][1]);
      });
      test('EventEmitter.on was called correctly fifth time', function () {
        assert.lengthOf(log.args.on[4], 2);
        assert.strictEqual(log.args.on[4][0], 'end-obj');
        assert.isFunction(log.args.on[4][1]);
      });
      test('EventEmitter.on was called correctly sixth time', function () {
        assert.lengthOf(log.args.on[5], 2);
        assert.strictEqual(log.args.on[5][0], 'str');
        assert.isFunction(log.args.on[5][1]);
      });
      test('EventEmitter.on was called correctly seventh time', function () {
        assert.lengthOf(log.args.on[6], 2);
        assert.strictEqual(log.args.on[6][0], 'num');
        assert.isFunction(log.args.on[6][1]);
      });
      test('EventEmitter.on was called correctly eighth time', function () {
        assert.lengthOf(log.args.on[7], 2);
        assert.strictEqual(log.args.on[7][0], 'lit');
        assert.isFunction(log.args.on[7][1]);
      });
      test('EventEmitter.on was called correctly ninth time', function () {
        assert.lengthOf(log.args.on[8], 2);
        assert.strictEqual(log.args.on[8][0], 'end');
        assert.isFunction(log.args.on[8][1]);
      });
      test('EventEmitter.on was called correctly tenth time', function () {
        assert.lengthOf(log.args.on[9], 2);
        assert.strictEqual(log.args.on[9][0], 'err');
        assert.isFunction(log.args.on[9][1]);
      });
      test('EventEmitter.on was called correctly eleventh time', function () {
        assert.lengthOf(log.args.on[10], 2);
        assert.strictEqual(log.args.on[10][0], 'err-data');
        assert.isFunction(log.args.on[10][1]);
      });
      suite('array event:', function () {
        setup(function () {
          log.args.on[0][1]();
        });
        test('results.push was not called', function () {
          assert.strictEqual(log.counts.push, 0);
        });
        suite('end event:', function () {
          setup(function () {
            log.args.on[8][1]();
          });
          test('results.push was not called', function () {
            assert.strictEqual(log.counts.push, 0);
          });
          suite('read stream:', function () {
            setup(function () {
              log.args.DataStream[0][0]();
            });
            test('results.push was called once', function () {
              assert.strictEqual(log.counts.push, 1);
            });
            test('results.push was called correctly', function () {
              assert.lengthOf(log.args.push[0], 1);
              assert.isNull(log.args.push[0][0]);
            });
            test('predicate was not called', function () {
              assert.strictEqual(log.counts.predicate, 0);
            });
          });
        });
        suite('endArray and end events:', function () {
          setup(function () {
            log.args.on[3][1]();
            log.args.on[8][1]();
          });
          test('predicate was called once', function () {
            assert.strictEqual(log.counts.predicate, 1);
          });
          test('predicate was called correctly', function () {
            assert.lengthOf(log.args.predicate[0], 3);
            assert.isUndefined(log.args.predicate[0][0]);
            assert.deepEqual(log.args.predicate[0][1], []);
            assert.strictEqual(log.args.predicate[0][2], 0);
          });
          test('results.push was not called', function () {
            assert.strictEqual(log.counts.push, 0);
          });
          suite('read stream:', function () {
            setup(function () {
              log.args.DataStream[0][0]();
            });
            test('results.push was called twice', function () {
              assert.strictEqual(log.counts.push, 2);
            });
            test('results.push was called correctly first time', function () {
              assert.lengthOf(log.args.push[0], 1);
              assert.deepEqual(log.args.push[0][0], []);
            });
            test('results.push was called correctly second time', function () {
              assert.lengthOf(log.args.push[1], 1);
              assert.isNull(log.args.push[1][0]);
            });
            test('results.emit was not called', function () {
              assert.strictEqual(log.counts.emit, 0);
            });
          });
        });
        suite('read stream:', function () {
          setup(function () {
            log.args.DataStream[0][0]();
          });
          test('results.push was not called', function () {
            assert.strictEqual(log.counts.push, 0);
          });
          suite('end event:', function () {
            setup(function () {
              log.args.on[8][1]();
            });
            test('results.push was called once', function () {
              assert.strictEqual(log.counts.push, 1);
            });
            test('results.push was called correctly', function () {
              assert.isNull(log.args.push[0][0]);
            });
            test('results.emit was not called', function () {
              assert.strictEqual(log.counts.emit, 0);
            });
          });
          suite('dataError event:', function () {
            setup(function () {
              log.args.on[10][1]('foo');
            });
            test('results.push was not called', function () {
              assert.strictEqual(log.counts.push, 0);
            });
            test('results.emit was called once', function () {
              assert.strictEqual(log.counts.emit, 1);
            });
            test('results.emit was called correctly', function () {
              assert.lengthOf(log.args.emit[0], 2);
              assert.strictEqual(log.args.emit[0][0], 'dataError');
              assert.strictEqual(log.args.emit[0][1], 'foo');
            });
            test('predicate was not called', function () {
              assert.strictEqual(log.counts.predicate, 0);
            });
          });
          suite('string event:', function () {
            setup(function () {
              log.args.on[5][1]('foo');
            });
            test('predicate was called once', function () {
              assert.strictEqual(log.counts.predicate, 1);
            });
            test('predicate was called correctly', function () {
              assert.lengthOf(log.args.predicate[0], 3);
              assert.strictEqual(log.args.predicate[0][0], 0);
              assert.strictEqual(log.args.predicate[0][1], 'foo');
              assert.strictEqual(log.args.predicate[0][2], 1);
            });
            test('results.push was called once', function () {
              assert.strictEqual(log.counts.push, 1);
            });
            test('results.push was called correctly', function () {
              assert.strictEqual(log.args.push[0][0], 'foo');
            });
            suite('string event:', function () {
              setup(function () {
                log.args.on[5][1]('bar');
              });
              test('predicate was called once', function () {
                assert.strictEqual(log.counts.predicate, 2);
              });
              test('predicate was called correctly', function () {
                assert.strictEqual(log.args.predicate[1][0], 1);
                assert.strictEqual(log.args.predicate[1][1], 'bar');
                assert.strictEqual(log.args.predicate[1][2], 1);
              });
              test('results.push was called once', function () {
                assert.strictEqual(log.counts.push, 2);
              });
              test('results.push was called correctly', function () {
                assert.strictEqual(log.args.push[1][0], 'bar');
              });
            });
            suite('array event:', function () {
              setup(function () {
                log.args.on[0][1]();
              });
              test('predicate was not called', function () {
                assert.strictEqual(log.counts.predicate, 1);
              });
              test('results.push was not called', function () {
                assert.strictEqual(log.counts.push, 1);
              });
              suite('endArray event:', function () {
                setup(function () {
                  log.args.on[3][1]();
                });
                test('predicate was called once', function () {
                  assert.strictEqual(log.counts.predicate, 2);
                });
                test('predicate was called correctly', function () {
                  assert.strictEqual(log.args.predicate[1][0], 1);
                  assert.deepEqual(log.args.predicate[1][1], []);
                  assert.strictEqual(log.args.predicate[1][2], 1);
                });
                test('results.push was called once', function () {
                  assert.strictEqual(log.counts.push, 2);
                });
                test('results.push was called correctly', function () {
                  assert.deepEqual(log.args.push[1][0], []);
                });
                suite('endArray event:', function () {
                  setup(function () {
                    log.args.on[3][1]();
                  });
                  test('predicate was called once', function () {
                    assert.strictEqual(log.counts.predicate, 3);
                  });
                  test('predicate was called correctly', function () {
                    assert.isUndefined(log.args.predicate[2][0]);
                    assert.deepEqual(log.args.predicate[2][1], ['foo', []]);
                    assert.strictEqual(log.args.predicate[2][2], 0);
                  });
                  test('results.push was called once', function () {
                    assert.strictEqual(log.counts.push, 3);
                  });
                  test('results.push was called correctly', function () {
                    assert.deepEqual(log.args.push[2][0], ['foo', []]);
                  });
                  test('EventEmitter.pause was not called', function () {
                    assert.strictEqual(log.counts.pause, 0);
                  });
                });
              });
            });
            suite('object event:', function () {
              setup(function () {
                log.args.on[1][1]();
              });
              test('results.push was not called', function () {
                assert.strictEqual(log.counts.push, 1);
              });
              suite('property event:', function () {
                setup(function () {
                  log.args.on[2][1]('bar');
                });
                test('predicate was not called', function () {
                  assert.strictEqual(log.counts.predicate, 1);
                });
                test('results.push was not called', function () {
                  assert.strictEqual(log.counts.push, 1);
                });
                suite('string event:', function () {
                  setup(function () {
                    log.args.on[5][1]('baz');
                  });
                  test('predicate was called once', function () {
                    assert.strictEqual(log.counts.predicate, 2);
                  });
                  test('predicate was called correctly', function () {
                    assert.strictEqual(log.args.predicate[1][0], 'bar');
                    assert.strictEqual(log.args.predicate[1][1], 'baz');
                    assert.strictEqual(log.args.predicate[1][2], 2);
                  });
                  test('results.push was called once', function () {
                    assert.strictEqual(log.counts.push, 2);
                  });
                  test('results.push was called correctly', function () {
                    assert.strictEqual(log.args.push[1][0], 'baz');
                  });
                  suite('property event:', function () {
                    setup(function () {
                      log.args.on[2][1]('nested');
                    });
                    test('results.push was not called', function () {
                      assert.strictEqual(log.counts.push, 2);
                    });
                    suite('object event:', function () {
                      setup(function () {
                        log.args.on[1][1]();
                      });
                      test('predicate was not called', function () {
                        assert.strictEqual(log.counts.predicate, 2);
                      });
                      test('results.push was not called', function () {
                        assert.strictEqual(log.counts.push, 2);
                      });
                      suite('endObject event:', function () {
                        setup(function () {
                          log.args.on[4][1]();
                        });
                        test('predicate was called once', function () {
                          assert.strictEqual(log.counts.predicate, 3);
                        });
                        test('predicate was called correctly', function () {
                          assert.strictEqual(log.args.predicate[2][0], 'nested');
                          assert.deepEqual(log.args.predicate[2][1], {});
                          assert.strictEqual(log.args.predicate[2][2], 2);
                        });
                        test('results.push was called once', function () {
                          assert.strictEqual(log.counts.push, 3);
                        });
                        test('results.push was called correctly', function () {
                          assert.deepEqual(log.args.push[2][0], {});
                        });
                        suite('endObject event:', function () {
                          setup(function () {
                            log.args.on[4][1]();
                          });
                          test('predicate was called once', function () {
                            assert.strictEqual(log.counts.predicate, 4);
                          });
                          test('predicate was called correctly', function () {
                            assert.strictEqual(log.args.predicate[3][0], 1);
                            assert.deepEqual(log.args.predicate[3][1], {
                              bar: 'baz',
                              nested: {}
                            });
                            assert.strictEqual(log.args.predicate[3][2], 1);
                          });
                          test('results.push was called once', function () {
                            assert.strictEqual(log.counts.push, 4);
                          });
                          test('results.push was called correctly', function () {
                            assert.deepEqual(log.args.push[3][0], {
                              bar: 'baz',
                              nested: {}
                            });
                          });
                          test('EventEmitter.pause was not called', function () {
                            assert.strictEqual(log.counts.pause, 0);
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
          suite('string events, push returns false:', function () {
            setup(function () {
              results.push[0] = false;
              log.args.on[5][1]('foo');
              log.args.on[5][1]('bar');
            });
            teardown(function () {
              results.push[0] = true;
            });
            test('predicate was called twice', function () {
              assert.strictEqual(log.counts.predicate, 2);
            });
            test('results.push was called once', function () {
              assert.strictEqual(log.counts.push, 1);
            });
            test('results.push was called correctly', function () {
              assert.strictEqual(log.args.push[0][0], 'foo');
            });
            test('emitter.pause was called once', function () {
              assert.strictEqual(log.counts.pause, 1);
              assert.strictEqual(log.these.pause[0], results.walk[0]);
            });
            test('emitter.pause was called correctly', function () {
              assert.lengthOf(log.args.pause[0], 0);
            });
            test('resume was not called', function () {
              assert.strictEqual(log.counts.resume, 0);
            });
            suite('read stream:', function () {
              setup(function () {
                log.args.DataStream[0][0]();
              });
              test('resume was called once', function () {
                assert.strictEqual(log.counts.resume, 1);
                assert.isUndefined(log.these.resume[0]);
              });
              test('resume was called correctly', function () {
                assert.lengthOf(log.args.resume[0], 0);
              });
              test('results.push was called once', function () {
                assert.strictEqual(log.counts.push, 2);
              });
              test('results.push was called correctly', function () {
                assert.strictEqual(log.args.push[1][0], 'bar');
              });
            });
          });
        });
        suite('all events then read:', function () {
          setup(function () {
            log.args.on[1][1]();
            log.args.on[2][1]('foo');
            log.args.on[5][1]('bar');
            log.args.on[4][1]();
            log.args.on[5][1]('');
            log.args.on[6][1](0);
            log.args.on[7][1](null);
            log.args.on[7][1](false);
            log.args.on[3][1]();
            log.args.on[8][1]();
            log.args.DataStream[0][0]();
          });
          test('predicate was called six times', function () {
            assert.strictEqual(log.counts.predicate, 6);
          });
          test('predicate was called correctly first time', function () {
            assert.strictEqual(log.args.predicate[0][0], 'foo');
            assert.strictEqual(log.args.predicate[0][1], 'bar');
            assert.strictEqual(log.args.predicate[0][2], 2);
          });
          test('predicate was called correctly second time', function () {
            assert.strictEqual(log.args.predicate[1][0], 0);
            assert.deepEqual(log.args.predicate[1][1], {
              foo: 'bar'
            });
            assert.strictEqual(log.args.predicate[1][2], 1);
          });
          test('predicate was called correctly third time', function () {
            assert.strictEqual(log.args.predicate[2][0], 1);
            assert.strictEqual(log.args.predicate[2][1], '');
            assert.strictEqual(log.args.predicate[2][2], 1);
          });
          test('predicate was called correctly fourth time', function () {
            assert.strictEqual(log.args.predicate[3][0], 2);
            assert.strictEqual(log.args.predicate[3][1], 0);
            assert.strictEqual(log.args.predicate[3][2], 1);
          });
          test('predicate was called correctly fifth time', function () {
            assert.strictEqual(log.args.predicate[4][0], 4);
            assert.strictEqual(log.args.predicate[4][1], false);
            assert.strictEqual(log.args.predicate[4][2], 1);
          });
          test('predicate was called correctly sixth time', function () {
            assert.isUndefined(log.args.predicate[5][0]);
            assert.deepEqual(log.args.predicate[5][1], [{
              foo: 'bar'
            }, '', 0, null, false]);
            assert.strictEqual(log.args.predicate[5][2], 0);
          });
          test('results.push was called seven times', function () {
            assert.strictEqual(log.counts.push, 7);
          });
          test('results.push was called correctly', function () {
            assert.strictEqual(log.args.push[0][0], 'bar');
            assert.deepEqual(log.args.push[1][0], {
              foo: 'bar'
            });
            assert.strictEqual(log.args.push[2][0], '');
            assert.strictEqual(log.args.push[3][0], 0);
            assert.strictEqual(log.args.push[4][0], false);
            assert.deepEqual(log.args.push[5][0], [{
              foo: 'bar'
            }, '', 0, null, false]);
            assert.isNull(log.args.push[6][0]);
          });
          test('results.emit was not called', function () {
            assert.strictEqual(log.counts.emit, 0);
          });
        });
      });
      suite('read then all events:', function () {
        setup(function () {
          log.args.DataStream[0][0]();
          log.args.on[0][1]();
          log.args.on[1][1]();
          log.args.on[2][1]('foo');
          log.args.on[5][1]('bar');
          log.args.on[4][1]();
          log.args.on[5][1]('');
          log.args.on[6][1](0);
          log.args.on[7][1](null);
          log.args.on[7][1](false);
          log.args.on[3][1]();
          log.args.on[8][1]();
        });
        test('results.push was called seven times', function () {
          assert.strictEqual(log.counts.push, 7);
        });
        test('results.push was called correctly', function () {
          assert.strictEqual(log.args.push[0][0], 'bar');
          assert.deepEqual(log.args.push[1][0], {
            foo: 'bar'
          });
          assert.strictEqual(log.args.push[2][0], '');
          assert.strictEqual(log.args.push[3][0], 0);
          assert.strictEqual(log.args.push[4][0], false);
          assert.deepEqual(log.args.push[5][0], [{
            foo: 'bar'
          }, '', 0, null, false]);
          assert.isNull(log.args.push[6][0]);
        });
        test('results.emit was not called', function () {
          assert.strictEqual(log.counts.emit, 0);
        });
      });
    });
    suite('match with predicate returning false:', function () {
      var stream, predicate, options, result;
      setup(function () {
        predicate = spooks.fn({
          name: 'predicate',
          log: log,
          results: [false]
        });
        result = match({}, predicate, {});
      });
      test('DataStream was called once', function () {
        assert.strictEqual(log.counts.DataStream, 1);
      });
      test('walk was called once', function () {
        assert.strictEqual(log.counts.walk, 1);
      });
      test('EventEmitter.on was called eleven times', function () {
        assert.strictEqual(log.counts.on, 11);
      });
      suite('read events:', function () {
        setup(function () {
          log.args.DataStream[0][0]();
          log.args.on[0][1]();
          log.args.on[1][1]();
          log.args.on[2][1]('foo');
          log.args.on[5][1]('bar');
          log.args.on[4][1]();
          log.args.on[5][1]('baz');
          log.args.on[6][1](1);
          log.args.on[7][1](true);
          log.args.on[3][1]();
          log.args.on[8][1]();
        });
        test('results.push was called once', function () {
          assert.strictEqual(log.counts.push, 1);
        });
        test('results.push was called correctly', function () {
          assert.isNull(log.args.push[0][0]);
        });
        test('results.emit was not called', function () {
          assert.strictEqual(log.counts.emit, 0);
        });
      });
    });
    suite('match with string:', function () {
      var stream, options, result;
      setup(function () {
        result = match({}, 'foo', {});
      });
      test('DataStream was called once', function () {
        assert.strictEqual(log.counts.DataStream, 1);
      });
      test('walk was called once', function () {
        assert.strictEqual(log.counts.walk, 1);
      });
      test('EventEmitter.on was called eleven times', function () {
        assert.strictEqual(log.counts.on, 11);
      });
      suite('read events:', function () {
        setup(function () {
          log.args.DataStream[0][0]();
          log.args.on[1][1]();
          log.args.on[2][1]('foo');
          log.args.on[5][1]('bar');
          log.args.on[2][1]('baz');
          log.args.on[5][1]('qux');
          log.args.on[2][1]('foo');
          log.args.on[5][1]('wibble');
          log.args.on[4][1]();
          log.args.on[8][1]();
        });
        test('results.push was called three times', function () {
          assert.strictEqual(log.counts.push, 3);
        });
        test('results.push was called correctly first time', function () {
          assert.strictEqual(log.args.push[0][0], 'bar');
        });
        test('results.push was called correctly second time', function () {
          assert.strictEqual(log.args.push[1][0], 'wibble');
        });
        test('results.push was called correctly third time', function () {
          assert.isNull(log.args.push[2][0]);
        });
        test('results.emit was not called', function () {
          assert.strictEqual(log.counts.emit, 0);
        });
      });
    });
    suite('match with regular expression:', function () {
      var stream, options, result;
      setup(function () {
        result = match({}, /oo/, {});
      });
      test('DataStream was called once', function () {
        assert.strictEqual(log.counts.DataStream, 1);
      });
      test('walk was called once', function () {
        assert.strictEqual(log.counts.walk, 1);
      });
      test('EventEmitter.on was called eleven times', function () {
        assert.strictEqual(log.counts.on, 11);
      });
      suite('read events:', function () {
        setup(function () {
          log.args.DataStream[0][0]();
          log.args.on[1][1]();
          log.args.on[2][1]('foo');
          log.args.on[5][1]('bar');
          log.args.on[2][1]('fo');
          log.args.on[5][1]('baz');
          log.args.on[2][1]('oo');
          log.args.on[5][1]('qux');
          log.args.on[4][1]();
          log.args.on[8][1]();
        });
        test('results.push was called three times', function () {
          assert.strictEqual(log.counts.push, 3);
        });
        test('results.push was called correctly first time', function () {
          assert.strictEqual(log.args.push[0][0], 'bar');
        });
        test('results.push was called correctly second time', function () {
          assert.strictEqual(log.args.push[1][0], 'qux');
        });
        test('results.push was called correctly third time', function () {
          assert.isNull(log.args.push[2][0]);
        });
        test('results.emit was not called', function () {
          assert.strictEqual(log.counts.emit, 0);
        });
      });
    });
    suite('match with numbers=true:', function () {
      var stream, options, result;
      setup(function () {
        result = match({}, '1', {
          numbers: true
        });
      });
      test('DataStream was called once', function () {
        assert.strictEqual(log.counts.DataStream, 1);
      });
      test('walk was called once', function () {
        assert.strictEqual(log.counts.walk, 1);
      });
      test('EventEmitter.on was called eleven times', function () {
        assert.strictEqual(log.counts.on, 11);
      });
      suite('read events:', function () {
        setup(function () {
          log.args.DataStream[0][0]();
          log.args.on[1][1]();
          log.args.on[2][1]('0');
          log.args.on[5][1]('foo');
          log.args.on[2][1]('1');
          log.args.on[5][1]('bar');
          log.args.on[2][1]('2');
          log.args.on[0][1]();
          log.args.on[5][1]('baz');
          log.args.on[5][1]('qux');
          log.args.on[3][1]();
          log.args.on[4][1]();
          log.args.on[8][1]();
        });
        test('results.push was called three times', function () {
          assert.strictEqual(log.counts.push, 3);
        });
        test('results.push was called correctly first time', function () {
          assert.strictEqual(log.args.push[0][0], 'bar');
        });
        test('results.push was called correctly second time', function () {
          assert.strictEqual(log.args.push[1][0], 'qux');
        });
        test('results.push was called correctly third time', function () {
          assert.isNull(log.args.push[2][0]);
        });
        test('results.emit was not called', function () {
          assert.strictEqual(log.counts.emit, 0);
        });
      });
    });
    suite('match with bufferLength=3:', function () {
      var stream, options, result;
      setup(function () {
        result = match({}, 'foo', {
          bufferLength: 3
        });
      });
      test('DataStream was called once', function () {
        assert.strictEqual(log.counts.DataStream, 1);
      });
      test('walk was called once', function () {
        assert.strictEqual(log.counts.walk, 1);
      });
      test('EventEmitter.on was called eleven times', function () {
        assert.strictEqual(log.counts.on, 11);
      });
      suite('two matching events:', function () {
        setup(function () {
          log.args.on[1][1]();
          log.args.on[2][1]('foo');
          log.args.on[5][1]('bar');
          log.args.on[2][1]('baz');
          log.args.on[5][1]('qux');
          log.args.on[2][1]('foo');
          log.args.on[5][1]('wibble');
          log.args.on[2][1]('foo');
        });
        test('EventEmitter.pause was not called', function () {
          assert.strictEqual(log.counts.pause, 0);
        });
        suite('matching event:', function () {
          setup(function () {
            log.args.on[5][1]('blee');
          });
          test('results.push was not called', function () {
            assert.strictEqual(log.counts.push, 0);
          });
          test('EventEmitter.pause was called once', function () {
            assert.strictEqual(log.counts.pause, 1);
          });
          test('resume was not called', function () {
            assert.strictEqual(log.counts.resume, 0);
          });
          suite('read:', function () {
            setup(function () {
              log.args.DataStream[0][0]();
            });
            test('resume was called once', function () {
              assert.strictEqual(log.counts.resume, 1);
            });
            test('results.push was called three times', function () {
              assert.strictEqual(log.counts.push, 3);
            });
            test('results.push was called correctly first time', function () {
              assert.strictEqual(log.args.push[0][0], 'bar');
            });
            test('results.push was called correctly second time', function () {
              assert.strictEqual(log.args.push[1][0], 'wibble');
            });
            test('results.push was called correctly third time', function () {
              assert.strictEqual(log.args.push[2][0], 'blee');
            });
            test('results.emit was not called', function () {
              assert.strictEqual(log.counts.emit, 0);
            });
          });
        });
      });
    });
  });
});