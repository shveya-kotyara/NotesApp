'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = require('buffer'),
    BufferConstants = _require.constants;

var pump = require('pump');

var bufferStream = require('./buffer-stream');

var MaxBufferError =
/*#__PURE__*/
function (_Error) {
  _inherits(MaxBufferError, _Error);

  function MaxBufferError() {
    var _this;

    _classCallCheck(this, MaxBufferError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MaxBufferError).call(this, 'maxBuffer exceeded'));
    _this.name = 'MaxBufferError';
    return _this;
  }

  return MaxBufferError;
}(_wrapNativeSuper(Error));

function getStream(inputStream, options) {
  var _options, maxBuffer, stream;

  return regeneratorRuntime.async(function getStream$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (inputStream) {
            _context.next = 2;
            break;
          }

          return _context.abrupt("return", Promise.reject(new Error('Expected a stream')));

        case 2:
          options = _objectSpread({
            maxBuffer: Infinity
          }, options);
          _options = options, maxBuffer = _options.maxBuffer;
          _context.next = 6;
          return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
            var rejectPromise = function rejectPromise(error) {
              // Don't retrieve an oversized buffer.
              if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
                error.bufferedData = stream.getBufferedValue();
              }

              reject(error);
            };

            stream = pump(inputStream, bufferStream(options), function (error) {
              if (error) {
                rejectPromise(error);
                return;
              }

              resolve();
            });
            stream.on('data', function () {
              if (stream.getBufferedLength() > maxBuffer) {
                rejectPromise(new MaxBufferError());
              }
            });
          }));

        case 6:
          return _context.abrupt("return", stream.getBufferedValue());

        case 7:
        case "end":
          return _context.stop();
      }
    }
  });
}

module.exports = getStream; // TODO: Remove this for the next major release

module.exports["default"] = getStream;

module.exports.buffer = function (stream, options) {
  return getStream(stream, _objectSpread({}, options, {
    encoding: 'buffer'
  }));
};

module.exports.array = function (stream, options) {
  return getStream(stream, _objectSpread({}, options, {
    array: true
  }));
};

module.exports.MaxBufferError = MaxBufferError;