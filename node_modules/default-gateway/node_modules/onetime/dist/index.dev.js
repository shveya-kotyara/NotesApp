'use strict';

var mimicFn = require('mimic-fn');

var calledFunctions = new WeakMap();

var onetime = function onetime(function_) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof function_ !== 'function') {
    throw new TypeError('Expected a function');
  }

  var returnValue;
  var callCount = 0;
  var functionName = function_.displayName || function_.name || '<anonymous>';

  var onetime = function onetime() {
    calledFunctions.set(onetime, ++callCount);

    if (callCount === 1) {
      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
        arguments_[_key] = arguments[_key];
      }

      returnValue = function_.apply(this, arguments_);
      function_ = null;
    } else if (options["throw"] === true) {
      throw new Error("Function `".concat(functionName, "` can only be called once"));
    }

    return returnValue;
  };

  mimicFn(onetime, function_);
  calledFunctions.set(onetime, callCount);
  return onetime;
};

module.exports = onetime; // TODO: Remove this for the next major release

module.exports["default"] = onetime;

module.exports.callCount = function (function_) {
  if (!calledFunctions.has(function_)) {
    throw new Error("The given function `".concat(function_.name, "` is not wrapped by the `onetime` package"));
  }

  return calledFunctions.get(function_);
};