'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require('path');

var childProcess = require('child_process');

var crossSpawn = require('cross-spawn');

var stripFinalNewline = require('strip-final-newline');

var npmRunPath = require('npm-run-path');

var onetime = require('onetime');

var makeError = require('./lib/error');

var normalizeStdio = require('./lib/stdio');

var _require = require('./lib/kill'),
    spawnedKill = _require.spawnedKill,
    spawnedCancel = _require.spawnedCancel,
    setupTimeout = _require.setupTimeout,
    setExitHandler = _require.setExitHandler;

var _require2 = require('./lib/stream.js'),
    handleInput = _require2.handleInput,
    getSpawnedResult = _require2.getSpawnedResult,
    makeAllStream = _require2.makeAllStream,
    validateInputSync = _require2.validateInputSync;

var _require3 = require('./lib/promise.js'),
    mergePromise = _require3.mergePromise,
    getSpawnedPromise = _require3.getSpawnedPromise;

var _require4 = require('./lib/command.js'),
    joinCommand = _require4.joinCommand,
    parseCommand = _require4.parseCommand;

var DEFAULT_MAX_BUFFER = 1000 * 1000 * 100;

var getEnv = function getEnv(_ref) {
  var envOption = _ref.env,
      extendEnv = _ref.extendEnv,
      preferLocal = _ref.preferLocal,
      localDir = _ref.localDir,
      execPath = _ref.execPath;
  var env = extendEnv ? _objectSpread({}, process.env, {}, envOption) : envOption;

  if (preferLocal) {
    return npmRunPath.env({
      env: env,
      cwd: localDir,
      execPath: execPath
    });
  }

  return env;
};

var handleArgs = function handleArgs(file, args) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var parsed = crossSpawn._parse(file, args, options);

  file = parsed.command;
  args = parsed.args;
  options = parsed.options;
  options = _objectSpread({
    maxBuffer: DEFAULT_MAX_BUFFER,
    buffer: true,
    stripFinalNewline: true,
    extendEnv: true,
    preferLocal: false,
    localDir: options.cwd || process.cwd(),
    execPath: process.execPath,
    encoding: 'utf8',
    reject: true,
    cleanup: true,
    all: false,
    windowsHide: true
  }, options);
  options.env = getEnv(options);
  options.stdio = normalizeStdio(options);

  if (process.platform === 'win32' && path.basename(file, '.exe') === 'cmd') {
    // #116
    args.unshift('/q');
  }

  return {
    file: file,
    args: args,
    options: options,
    parsed: parsed
  };
};

var handleOutput = function handleOutput(options, value, error) {
  if (typeof value !== 'string' && !Buffer.isBuffer(value)) {
    // When `execa.sync()` errors, we normalize it to '' to mimic `execa()`
    return error === undefined ? undefined : '';
  }

  if (options.stripFinalNewline) {
    return stripFinalNewline(value);
  }

  return value;
};

var execa = function execa(file, args, options) {
  var parsed = handleArgs(file, args, options);
  var command = joinCommand(file, args);
  var spawned;

  try {
    spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
  } catch (error) {
    // Ensure the returned error is always both a promise and a child process
    var dummySpawned = new childProcess.ChildProcess();
    var errorPromise = Promise.reject(makeError({
      error: error,
      stdout: '',
      stderr: '',
      all: '',
      command: command,
      parsed: parsed,
      timedOut: false,
      isCanceled: false,
      killed: false
    }));
    return mergePromise(dummySpawned, errorPromise);
  }

  var spawnedPromise = getSpawnedPromise(spawned);
  var timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
  var processDone = setExitHandler(spawned, parsed.options, timedPromise);
  var context = {
    isCanceled: false
  };
  spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
  spawned.cancel = spawnedCancel.bind(null, spawned, context);

  var handlePromise = function handlePromise() {
    var _ref2, _ref3, _ref3$, error, exitCode, signal, timedOut, stdoutResult, stderrResult, allResult, stdout, stderr, all, returnedError;

    return regeneratorRuntime.async(function handlePromise$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(getSpawnedResult(spawned, parsed.options, processDone));

          case 2:
            _ref2 = _context.sent;
            _ref3 = _slicedToArray(_ref2, 4);
            _ref3$ = _ref3[0];
            error = _ref3$.error;
            exitCode = _ref3$.exitCode;
            signal = _ref3$.signal;
            timedOut = _ref3$.timedOut;
            stdoutResult = _ref3[1];
            stderrResult = _ref3[2];
            allResult = _ref3[3];
            stdout = handleOutput(parsed.options, stdoutResult);
            stderr = handleOutput(parsed.options, stderrResult);
            all = handleOutput(parsed.options, allResult);

            if (!(error || exitCode !== 0 || signal !== null)) {
              _context.next = 20;
              break;
            }

            returnedError = makeError({
              error: error,
              exitCode: exitCode,
              signal: signal,
              stdout: stdout,
              stderr: stderr,
              all: all,
              command: command,
              parsed: parsed,
              timedOut: timedOut,
              isCanceled: context.isCanceled,
              killed: spawned.killed
            });

            if (parsed.options.reject) {
              _context.next = 19;
              break;
            }

            return _context.abrupt("return", returnedError);

          case 19:
            throw returnedError;

          case 20:
            return _context.abrupt("return", {
              command: command,
              exitCode: 0,
              stdout: stdout,
              stderr: stderr,
              all: all,
              failed: false,
              timedOut: false,
              isCanceled: false,
              killed: false
            });

          case 21:
          case "end":
            return _context.stop();
        }
      }
    });
  };

  var handlePromiseOnce = onetime(handlePromise);

  crossSpawn._enoent.hookChildProcess(spawned, parsed.parsed);

  handleInput(spawned, parsed.options.input);
  spawned.all = makeAllStream(spawned, parsed.options);
  return mergePromise(spawned, handlePromiseOnce);
};

module.exports = execa;

module.exports.sync = function (file, args, options) {
  var parsed = handleArgs(file, args, options);
  var command = joinCommand(file, args);
  validateInputSync(parsed.options);
  var result;

  try {
    result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
  } catch (error) {
    throw makeError({
      error: error,
      stdout: '',
      stderr: '',
      all: '',
      command: command,
      parsed: parsed,
      timedOut: false,
      isCanceled: false,
      killed: false
    });
  }

  var stdout = handleOutput(parsed.options, result.stdout, result.error);
  var stderr = handleOutput(parsed.options, result.stderr, result.error);

  if (result.error || result.status !== 0 || result.signal !== null) {
    var error = makeError({
      stdout: stdout,
      stderr: stderr,
      error: result.error,
      signal: result.signal,
      exitCode: result.status,
      command: command,
      parsed: parsed,
      timedOut: result.error && result.error.code === 'ETIMEDOUT',
      isCanceled: false,
      killed: result.signal !== null
    });

    if (!parsed.options.reject) {
      return error;
    }

    throw error;
  }

  return {
    command: command,
    exitCode: 0,
    stdout: stdout,
    stderr: stderr,
    failed: false,
    timedOut: false,
    isCanceled: false,
    killed: false
  };
};

module.exports.command = function (command, options) {
  var _parseCommand = parseCommand(command),
      _parseCommand2 = _toArray(_parseCommand),
      file = _parseCommand2[0],
      args = _parseCommand2.slice(1);

  return execa(file, args, options);
};

module.exports.commandSync = function (command, options) {
  var _parseCommand3 = parseCommand(command),
      _parseCommand4 = _toArray(_parseCommand3),
      file = _parseCommand4[0],
      args = _parseCommand4.slice(1);

  return execa.sync(file, args, options);
};

module.exports.node = function (scriptPath, args) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (args && !Array.isArray(args) && _typeof(args) === 'object') {
    options = args;
    args = [];
  }

  var stdio = normalizeStdio.node(options);
  var _options = options,
      _options$nodePath = _options.nodePath,
      nodePath = _options$nodePath === void 0 ? process.execPath : _options$nodePath,
      _options$nodeOptions = _options.nodeOptions,
      nodeOptions = _options$nodeOptions === void 0 ? process.execArgv : _options$nodeOptions;
  return execa(nodePath, [].concat(_toConsumableArray(nodeOptions), [scriptPath], _toConsumableArray(Array.isArray(args) ? args : [])), _objectSpread({}, options, {
    stdin: undefined,
    stdout: undefined,
    stderr: undefined,
    stdio: stdio,
    shell: false
  }));
};