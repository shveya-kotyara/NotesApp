'use strict';

var _require = require('human-signals'),
    signalsByName = _require.signalsByName;

var getErrorPrefix = function getErrorPrefix(_ref) {
  var timedOut = _ref.timedOut,
      timeout = _ref.timeout,
      errorCode = _ref.errorCode,
      signal = _ref.signal,
      signalDescription = _ref.signalDescription,
      exitCode = _ref.exitCode,
      isCanceled = _ref.isCanceled;

  if (timedOut) {
    return "timed out after ".concat(timeout, " milliseconds");
  }

  if (isCanceled) {
    return 'was canceled';
  }

  if (errorCode !== undefined) {
    return "failed with ".concat(errorCode);
  }

  if (signal !== undefined) {
    return "was killed with ".concat(signal, " (").concat(signalDescription, ")");
  }

  if (exitCode !== undefined) {
    return "failed with exit code ".concat(exitCode);
  }

  return 'failed';
};

var makeError = function makeError(_ref2) {
  var stdout = _ref2.stdout,
      stderr = _ref2.stderr,
      all = _ref2.all,
      error = _ref2.error,
      signal = _ref2.signal,
      exitCode = _ref2.exitCode,
      command = _ref2.command,
      timedOut = _ref2.timedOut,
      isCanceled = _ref2.isCanceled,
      killed = _ref2.killed,
      timeout = _ref2.parsed.options.timeout;
  // `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.
  // We normalize them to `undefined`
  exitCode = exitCode === null ? undefined : exitCode;
  signal = signal === null ? undefined : signal;
  var signalDescription = signal === undefined ? undefined : signalsByName[signal].description;
  var errorCode = error && error.code;
  var prefix = getErrorPrefix({
    timedOut: timedOut,
    timeout: timeout,
    errorCode: errorCode,
    signal: signal,
    signalDescription: signalDescription,
    exitCode: exitCode,
    isCanceled: isCanceled
  });
  var message = "Command ".concat(prefix, ": ").concat(command);

  if (error instanceof Error) {
    error.originalMessage = error.message;
    error.message = "".concat(message, "\n").concat(error.message);
  } else {
    error = new Error(message);
  }

  error.command = command;
  error.exitCode = exitCode;
  error.signal = signal;
  error.signalDescription = signalDescription;
  error.stdout = stdout;
  error.stderr = stderr;

  if (all !== undefined) {
    error.all = all;
  }

  if ('bufferedData' in error) {
    delete error.bufferedData;
  }

  error.failed = true;
  error.timedOut = Boolean(timedOut);
  error.isCanceled = isCanceled;
  error.killed = killed && !timedOut;
  return error;
};

module.exports = makeError;