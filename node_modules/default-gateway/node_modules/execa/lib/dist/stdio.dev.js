'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var aliases = ['stdin', 'stdout', 'stderr'];

var hasAlias = function hasAlias(opts) {
  return aliases.some(function (alias) {
    return opts[alias] !== undefined;
  });
};

var normalizeStdio = function normalizeStdio(opts) {
  if (!opts) {
    return;
  }

  var stdio = opts.stdio;

  if (stdio === undefined) {
    return aliases.map(function (alias) {
      return opts[alias];
    });
  }

  if (hasAlias(opts)) {
    throw new Error("It's not possible to provide `stdio` in combination with one of ".concat(aliases.map(function (alias) {
      return "`".concat(alias, "`");
    }).join(', ')));
  }

  if (typeof stdio === 'string') {
    return stdio;
  }

  if (!Array.isArray(stdio)) {
    throw new TypeError("Expected `stdio` to be of type `string` or `Array`, got `".concat(_typeof(stdio), "`"));
  }

  var length = Math.max(stdio.length, aliases.length);
  return Array.from({
    length: length
  }, function (value, index) {
    return stdio[index];
  });
};

module.exports = normalizeStdio; // `ipc` is pushed unless it is already present

module.exports.node = function (opts) {
  var stdio = normalizeStdio(opts);

  if (stdio === 'ipc') {
    return 'ipc';
  }

  if (stdio === undefined || typeof stdio === 'string') {
    return [stdio, stdio, stdio, 'ipc'];
  }

  if (stdio.includes('ipc')) {
    return stdio;
  }

  return [].concat(_toConsumableArray(stdio), ['ipc']);
};