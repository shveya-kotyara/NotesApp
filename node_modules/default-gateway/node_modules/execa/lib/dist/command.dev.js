'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var SPACES_REGEXP = / +/g;

var joinCommand = function joinCommand(file) {
  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!Array.isArray(args)) {
    return file;
  }

  return [file].concat(_toConsumableArray(args)).join(' ');
}; // Allow spaces to be escaped by a backslash if not meant as a delimiter


var handleEscaping = function handleEscaping(tokens, token, index) {
  if (index === 0) {
    return [token];
  }

  var previousToken = tokens[tokens.length - 1];

  if (previousToken.endsWith('\\')) {
    return [].concat(_toConsumableArray(tokens.slice(0, -1)), ["".concat(previousToken.slice(0, -1), " ").concat(token)]);
  }

  return [].concat(_toConsumableArray(tokens), [token]);
}; // Handle `execa.command()`


var parseCommand = function parseCommand(command) {
  return command.trim().split(SPACES_REGEXP).reduce(handleEscaping, []);
};

module.exports = {
  joinCommand: joinCommand,
  parseCommand: parseCommand
};