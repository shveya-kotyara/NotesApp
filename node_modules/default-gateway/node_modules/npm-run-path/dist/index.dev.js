'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var path = require('path');

var pathKey = require('path-key');

var npmRunPath = function npmRunPath(options) {
  options = _objectSpread({
    cwd: process.cwd(),
    path: process.env[pathKey()],
    execPath: process.execPath
  }, options);
  var previous;
  var cwdPath = path.resolve(options.cwd);
  var result = [];

  while (previous !== cwdPath) {
    result.push(path.join(cwdPath, 'node_modules/.bin'));
    previous = cwdPath;
    cwdPath = path.resolve(cwdPath, '..');
  } // Ensure the running `node` binary is used


  var execPathDir = path.resolve(options.cwd, options.execPath, '..');
  result.push(execPathDir);
  return result.concat(options.path).join(path.delimiter);
};

module.exports = npmRunPath; // TODO: Remove this for the next major release

module.exports["default"] = npmRunPath;

module.exports.env = function (options) {
  options = _objectSpread({
    env: process.env
  }, options);

  var env = _objectSpread({}, options.env);

  var path = pathKey({
    env: env
  });
  options.path = env[path];
  env[path] = module.exports(options);
  return env;
};