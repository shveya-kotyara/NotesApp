"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var net = require("net");

var execa = require("execa");

var dests = ["default", "0.0.0.0", "0.0.0.0/0", "::", "::/0"];
var args = {
  v4: ["-rn", "-f", "inet"],
  v6: ["-rn", "-f", "inet6"]
};

var parse = function parse(stdout) {
  var result;
  (stdout || "").trim().split("\n").some(function (line) {
    var _ref = line.split(/ +/) || [],
        _ref2 = _slicedToArray(_ref, 4),
        target = _ref2[0],
        gateway = _ref2[1],
        _ = _ref2[2],
        iface = _ref2[3];

    if (dests.includes(target) && gateway && net.isIP(gateway)) {
      result = {
        gateway: gateway,
        "interface": iface ? iface : null
      };
      return true;
    }
  });

  if (!result) {
    throw new Error("Unable to determine default gateway");
  }

  return result;
};

var promise = function promise(family) {
  var _ref3, stdout;

  return regeneratorRuntime.async(function promise$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(execa("netstat", args[family]));

        case 2:
          _ref3 = _context.sent;
          stdout = _ref3.stdout;
          return _context.abrupt("return", parse(stdout));

        case 5:
        case "end":
          return _context.stop();
      }
    }
  });
};

var sync = function sync(family) {
  var _execa$sync = execa.sync("netstat", args[family]),
      stdout = _execa$sync.stdout;

  return parse(stdout);
};

module.exports.v4 = function () {
  return promise("v4");
};

module.exports.v6 = function () {
  return promise("v6");
};

module.exports.v4.sync = function () {
  return sync("v4");
};

module.exports.v6.sync = function () {
  return sync("v6");
};