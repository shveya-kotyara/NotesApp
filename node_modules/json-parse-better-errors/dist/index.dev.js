'use strict';

module.exports = parseJson;

function parseJson(txt, reviver, context) {
  context = context || 20;

  try {
    return JSON.parse(txt, reviver);
  } catch (e) {
    if (typeof txt !== 'string') {
      var isEmptyArray = Array.isArray(txt) && txt.length === 0;
      var errorMessage = 'Cannot parse ' + (isEmptyArray ? 'an empty array' : String(txt));
      throw new TypeError(errorMessage);
    }

    var syntaxErr = e.message.match(/^Unexpected token.*position\s+(\d+)/i);
    var errIdx = syntaxErr ? +syntaxErr[1] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;

    if (errIdx != null) {
      var start = errIdx <= context ? 0 : errIdx - context;
      var end = errIdx + context >= txt.length ? txt.length : errIdx + context;
      e.message += " while parsing near '".concat(start === 0 ? '' : '...').concat(txt.slice(start, end)).concat(end === txt.length ? '' : '...', "'");
    } else {
      e.message += " while parsing '".concat(txt.slice(0, context * 2), "'");
    }

    throw e;
  }
}