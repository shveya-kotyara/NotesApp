"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var qs = require("querystring");

var loaderUtils = require("loader-utils");

var formatError_1 = require("./formatError");

var compiler_sfc_1 = require("@vue/compiler-sfc"); // Loader that compiles raw template into JavaScript functions.
// This is injected by the global pitcher (../pitch) for template
// selection requests initiated from vue files.


var TemplateLoader = function TemplateLoader(source, inMap) {
  source = String(source);
  var loaderContext = this; // although this is not the main vue-loader, we can get access to the same
  // vue-loader options because we've set an ident in the plugin and used that
  // ident to create the request for this loader in the pitcher.

  var options = loaderUtils.getOptions(loaderContext) || {}; // const isServer = loaderContext.target === 'node'
  // const isProduction = options.productionMode || loaderContext.minimize || process.env.NODE_ENV === 'production'

  var query = qs.parse(loaderContext.resourceQuery.slice(1));
  var scopeId = query.scoped ? "data-v-".concat(query.id) : null;
  var compiler;

  if (typeof options.compiler === 'string') {
    compiler = require(options.compiler);
  } else {
    compiler = options.compiler;
  }

  var compiled = compiler_sfc_1.compileTemplate({
    source: source,
    inMap: inMap,
    filename: loaderContext.resourcePath,
    ssr: loaderContext.target === 'node',
    compiler: compiler,
    compilerOptions: Object.assign(Object.assign({}, options.compilerOptions), {
      scopeId: scopeId,
      bindingMetadata: typeof query.bindings === 'string' ? JSON.parse(query.bindings) : {}
    }),
    transformAssetUrls: options.transformAssetUrls || true
  }); // tips

  if (compiled.tips.length) {
    compiled.tips.forEach(function (tip) {
      loaderContext.emitWarning(tip);
    });
  } // errors


  if (compiled.errors && compiled.errors.length) {
    compiled.errors.forEach(function (err) {
      if (typeof err === 'string') {
        loaderContext.emitError(err);
      } else {
        formatError_1.formatError(err, inMap ? inMap.sourcesContent[0] : source, loaderContext.resourcePath);
        loaderContext.emitError(err);
      }
    });
  }

  var code = compiled.code,
      map = compiled.map;
  loaderContext.callback(null, code, map);
};

exports["default"] = TemplateLoader;